{"version":3,"file":"static/js/520.63e4c564.chunk.js","mappings":"8OACA,SAASA,EAAeC,EAIrBC,GAAQ,IAJc,MACvBC,EAAK,QACLC,GAEDH,EADII,GAAKC,EAAAA,EAAAA,GAAAL,EAAAM,GAER,OAAoBC,EAAAA,cAAoB,MAAOC,OAAOC,OAAO,CAC3DC,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACR,cAAe,OACf,YAAa,OACbC,IAAKd,EACL,kBAAmBE,GAClBC,GAAQF,EAAqBK,EAAAA,cAAoB,QAAS,CAC3DS,GAAIb,GACHD,GAAS,KAAmBK,EAAAA,cAAoB,OAAQ,CACzDU,cAAe,QACfC,eAAgB,QAChBC,EAAG,mEAEP,CACA,MACA,EADiCZ,EAAAA,WAAiBR,E,gICvBlD,SAASqB,EAASpB,EAIfC,GAAQ,IAJQ,MACjBC,EAAK,QACLC,GAEDH,EADII,GAAKC,EAAAA,EAAAA,GAAAL,EAAAM,GAER,OAAoBC,EAAAA,cAAoB,MAAOC,OAAOC,OAAO,CAC3DC,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACR,cAAe,OACf,YAAa,OACbC,IAAKd,EACL,kBAAmBE,GAClBC,GAAQF,EAAqBK,EAAAA,cAAoB,QAAS,CAC3DS,GAAIb,GACHD,GAAS,KAAmBK,EAAAA,cAAoB,OAAQ,CACzDU,cAAe,QACfC,eAAgB,QAChBC,EAAG,+IAEP,CACA,MACA,EADiCZ,EAAAA,WAAiBa,E,6ICvBlD,SAASC,EAAWrB,EAIjBC,GAAQ,IAJU,MACnBC,EAAK,QACLC,GAEDH,EADII,GAAKC,EAAAA,EAAAA,GAAAL,EAAAM,GAER,OAAoBC,EAAAA,cAAoB,MAAOC,OAAOC,OAAO,CAC3DC,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACR,cAAe,OACf,YAAa,OACbC,IAAKd,EACL,kBAAmBE,GAClBC,GAAQF,EAAqBK,EAAAA,cAAoB,QAAS,CAC3DS,GAAIb,GACHD,GAAS,KAAmBK,EAAAA,cAAoB,OAAQ,CACzDU,cAAe,QACfC,eAAgB,QAChBC,EAAG,0EAEP,CACA,MACA,EADiCZ,EAAAA,WAAiBc,E,mLCnBlD,MAkIA,EAlIkCC,KAChCC,QAAQC,IAAI,wDACZD,QAAQC,IAAI,OAAQC,OAAOC,SAASC,MACpCJ,QAAQC,IAAI,iBAAkBC,OAAOC,SAASE,QAE9C,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,IAAgBC,EAAAA,EAAAA,OAChBC,EAAQC,IAAaC,EAAAA,EAAAA,UAAmD,SACxEC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,IACjCG,GAAeC,EAAAA,EAAAA,SAAO,IAE5BC,EAAAA,EAAAA,WAAU,KACRjB,QAAQC,IAAI,6CACG,SAAXS,GAAsBK,EAAaG,SACrCC,KAED,CAACT,IAEJ,MAAMS,EAAiBC,UAErB,GAAIL,EAAaG,SAAsB,SAAXR,EAC1BV,QAAQC,IAAI,mFADd,CAKAc,EAAaG,SAAU,EACvB,IACElB,QAAQC,IAAI,sCACZU,EAAU,WAEV,MAAMU,EAAOb,EAAac,IAAI,QACxBC,EAAQf,EAAac,IAAI,SACzBE,EAAQhB,EAAac,IAAI,SAIxB,GAFPtB,QAAQC,IAAI,sBAAuB,CAAEoB,OAAME,QAAOC,UAEvCA,EAIR,OAHAxB,QAAQwB,MAAM,0BAA2BA,GACzCb,EAAU,cACVG,EAAW,gCAADW,OAA8BD,IAIpC,IAAKH,IAASE,EAIlB,OAHAvB,QAAQwB,MAAM,6BAAwB,CAAEH,OAAME,UAC9CZ,EAAU,cACVG,EAAW,mDAIdd,QAAQC,IAAI,0CAGNyB,EAAAA,EAAeC,mBAAmBN,EAAME,GAE9CvB,QAAQC,IAAI,sCAEZU,EAAU,WACVG,EAAW,mDAGTc,WAAW,KACT5B,QAAQC,IAAI,kEACZK,EAAS,kCACR,IAEL,CAAE,MAAOkB,GACPxB,QAAQwB,MAAM,iCAAkCA,GAChDb,EAAU,SACVG,EAAW,wDACb,CAAC,QACCC,EAAaG,SAAU,CACzB,CAjDF,GAoDF,OACEW,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2DAA0DC,UACvEF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oDAAmDC,UAChEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,CACd,YAAXrB,IACCsB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAF,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iFACfD,EAAAA,EAAAA,KAAChC,EAAAA,EAAS,CAACiC,UAAU,wCACrBD,EAAAA,EAAAA,KAAA,MAAIC,UAAU,2CAA0CC,SAAC,gCAGzDF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeC,SAAC,mDAMrB,YAAXrB,IACCsB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAF,SAAA,EACEF,EAAAA,EAAAA,KAACrD,EAAAA,EAAe,CAACsD,UAAU,2CAC3BD,EAAAA,EAAAA,KAAA,MAAIC,UAAU,2CAA0CC,SAAC,mCAGzDF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,qBAAoBC,SAC9BlB,KAEHgB,EAAAA,EAAAA,KAAA,KAAGC,UAAU,wBAAuBC,SAAC,+CAM7B,UAAXrB,IACCsB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAF,SAAA,EACEF,EAAAA,EAAAA,KAAC/B,EAAAA,EAAW,CAACgC,UAAU,yCACvBD,EAAAA,EAAAA,KAAA,MAAIC,UAAU,2CAA0CC,SAAC,sBAGzDF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,qBAAoBC,SAC9BlB,KAEHgB,EAAAA,EAAAA,KAAA,UACEK,QAASA,IAAM5B,GAAU,GACzBwB,UAAU,yFAAwFC,SACnG,2B,yFCzHf,MAAMI,EAAkBC,kBAClBC,EAAqBD,kBACrBE,EAAuBF,yCA+nBtB,MAAMV,EAAiB,IAjmB9B,MAIEa,WAAAA,GAAe,KAHPC,IAAsB,KAAK,KAC3BC,YAA6B,KAGnCzC,QAAQC,IAAI,oCACZD,QAAQC,IAAI,2CAAyC,CACnDyC,OAAQP,EACRQ,UAAWN,EAAqB,MAAQ,WACxCO,gBAAiBP,EAAqBA,GAA4B,EAClEQ,YAAaP,IAGfQ,KAAKL,YAAcM,aAAaC,QAAQ,wBACxChD,QAAQC,IAAI,wCAAyC6C,KAAKL,YAAc,WAAa,cAEjFK,KAAKL,aACPK,KAAKG,kBAAkBH,KAAKL,aAC5BzC,QAAQC,IAAI,qDAEZD,QAAQC,IAAI,6EAEhB,CAGQgD,iBAAAA,CAAkBR,GACxBK,KAAKN,IAAM,IAAIU,EAAAA,QAAQ,CACrBT,YAAaA,EACbU,MAAOjD,OAAOiD,MAAMC,KAAKlD,SAE7B,CAGAmD,UAAAA,GAEEN,aAAaO,WAAW,sBAExB,MAAM/B,EAAQgC,KAAKC,SAASC,SAAS,IAAIC,UAAU,GACnDX,aAAaY,QAAQ,qBAAsBpC,GAE3CvB,QAAQC,IAAI,+CAA6C,CACvDyC,OAAQP,EACRU,YAAaP,EACbf,MAAOA,EACPqC,WAAW,IAAIC,MAAOC,gBAGxB,MAAMC,EAAO,sDAAAtC,OAAyDU,EAAe,qCAAAV,OAAoCuC,mBAAmB1B,GAAqB,WAAAb,OAAUF,EAAK,8BAIhL,OAFAvB,QAAQC,IAAI,mDAAiD8D,GAEtDA,CACT,CAGA,wBAAMpC,CAAmBN,EAAcE,GACrCvB,QAAQC,IAAI,qDACZD,QAAQC,IAAI,aAAc,CAAEoB,KAAMA,EAAKqC,UAAU,EAAG,IAAM,MAAOnC,UAEjE,MAAM0C,EAAalB,aAAaC,QAAQ,sBAIxC,GAHAhD,QAAQC,IAAI,yBAAkBgE,GAC9BjE,QAAQC,IAAI,oBAAqB,CAAEiE,SAAU3C,EAAO4C,MAAOF,EAAYG,MAAO7C,IAAU0C,IAEpF1C,IAAU0C,EAOZ,MANAjE,QAAQwB,MAAM,mBAAoB,CAAE0C,SAAU3C,EAAO4C,MAAOF,IAC5DjE,QAAQwB,MAAM,yCAAgC,CAC5C6C,mBAAoBtB,aAAaC,QAAQ,sBACzCsB,qBAAsBvB,aAAaC,QAAQ,wBAC3CuB,sBAAuBxB,aAAaC,QAAQ,2BAExC,IAAIwB,MAAM,2BAIlBxE,QAAQC,IAAI,yEAEZ,IACED,QAAQC,IAAI,8CACZD,QAAQC,IAAI,yDAA0D,CACpEoB,KAAMA,EAAKqC,UAAU,EAAG,IAAM,MAC9Be,UAAWtC,EACXuC,cAAerC,EAAqB,MAAQ,WAC5CsC,aAAcrC,IAGhB,MAAMsC,EAAc,IAAIC,gBAAgB,CACtCxD,KAAMA,EACNyD,WAAY,qBACZL,UAAWtC,EACXuC,cAAerC,EACfsC,aAAcrC,IAGhBtC,QAAQC,IAAI,oDAAqD2E,EAAYnB,YAE7E,MAAMsB,QAAiB7E,OAAOiD,MAAM,0CAA2C,CAC7E6B,OAAQ,OACRC,QAAS,CACP,eAAgB,qCAElBC,KAAMN,IAKR,GAFA5E,QAAQC,IAAI,+BAAgC8E,EAASrE,SAEhDqE,EAASI,GAAI,CAChB,MAAMC,QAAkBL,EAASM,OAGjC,MAFArF,QAAQwB,MAAM,qBAAsB4D,GACpCpF,QAAQwB,MAAM,gCAAiCvC,OAAOqG,YAAYP,EAASE,QAAQM,YAC7E,IAAIf,MAAM,sCAAD/C,OAAuC2D,GACxD,CAEA,MAAMI,QAAsCT,EAASU,OAwBrD,OAvBAzF,QAAQC,IAAI,+CAAgC,CAC1CyF,aAAcF,EAAWE,aAAahC,UAAU,EAAG,IAAM,MACzDiC,WAAYH,EAAWG,WACvBC,WAAYJ,EAAWI,aAIzB9C,KAAKL,YAAc+C,EAAWE,aAC9B3C,aAAaY,QAAQ,uBAAwB6B,EAAWE,cACpDF,EAAWK,eACb9C,aAAaY,QAAQ,wBAAyB6B,EAAWK,eAI3D9C,aAAaO,WAAW,sBACxBtD,QAAQC,IAAI,6DAEZD,QAAQC,IAAI,0CAGZ6C,KAAKG,kBAAkBuC,EAAWE,cAClC1F,QAAQC,IAAI,oCAELuF,CACT,CAAE,MAAOhE,GAEP,MADAxB,QAAQwB,MAAM,+BAAgCA,GACxCA,CACR,CACF,CAGAsE,eAAAA,GAEE,MAAMC,EAAmBhD,aAAaC,QAAQ,wBAG1C+C,IAAqBjD,KAAKL,cAC5BK,KAAKL,YAAcsD,EACnBjD,KAAKG,kBAAkB8C,GACvB/F,QAAQC,IAAI,2EAGd,MAAM+F,EAA6B,OAAblD,KAAKN,KAAqC,OAArBM,KAAKL,YAOhD,OANAzC,QAAQC,IAAI,kCAAmC,CAC7CuC,IAAkB,OAAbM,KAAKN,IACVC,YAAkC,OAArBK,KAAKL,YAClBsD,iBAAkBA,EAAmB,WAAa,aAClDE,OAAQD,IAEHA,CACT,CAGAE,MAAAA,GACEpD,KAAKN,IAAM,KACXM,KAAKL,YAAc,KACnBM,aAAaO,WAAW,wBACxBP,aAAaO,WAAW,yBACxBP,aAAaO,WAAW,qBAC1B,CAGA,oBAAM6C,GACJ,IAAKrD,KAAKN,IACR,MAAM,IAAIgC,MAAM,2BAGlB,IAGE,GAFAxE,QAAQC,IAAI,4DAEP6C,KAAKN,IAAI4D,uBACZ,MAAM,IAAI5B,MAAM,2CAIlB,IAAK1B,KAAKN,IAAI4D,uBAEZ,MADApG,QAAQwB,MAAM,wCACR,IAAIgD,MAAM,wCAGlB,MAAMO,QAAiBjC,KAAKN,IAAI4D,yBAEhC,OADApG,QAAQC,IAAI,gDAA4C8E,GACjDA,EAASkB,MAClB,CAAE,MAAOzE,GAGP,GAFAxB,QAAQwB,MAAM,8BAA+BA,GAEzCA,aAAiBgD,QAAUhD,EAAMX,QAAQwF,SAAS,UAAY7E,EAAMX,QAAQwF,SAAS,uBAAwB,CAC/GrG,QAAQC,IAAI,kFACZ,MAAMqG,EAAQvD,aAAaC,QAAQ,wBACnC,GAAIsD,EAAO,CACTxD,KAAKG,kBAAkBqD,GACvB,MAAMvB,QAAiBjC,KAAKN,IAAK4D,yBAEjC,OADApG,QAAQC,IAAI,yEAA4D8E,GACjEA,EAASkB,MAClB,CACF,CACA,MAAMzE,CACR,CACF,CAGA,eAAM+E,GAAoE,IAA1DC,EAAYC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAIG,EAAYH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7C,IAAK7D,KAAKN,IACR,MAAM,IAAIgC,MAAM,2BAGlB,IACExE,QAAQC,IAAI,iCACZD,QAAQC,IAAI,4CACZD,QAAQC,IAAI,mCAAoCuG,GAChDxG,QAAQC,IAAI,kCAAmC2G,GAC/C5G,QAAQC,IAAI,gDAAiD6C,KAAKN,KAGlE,IAAIqE,EAAaL,EACjB,GAAII,IAAQJ,EAAKM,WAAW,sBAAuB,CAEjD,MAAMC,EAAgBjE,KAAKkE,qBAAqBJ,GAChDC,EAAaE,GAAiBP,EAAO,IAAMA,EAAO,IAClDxG,QAAQC,IAAI,4CAA6C8G,EAC3D,CAEA/G,QAAQC,IAAI,yCAA0C4G,GACtD7G,QAAQC,IAAI,mEAEZ,MAAM8E,QAAiBjC,KAAKN,IAAIyE,gBAAgB,CAC9CT,KAAMK,EACNK,MAAO,MAGTlH,QAAQC,IAAI,gDAWZ,OAVoB8E,EAASkB,OAAOV,QAAQ4B,IAAIC,IAAK,CACnD3H,GAAsB,YAAlB2H,EAAM,QAAwB,GAAMA,EAAc3H,IAAM,GAC5D4H,KAAMD,EAAMC,KACZC,WAAYF,EAAME,YAAc,GAChCC,KAAwB,SAAlBH,EAAM,SAAsBA,EAAcG,MAAY,EAC5DC,gBAAmC,SAAlBJ,EAAM,SAAsBA,EAAcI,iBAAwB,GACnFC,aAAgC,SAAlBL,EAAM,SAAsBA,EAAcK,cAAqB,GAC7EC,IAAKN,EAAM,UAIf,CAAE,MAAO5F,GAMP,MALAxB,QAAQwB,MAAM,oCAAqCA,GAC/CA,aAAiBgD,QACnBxE,QAAQwB,MAAM,4CAA6CA,EAAMX,SACjEb,QAAQwB,MAAM,0CAA2CA,EAAMmG,QAE3DnG,CACR,CACF,CAGAwF,oBAAAA,CAAqBJ,GACnB,MAAMgB,EAAU9E,KAAK+E,QAAQjB,GAC7B,MAAM,qBAANnF,OAA4BmG,EAC9B,CAGAC,OAAAA,CAAQjB,GAGN,OAAOA,EAAIkB,QAAQ,MAAO,IAAIA,QAAQ,gBAAiB,GACzD,CAGA,yBAAMC,CAAoBnB,GACxB,IAAK9D,KAAKN,IACR,MAAM,IAAIgC,MAAM,2BAGlB,IACE,MAAMwD,EAAclF,KAAKkE,qBAAqBJ,SAGvB9D,KAAKN,IAAIyF,oBAAoB,CAClDzB,KAAMwB,EACNE,YAAY,IAGd,OAAOF,CACT,CAAE,MAAOxG,GAEP,MADAxB,QAAQwB,MAAM,iCAAkCA,GAC1CA,CACR,CACF,CAGA,0BAAM2G,CAAqBvB,GACzB,IAAK9D,KAAKN,IACR,MAAM,IAAIgC,MAAM,2BAGlB,IACE,MAAMwD,EAAclF,KAAKkE,qBAAqBJ,GAC9C,aAAa9D,KAAKsF,cAAcJ,EAClC,CAAE,MAAOxG,GAEP,MADAxB,QAAQwB,MAAM,qCAAsCA,GAC9CA,CACR,CACF,CAGA,gBAAM6G,CAAWC,EAAY9B,EAAcI,EAAc2B,GACvD,IAAKzF,KAAKN,IACR,MAAM,IAAIgC,MAAM,2BAGlB,IACE,MAAMgE,QAAmBF,EAAKG,cAG9B,IAAIC,EAAWlC,EAAO,IAAM8B,EAAKjB,KACjC,GAAIT,IAAQJ,EAAKM,WAAW,sBAAuB,CACjD,MAAMC,EAAgBjE,KAAKkE,qBAAqBJ,GAChD8B,EAAW3B,EAAgB,KAAOP,EAAOA,EAAO,IAAM,IAAM8B,EAAKjB,KACjErH,QAAQC,IAAI,6CAA8C8G,EAC5D,CAEA/G,QAAQC,IAAI,wCAAyCyI,GAErD,MAAM3D,QAAiBjC,KAAKN,IAAImG,YAAY,CAC1CnC,KAAMkC,EACNE,SAAUJ,EACVK,KAAM,CAAE,OAAQ,aAChBX,YAAY,EACZY,MAAM,IAKR,OAFA9I,QAAQC,IAAI,+CAAgD8E,GAErD,CACLtF,GAAIsF,EAASkB,OAAOxG,GACpB4H,KAAMtC,EAASkB,OAAOoB,KACtBC,WAAYvC,EAASkB,OAAOqB,YAAc,GAC1CC,KAAMxC,EAASkB,OAAOsB,KACtBC,gBAAiBzC,EAASkB,OAAOuB,gBAErC,CAAE,MAAOhG,GAEP,MADAxB,QAAQwB,MAAM,wBAAyBA,GACjCA,CACR,CACF,CAGA,kBAAMuH,CAAavC,GACjB,IAAK1D,KAAKN,IACR,MAAM,IAAIgC,MAAM,2BAGlB,IACE,MAKMwE,SALiBlG,KAAKN,IAAIyG,cAAc,CAC5CzC,KAAMA,KAImBP,OAAe+C,SAK1C,OAJa,IAAIE,KAAK,CAACF,GAAW,CAChCG,KAAMH,EAASG,MAAQ,4BAI3B,CAAE,MAAO3H,GAEP,MADAxB,QAAQwB,MAAM,0BAA2BA,GACnCA,CACR,CACF,CAGA,gBAAM4H,CAAW5C,GACf,IAAK1D,KAAKN,IACR,MAAM,IAAIgC,MAAM,2BAGlB,UACQ1B,KAAKN,IAAI6G,cAAc,CAC3B7C,KAAMA,GAEV,CAAE,MAAOhF,GAEP,MADAxB,QAAQwB,MAAM,uBAAwBA,GAChCA,CACR,CACF,CAGA,kBAAM8H,CAAa9C,GACjB,IAAK1D,KAAKN,IACR,MAAM,IAAIgC,MAAM,2BAGlB,UACQ1B,KAAKN,IAAIyF,oBAAoB,CACjCzB,KAAMA,EACN0B,YAAY,GAEhB,CAAE,MAAO1G,GAEP,MADAxB,QAAQwB,MAAM,yBAA0BA,GAClCA,CACR,CACF,CAGA,mBAAM4G,CAAc5B,GAClB,IAAK1D,KAAKN,IACR,MAAM,IAAIgC,MAAM,2BAGlB,IAUE,aATuB1B,KAAKN,IAAI+G,oCAAoC,CAClE/C,KAAMA,EACNgD,SAAU,CACRC,qBAAsB,CAAE,OAAQ,UAChCC,SAAU,CAAE,OAAQ,UACpBC,OAAQ,CAAE,OAAQ,cAIN1D,OAAO2D,GACzB,CAAE,MAAOpI,GAEP,MADAxB,QAAQwB,MAAM,8BAA+BA,GACvCA,CACR,CACF,CAGA,wBAAMqI,GACJ,MAAMC,EAAe/G,aAAaC,QAAQ,yBAC1C,IAAK8G,EACH,MAAM,IAAItF,MAAM,8BAGlB,IACE,MAAMO,QAAiB7E,OAAOiD,MAAM,0CAA2C,CAC7E6B,OAAQ,OACRC,QAAS,CACP,eAAgB,qCAElBC,KAAM,IAAIL,gBAAgB,CACxBC,WAAY,gBACZe,cAAeiE,EACfrF,UAAWtC,EACXuC,cAAerC,MAInB,IAAK0C,EAASI,GACZ,MAAM,IAAIX,MAAM,2BAGlB,MAAMyB,QAAelB,EAASU,OAO9B,OANA3C,KAAKL,YAAcwD,EAAOP,aAC1B3C,aAAaY,QAAQ,uBAAwBsC,EAAOP,cAGpD5C,KAAKG,kBAAkBgD,EAAOP,cAEvBO,EAAOP,YAChB,CAAE,MAAOlE,GAEP,MADAxB,QAAQwB,MAAM,0BAA2BA,GACnCA,CACR,CACF,CAKA,sBAAMuI,CAAiBC,EAAoBC,GAMzC,IAAKnH,KAAKN,IACR,MAAM,IAAIgC,MAAM,2BAGlB,IACExE,QAAQC,IAAI,0DAAwD+J,GACpEhK,QAAQC,IAAI,mDAAiDgK,GAG7D,IAAIN,EAAsD,CAAE,OAAQ,WAChEM,EAAYC,SAAWD,EAAYE,WAAaF,EAAYG,aAC9DT,EAAS,CAAE,OAAQ,WAGrB3J,QAAQC,IAAI,kDAAmD0J,GAE/D,MAAM5E,QAAiBjC,KAAKN,IAAI+G,oCAAoC,CAClE/C,KAAMwD,EACNR,SAAU,CACRC,qBAAsB,CAAE,OAAQ,UAChCC,SAAU,CAAE,OAAQ,UACpBC,OAAQA,KAKZ,OADA3J,QAAQC,IAAI,uEAA6D8E,EAASkB,OAAO2D,KAClF7E,EAASkB,OAAO2D,GACzB,CAAE,MAAOpI,GAIN,GAHDxB,QAAQwB,MAAM,+CAAgDA,GAGzDA,aAAiBgD,QAAUhD,EAAMX,QAAQwF,SAAS,+BAAiC7E,EAAMX,QAAQwF,SAAS,QAAS,CACrHrG,QAAQC,IAAI,kEACZ,IACE,MAAMoK,QAAsBvH,KAAKN,IAAI8H,uBAAuB,CAC1D9D,KAAMwD,EACNO,aAAa,IAGf,GAAIF,EAAcpE,OAAOuE,MAAM9D,OAAS,EAEtC,OADA1G,QAAQC,IAAI,sCAA+BoK,EAAcpE,OAAOuE,MAAM,GAAGZ,KAClES,EAAcpE,OAAOuE,MAAM,GAAGZ,GAEzC,CAAE,MAAOa,GACPzK,QAAQwB,MAAM,mDAA2CiJ,EAC3D,CACF,CAED,MAAMjJ,CACR,CACF,CAGA,sBAAMkJ,CAAiBC,GACrB,IAAK7H,KAAKN,IACR,MAAM,IAAIgC,MAAM,2BAGlB,IACExE,QAAQC,IAAI,uDAAqD0K,SAE3D7H,KAAKN,IAAIoI,wBAAwB,CACrChB,IAAKe,IAGP3K,QAAQC,IAAI,qEACd,CAAE,MAAOuB,GAIP,GAHAxB,QAAQwB,MAAM,8BAA+BA,GAGzCA,aAAiBgD,OAAShD,EAAMX,QAAQwF,SAAS,aAEnD,YADArG,QAAQC,IAAI,0EAId,MAAMuB,CACR,CACF,CAGA,uBAAMqJ,GACJ,IAAK/H,KAAKN,IACR,MAAM,IAAIgC,MAAM,2BAGlB,IACExE,QAAQC,IAAI,gGAEZ,MAAM8E,QAAiBjC,KAAKN,IAAI8H,uBAAuB,CACrD9D,KAAM,oBACN+D,aAAa,IAIf,OADAvK,QAAQC,IAAI,gEAAsD8E,EAASkB,OAAOuE,OAC3EzF,EAASkB,OAAOuE,KACzB,CAAE,MAAOhJ,GAEP,MADAxB,QAAQwB,MAAM,8BAA+BA,GACvCA,CACR,CACF,CAGA,uBAAMsJ,CAAkBd,GACtB,IAAKlH,KAAKN,IACR,MAAM,IAAIgC,MAAM,2BAGlB,IACExE,QAAQC,IAAI,8DAA0D+J,GAEtE,MAAMjF,QAAiBjC,KAAKN,IAAIuI,iBAAiB,CAC/CvE,KAAMwD,IAIR,OADAhK,QAAQC,IAAI,2DAAuD8E,GAChC,WAA5BA,EAASkB,OAAO,OACzB,CAAE,MAAOzE,GAEP,OADAxB,QAAQC,IAAI,6DAAyDuB,IAC9D,CACT,CACF,E","sources":["../node_modules/@heroicons/react/24/outline/esm/CheckCircleIcon.js","../node_modules/@heroicons/react/24/outline/esm/CloudIcon.js","../node_modules/@heroicons/react/24/outline/esm/XCircleIcon.js","pages/DropboxCallback.tsx","services/dropboxService.ts"],"sourcesContent":["import * as React from \"react\";\nfunction CheckCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M9 12.75 11.25 15 15 9.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(CheckCircleIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction CloudIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M2.25 15a4.5 4.5 0 0 0 4.5 4.5H18a3.75 3.75 0 0 0 1.332-7.257 3 3 0 0 0-3.758-3.848 5.25 5.25 0 0 0-10.233 2.33A4.502 4.502 0 0 0 2.25 15Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(CloudIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction XCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m9.75 9.75 4.5 4.5m0-4.5-4.5 4.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(XCircleIcon);\nexport default ForwardRef;","import React, { useEffect, useState, useRef } from 'react';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\nimport { CloudIcon, CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/outline';\r\nimport { dropboxService } from '../services/dropboxService';\r\n\r\nconst DropboxCallback: React.FC = () => {\r\n  console.log('=== DropboxCallback komponent sa načítal ===');\r\n  console.log('URL:', window.location.href);\r\n  console.log('Search params:', window.location.search);\r\n  \r\n  const navigate = useNavigate();\r\n  const [searchParams] = useSearchParams();\r\n  const [status, setStatus] = useState<'idle' | 'loading' | 'success' | 'error'>('idle');\r\n  const [message, setMessage] = useState('');\r\n  const isProcessing = useRef(false);\r\n\r\n  useEffect(() => {\r\n    console.log('DropboxCallback useEffect - začiatok');\r\n    if (status === 'idle' && !isProcessing.current) {\r\n      handleCallback();\r\n    }\r\n  }, [status]); // Závisí na status\r\n\r\n  const handleCallback = async () => {\r\n    // Kontrola, či sa callback už spracováva\r\n    if (isProcessing.current || status !== 'idle') {\r\n      console.log('Callback už sa spracováva alebo bol dokončený, ignorujem...');\r\n      return;\r\n    }\r\n\r\n    isProcessing.current = true;\r\n    try {\r\n      console.log('Spracovávam Dropbox callback...');\r\n      setStatus('loading');\r\n      \r\n      const code = searchParams.get('code');\r\n      const state = searchParams.get('state');\r\n      const error = searchParams.get('error');\r\n\r\n      console.log('Callback parametre:', { code, state, error });\r\n\r\n             if (error) {\r\n         console.error('Dropbox callback error:', error);\r\n         setStatus('error');\r\n         setMessage(`Chyba pri autentifikácii: ${error}`);\r\n         return;\r\n       }\r\n\r\n             if (!code || !state) {\r\n         console.error('Chýbajúce parametre:', { code, state });\r\n         setStatus('error');\r\n         setMessage('Chýbajúce parametre pre autentifikáciu');\r\n         return;\r\n       }\r\n\r\n      console.log('Spracovávam OAuth callback...');\r\n      \r\n      // Spracovanie OAuth callback\r\n      await dropboxService.handleAuthCallback(code, state);\r\n      \r\n      console.log('OAuth callback úspešný!');\r\n      \r\n      setStatus('success');\r\n      setMessage('Úspešne ste sa prihlásili k Dropbox!');\r\n      \r\n                     // Presmeruje späť na dashboard s URL parametrom\r\n        setTimeout(() => {\r\n          console.log('Presmerovávam späť na dashboard s URL parametrom...');\r\n          navigate('/dashboard?from_callback=true');\r\n        }, 2000);\r\n\r\n      } catch (error) {\r\n        console.error('Error during Dropbox callback:', error);\r\n        setStatus('error');\r\n        setMessage('Chyba pri pripojení k Dropbox. Skúste to znova.');\r\n      } finally {\r\n        isProcessing.current = false;\r\n      }\r\n    };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n      <div className=\"max-w-md w-full bg-white rounded-lg shadow-md p-8\">\r\n        <div className=\"text-center\">\r\n          {status === 'loading' && (\r\n            <>\r\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\r\n              <CloudIcon className=\"mx-auto h-8 w-8 text-blue-500 mb-4\" />\r\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\r\n                Pripájanie k Dropbox...\r\n              </h2>\r\n              <p className=\"text-gray-600\">\r\n                Spracovávame vašu autentifikáciu\r\n              </p>\r\n            </>\r\n          )}\r\n\r\n          {status === 'success' && (\r\n            <>\r\n              <CheckCircleIcon className=\"mx-auto h-12 w-12 text-green-500 mb-4\" />\r\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\r\n                Úspešne pripojené!\r\n              </h2>\r\n              <p className=\"text-gray-600 mb-4\">\r\n                {message}\r\n              </p>\r\n              <p className=\"text-sm text-gray-500\">\r\n                Presmerovávam vás späť...\r\n              </p>\r\n            </>\r\n          )}\r\n\r\n          {status === 'error' && (\r\n            <>\r\n              <XCircleIcon className=\"mx-auto h-12 w-12 text-red-500 mb-4\" />\r\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\r\n                Chyba pripojenia\r\n              </h2>\r\n              <p className=\"text-gray-600 mb-4\">\r\n                {message}\r\n              </p>\r\n              <button\r\n                onClick={() => navigate(-1)}\r\n                className=\"inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700\"\r\n              >\r\n                Späť\r\n              </button>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DropboxCallback;\r\n","import { Dropbox } from 'dropbox';\r\n\r\n// Dropbox konfigurácia\r\nconst DROPBOX_APP_KEY = process.env.REACT_APP_DROPBOX_APP_KEY || '';\r\nconst DROPBOX_APP_SECRET = process.env.REACT_APP_DROPBOX_APP_SECRET || '';\r\nconst DROPBOX_REDIRECT_URI = process.env.REACT_APP_DROPBOX_REDIRECT_URI || 'http://localhost:3000/dropbox-callback';\r\n\r\nexport interface DropboxFile {\r\n  id: string;\r\n  name: string;\r\n  path_lower: string;\r\n  size: number;\r\n  server_modified: string;\r\n  content_hash: string;\r\n  tag: string;\r\n}\r\n\r\nexport interface DropboxUploadResult {\r\n  id: string;\r\n  name: string;\r\n  path_lower: string;\r\n  size: number;\r\n  server_modified: string;\r\n}\r\n\r\nexport interface DropboxAuthResult {\r\n  access_token: string;\r\n  token_type: string;\r\n  expires_in: number;\r\n  refresh_token?: string;\r\n  scope: string;\r\n  uid: string;\r\n  account_id: string;\r\n}\r\n\r\nclass DropboxService {\r\n  private dbx: Dropbox | null = null;\r\n  private accessToken: string | null = null;\r\n\r\n  constructor() {\r\n    console.log('DropboxService: Inicializujem...');\r\n    console.log('DropboxService: Environment premenné:', {\r\n      appKey: DROPBOX_APP_KEY,\r\n      appSecret: DROPBOX_APP_SECRET ? '***' : 'CHÝBA',\r\n      appSecretLength: DROPBOX_APP_SECRET ? DROPBOX_APP_SECRET.length : 0,\r\n      redirectUri: DROPBOX_REDIRECT_URI\r\n    });\r\n    \r\n    this.accessToken = localStorage.getItem('dropbox_access_token');\r\n    console.log('DropboxService: Token z localStorage:', this.accessToken ? 'existuje' : 'neexistuje');\r\n    \r\n    if (this.accessToken) {\r\n      this.initializeDropbox(this.accessToken);\r\n      console.log('DropboxService: Dropbox klient inicializovaný');\r\n    } else {\r\n      console.log('DropboxService: Žiadny token, Dropbox klient nie je inicializovaný');\r\n    }\r\n  }\r\n\r\n  // Inicializácia Dropbox klienta\r\n  private initializeDropbox(accessToken: string) {\r\n    this.dbx = new Dropbox({\r\n      accessToken: accessToken,\r\n      fetch: window.fetch.bind(window)\r\n    });\r\n  }\r\n\r\n  // Generovanie OAuth URL pre autentifikáciu\r\n  getAuthUrl(): string {\r\n    // Vyčistíme starý state pred vytvorením nového\r\n    localStorage.removeItem('dropbox_auth_state');\r\n    \r\n    const state = Math.random().toString(36).substring(7);\r\n    localStorage.setItem('dropbox_auth_state', state);\r\n    \r\n    console.log('DropboxService.getAuthUrl - konfigurácia:', {\r\n      appKey: DROPBOX_APP_KEY,\r\n      redirectUri: DROPBOX_REDIRECT_URI,\r\n      state: state,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    const authUrl = `https://www.dropbox.com/oauth2/authorize?client_id=${DROPBOX_APP_KEY}&response_type=code&redirect_uri=${encodeURIComponent(DROPBOX_REDIRECT_URI)}&state=${state}&token_access_type=offline`;\r\n    \r\n    console.log('DropboxService.getAuthUrl - vygenerovaný URL:', authUrl);\r\n    \r\n    return authUrl;\r\n  }\r\n\r\n  // Spracovanie OAuth callback\r\n  async handleAuthCallback(code: string, state: string): Promise<DropboxAuthResult> {\r\n    console.log('dropboxService.handleAuthCallback - začiatok');\r\n    console.log('Parametre:', { code: code.substring(0, 10) + '...', state });\r\n    \r\n    const savedState = localStorage.getItem('dropbox_auth_state');\r\n    console.log('Uložený state:', savedState);\r\n    console.log('State porovnanie:', { received: state, saved: savedState, match: state === savedState });\r\n    \r\n    if (state !== savedState) {\r\n      console.error('State nezhoduje:', { received: state, saved: savedState });\r\n      console.error('Všetky localStorage položky:', {\r\n        dropbox_auth_state: localStorage.getItem('dropbox_auth_state'),\r\n        dropbox_access_token: localStorage.getItem('dropbox_access_token'),\r\n        dropbox_refresh_token: localStorage.getItem('dropbox_refresh_token')\r\n      });\r\n      throw new Error('Invalid state parameter');\r\n    }\r\n    \r\n    // State kontrola úspešná, pokračujem v spracovaní...\r\n    console.log('State kontrola úspešná, pokračujem v spracovaní...');\r\n\r\n    try {\r\n      console.log('Posielam požiadavku na Dropbox API...');\r\n      console.log('DropboxService.handleAuthCallback - parametre pre API:', {\r\n        code: code.substring(0, 10) + '...',\r\n        client_id: DROPBOX_APP_KEY,\r\n        client_secret: DROPBOX_APP_SECRET ? '***' : 'CHÝBA',\r\n        redirect_uri: DROPBOX_REDIRECT_URI\r\n      });\r\n      \r\n      const requestBody = new URLSearchParams({\r\n        code: code,\r\n        grant_type: 'authorization_code',\r\n        client_id: DROPBOX_APP_KEY,\r\n        client_secret: DROPBOX_APP_SECRET,\r\n        redirect_uri: DROPBOX_REDIRECT_URI,\r\n      });\r\n      \r\n      console.log('DropboxService.handleAuthCallback - request body:', requestBody.toString());\r\n      \r\n      const response = await window.fetch('https://api.dropboxapi.com/oauth2/token', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body: requestBody,\r\n      });\r\n\r\n      console.log('Dropbox API response status:', response.status);\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('Dropbox API error:', errorText);\r\n        console.error('Dropbox API response headers:', Object.fromEntries(response.headers.entries()));\r\n        throw new Error(`Failed to exchange code for token: ${errorText}`);\r\n      }\r\n\r\n      const authResult: DropboxAuthResult = await response.json();\r\n      console.log('Dropbox API úspešná odpoveď:', { \r\n        access_token: authResult.access_token.substring(0, 10) + '...',\r\n        token_type: authResult.token_type,\r\n        expires_in: authResult.expires_in\r\n      });\r\n      \r\n      // Uloženie tokenu\r\n      this.accessToken = authResult.access_token;\r\n      localStorage.setItem('dropbox_access_token', authResult.access_token);\r\n      if (authResult.refresh_token) {\r\n        localStorage.setItem('dropbox_refresh_token', authResult.refresh_token);\r\n      }\r\n      \r\n      // Vyčistíme state po úspešnom spracovaní\r\n      localStorage.removeItem('dropbox_auth_state');\r\n      console.log('State vyčistený po úspešnom spracovaní');\r\n\r\n      console.log('Tokeny uložené do localStorage');\r\n\r\n      // Inicializácia Dropbox klienta\r\n      this.initializeDropbox(authResult.access_token);\r\n      console.log('Dropbox klient inicializovaný');\r\n\r\n      return authResult;\r\n    } catch (error) {\r\n      console.error('Error during OAuth callback:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Kontrola, či je používateľ prihlásený\r\n  isAuthenticated(): boolean {\r\n    // Skontrolujeme token z localStorage\r\n    const tokenFromStorage = localStorage.getItem('dropbox_access_token');\r\n    \r\n    // Ak máme token v localStorage ale nie v pamäti, inicializujeme klienta\r\n    if (tokenFromStorage && !this.accessToken) {\r\n      this.accessToken = tokenFromStorage;\r\n      this.initializeDropbox(tokenFromStorage);\r\n      console.log('DropboxService.isAuthenticated: Reinicializoval klienta z localStorage');\r\n    }\r\n    \r\n    const authenticated = this.dbx !== null && this.accessToken !== null;\r\n    console.log('DropboxService.isAuthenticated:', { \r\n      dbx: this.dbx !== null, \r\n      accessToken: this.accessToken !== null,\r\n      tokenFromStorage: tokenFromStorage ? 'existuje' : 'neexistuje',\r\n      result: authenticated \r\n    });\r\n    return authenticated;\r\n  }\r\n\r\n  // Odhlásenie\r\n  logout(): void {\r\n    this.dbx = null;\r\n    this.accessToken = null;\r\n    localStorage.removeItem('dropbox_access_token');\r\n    localStorage.removeItem('dropbox_refresh_token');\r\n    localStorage.removeItem('dropbox_auth_state');\r\n  }\r\n\r\n  // Získanie informácií o účte\r\n  async getAccountInfo() {\r\n    if (!this.dbx) {\r\n      throw new Error('Dropbox not initialized');\r\n    }\r\n\r\n    try {\r\n      console.log('DropboxService.getAccountInfo - volám Dropbox API...');\r\n      // Pridáme kontrolu, či je dbx správne inicializovaný\r\n      if (!this.dbx.usersGetCurrentAccount) {\r\n        throw new Error('Dropbox client not properly initialized');\r\n      }\r\n      \r\n      // Pridáme kontrolu, či je fetch správne nastavený\r\n      if (!this.dbx.usersGetCurrentAccount) {\r\n        console.error('Dropbox client methods not available');\r\n        throw new Error('Dropbox client methods not available');\r\n      }\r\n      \r\n      const response = await this.dbx.usersGetCurrentAccount();\r\n      console.log('DropboxService.getAccountInfo - odpoveď:', response);\r\n      return response.result;\r\n    } catch (error) {\r\n      console.error('Error getting account info:', error);\r\n      // Ak je problém s fetch, skúsime reinicializovať klienta\r\n      if (error instanceof Error && (error.message.includes('fetch') || error.message.includes('Illegal invocation'))) {\r\n        console.log('DropboxService.getAccountInfo - problém s fetch, reinicializujem klienta...');\r\n        const token = localStorage.getItem('dropbox_access_token');\r\n        if (token) {\r\n          this.initializeDropbox(token);\r\n          const response = await this.dbx!.usersGetCurrentAccount();\r\n          console.log('DropboxService.getAccountInfo - reinicializácia úspešná:', response);\r\n          return response.result;\r\n        }\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Získanie zoznamu súborov z priečinka\r\n  async listFiles(path: string = '', ico?: string): Promise<DropboxFile[]> {\r\n    if (!this.dbx) {\r\n      throw new Error('Dropbox not initialized');\r\n    }\r\n\r\n    try {\r\n      console.log('=== DROPBOX SERVICE DEBUG ===');\r\n      console.log('DropboxService.listFiles - začiatok');\r\n      console.log('DropboxService.listFiles - path:', path);\r\n      console.log('DropboxService.listFiles - ico:', ico);\r\n      console.log('DropboxService.listFiles - this.dbx exists:', !!this.dbx);\r\n      \r\n      // Ak je zadaný ico, použijeme špecifickú cestu pre firmu\r\n      let targetPath = path;\r\n      if (ico && !path.startsWith('/Portal/Companies/')) {\r\n        // Vytvoríme cestu pre firmu na základe ico\r\n        const companyFolder = this.getCompanyFolderPath(ico);\r\n        targetPath = companyFolder + (path ? '/' + path : '');\r\n        console.log('DropboxService.listFiles - companyFolder:', companyFolder);\r\n      }\r\n      \r\n      console.log('DropboxService.listFiles - targetPath:', targetPath);\r\n      console.log('DropboxService.listFiles - volám this.dbx.filesListFolder...');\r\n\r\n      const response = await this.dbx.filesListFolder({\r\n        path: targetPath,\r\n        limit: 100\r\n      });\r\n\r\n      console.log('DropboxService.listFiles - response received');\r\n      const mappedFiles = response.result.entries.map(entry => ({\r\n        id: entry['.tag'] === 'deleted' ? '' : (entry as any).id || '',\r\n        name: entry.name,\r\n        path_lower: entry.path_lower || '',\r\n        size: entry['.tag'] === 'file' ? (entry as any).size || 0 : 0,\r\n        server_modified: entry['.tag'] === 'file' ? (entry as any).server_modified || '' : '',\r\n        content_hash: entry['.tag'] === 'file' ? (entry as any).content_hash || '' : '',\r\n        tag: entry['.tag']\r\n      }));\r\n      \r\n      return mappedFiles;\r\n    } catch (error) {\r\n      console.error('DropboxService.listFiles - ERROR:', error);\r\n      if (error instanceof Error) {\r\n        console.error('DropboxService.listFiles - error.message:', error.message);\r\n        console.error('DropboxService.listFiles - error.stack:', error.stack);\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generovanie cesty pre firmu na základe IČO\r\n  getCompanyFolderPath(ico: string): string {\r\n    const icoHash = this.hashICO(ico);\r\n    return `/Portal/Companies/${icoHash}`;\r\n  }\r\n\r\n  // Jednoduchý hash IČO pre vytvorenie unikátnej cesty\r\n  hashICO(ico: string): string {\r\n    // IČO je už unikátne, takže ho môžeme použiť priamo\r\n    // Len odstránime medzery a špeciálne znaky pre bezpečnosť\r\n    return ico.replace(/\\s/g, '').replace(/[^a-zA-Z0-9]/g, '');\r\n  }\r\n\r\n  // Vytvorenie zdieľateľnej zložky pre firmu\r\n  async createCompanyFolder(ico: string): Promise<string> {\r\n    if (!this.dbx) {\r\n      throw new Error('Dropbox not initialized');\r\n    }\r\n\r\n    try {\r\n      const companyPath = this.getCompanyFolderPath(ico);\r\n      \r\n      // Vytvorenie priečinka\r\n      const response = await this.dbx.filesCreateFolderV2({\r\n        path: companyPath,\r\n        autorename: false\r\n      });\r\n      \r\n      return companyPath;\r\n    } catch (error) {\r\n      console.error('Error creating company folder:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Získanie zdieľateľného linku pre firmu\r\n  async getCompanySharedLink(ico: string): Promise<string> {\r\n    if (!this.dbx) {\r\n      throw new Error('Dropbox not initialized');\r\n    }\r\n\r\n    try {\r\n      const companyPath = this.getCompanyFolderPath(ico);\r\n      return await this.getSharedLink(companyPath);\r\n    } catch (error) {\r\n      console.error('Error getting company shared link:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Nahrávanie súboru do Dropbox\r\n  async uploadFile(file: File, path: string, ico?: string, onProgress?: (progress: number) => void): Promise<DropboxUploadResult> {\r\n    if (!this.dbx) {\r\n      throw new Error('Dropbox not initialized');\r\n    }\r\n\r\n    try {\r\n      const fileBuffer = await file.arrayBuffer();\r\n      \r\n      // Ak je zadaný IČO, použijeme špecifickú cestu pre firmu\r\n      let fullPath = path + '/' + file.name;\r\n      if (ico && !path.startsWith('/Portal/Companies/')) {\r\n        const companyFolder = this.getCompanyFolderPath(ico);\r\n        fullPath = companyFolder + '/' + (path ? path + '/' : '') + file.name;\r\n        console.log('DropboxService.uploadFile - companyFolder:', companyFolder);\r\n      }\r\n      \r\n      console.log('DropboxService.uploadFile - fullPath:', fullPath);\r\n\r\n      const response = await this.dbx.filesUpload({\r\n        path: fullPath,\r\n        contents: fileBuffer,\r\n        mode: { '.tag': 'overwrite' },\r\n        autorename: true,\r\n        mute: false\r\n      });\r\n\r\n      console.log('DropboxService.uploadFile - upload response:', response);\r\n\r\n      return {\r\n        id: response.result.id,\r\n        name: response.result.name,\r\n        path_lower: response.result.path_lower || '',\r\n        size: response.result.size,\r\n        server_modified: response.result.server_modified\r\n      };\r\n    } catch (error) {\r\n      console.error('Error uploading file:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Stiahnutie súboru z Dropbox\r\n  async downloadFile(path: string): Promise<Blob> {\r\n    if (!this.dbx) {\r\n      throw new Error('Dropbox not initialized');\r\n    }\r\n\r\n    try {\r\n      const response = await this.dbx.filesDownload({\r\n        path: path\r\n      });\r\n\r\n      // Konverzia ArrayBuffer na Blob\r\n      const fileBlob = (response.result as any).fileBlob;\r\n      const blob = new Blob([fileBlob], {\r\n        type: fileBlob.type || 'application/octet-stream'\r\n      });\r\n\r\n      return blob;\r\n    } catch (error) {\r\n      console.error('Error downloading file:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Vymazanie súboru z Dropbox\r\n  async deleteFile(path: string): Promise<void> {\r\n    if (!this.dbx) {\r\n      throw new Error('Dropbox not initialized');\r\n    }\r\n\r\n    try {\r\n      await this.dbx.filesDeleteV2({\r\n        path: path\r\n      });\r\n    } catch (error) {\r\n      console.error('Error deleting file:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Vytvorenie priečinka\r\n  async createFolder(path: string): Promise<void> {\r\n    if (!this.dbx) {\r\n      throw new Error('Dropbox not initialized');\r\n    }\r\n\r\n    try {\r\n      await this.dbx.filesCreateFolderV2({\r\n        path: path,\r\n        autorename: true\r\n      });\r\n    } catch (error) {\r\n      console.error('Error creating folder:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Získanie zdieľateľného linku\r\n  async getSharedLink(path: string): Promise<string> {\r\n    if (!this.dbx) {\r\n      throw new Error('Dropbox not initialized');\r\n    }\r\n\r\n    try {\r\n      const response = await this.dbx.sharingCreateSharedLinkWithSettings({\r\n        path: path,\r\n        settings: {\r\n          requested_visibility: { '.tag': 'public' },\r\n          audience: { '.tag': 'public' },\r\n          access: { '.tag': 'viewer' }\r\n        }\r\n      });\r\n\r\n      return response.result.url;\r\n    } catch (error) {\r\n      console.error('Error creating shared link:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Obnovenie access tokenu\r\n  async refreshAccessToken(): Promise<string> {\r\n    const refreshToken = localStorage.getItem('dropbox_refresh_token');\r\n    if (!refreshToken) {\r\n      throw new Error('No refresh token available');\r\n    }\r\n\r\n    try {\r\n      const response = await window.fetch('https://api.dropboxapi.com/oauth2/token', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body: new URLSearchParams({\r\n          grant_type: 'refresh_token',\r\n          refresh_token: refreshToken,\r\n          client_id: DROPBOX_APP_KEY,\r\n          client_secret: DROPBOX_APP_SECRET,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to refresh token');\r\n      }\r\n\r\n      const result = await response.json();\r\n      this.accessToken = result.access_token;\r\n      localStorage.setItem('dropbox_access_token', result.access_token);\r\n\r\n      // Inicializácia Dropbox klienta s novým tokenom\r\n      this.initializeDropbox(result.access_token);\r\n\r\n      return result.access_token;\r\n    } catch (error) {\r\n      console.error('Error refreshing token:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // ===== ADMIN FUNKCIE =====\r\n\r\n  // Vytvorenie zdieľateľného linku s oprávneniami (pre admin)\r\n  async createSharedLink(folderPath: string, permissions: {\r\n    canView: boolean;\r\n    canEdit: boolean;\r\n    canUpload: boolean;\r\n    canDelete: boolean;\r\n  }): Promise<string> {\r\n    if (!this.dbx) {\r\n      throw new Error('Dropbox not initialized');\r\n    }\r\n\r\n    try {\r\n      console.log('DropboxService.createSharedLink - vytváram link pre:', folderPath);\r\n      console.log('DropboxService.createSharedLink - oprávnenia:', permissions);\r\n      \r\n      // Určenie prístupu na základe oprávnení\r\n      let access: { '.tag': 'viewer' } | { '.tag': 'editor' } = { '.tag': 'viewer' };\r\n      if (permissions.canEdit || permissions.canUpload || permissions.canDelete) {\r\n        access = { '.tag': 'editor' };\r\n      }\r\n      \r\n      console.log('DropboxService.createSharedLink - access level:', access);\r\n\r\n      const response = await this.dbx.sharingCreateSharedLinkWithSettings({\r\n        path: folderPath,\r\n        settings: {\r\n          requested_visibility: { '.tag': 'public' },\r\n          audience: { '.tag': 'public' },\r\n          access: access\r\n        }\r\n      });\r\n\r\n      console.log('DropboxService.createSharedLink - úspešne vytvorený link:', response.result.url);\r\n      return response.result.url;\r\n    } catch (error) {\r\n      console.error('Error creating shared link with permissions:', error);\r\n      \r\n             // Ak je chyba 409 (Conflict) alebo \"shared_link_already_exists\", skúsime získať existujúci link\r\n       if (error instanceof Error && (error.message.includes('shared_link_already_exists') || error.message.includes('409'))) {\r\n         console.log('Link už existuje (409), získavam existujúci link...');\r\n         try {\r\n           const existingLinks = await this.dbx.sharingListSharedLinks({\r\n             path: folderPath,\r\n             direct_only: false\r\n           });\r\n           \r\n           if (existingLinks.result.links.length > 0) {\r\n             console.log('Našiel som existujúci link:', existingLinks.result.links[0].url);\r\n             return existingLinks.result.links[0].url;\r\n           }\r\n         } catch (listError) {\r\n           console.error('Chyba pri získavaní existujúceho linku:', listError);\r\n         }\r\n       }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Odvolanie zdieľateľného linku\r\n  async revokeSharedLink(shareLink: string): Promise<void> {\r\n    if (!this.dbx) {\r\n      throw new Error('Dropbox not initialized');\r\n    }\r\n\r\n    try {\r\n      console.log('DropboxService.revokeSharedLink - odvolávam link:', shareLink);\r\n      \r\n      await this.dbx.sharingRevokeSharedLink({\r\n        url: shareLink\r\n      });\r\n      \r\n      console.log('DropboxService.revokeSharedLink - link úspešne odvolaný');\r\n    } catch (error) {\r\n      console.error('Error revoking shared link:', error);\r\n      \r\n      // Ak link už neexistuje, považujeme to za úspech\r\n      if (error instanceof Error && error.message.includes('not_found')) {\r\n        console.log('Link už neexistuje, považujem za úspešne odvolaný');\r\n        return;\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Získanie všetkých zdieľateľných linkov\r\n  async getAllSharedLinks(): Promise<any[]> {\r\n    if (!this.dbx) {\r\n      throw new Error('Dropbox not initialized');\r\n    }\r\n\r\n    try {\r\n      console.log('DropboxService.getAllSharedLinks - získavam všetky zdieľateľné linky...');\r\n      \r\n      const response = await this.dbx.sharingListSharedLinks({\r\n        path: '/Portal/Companies',\r\n        direct_only: false\r\n      });\r\n\r\n      console.log('DropboxService.getAllSharedLinks - načítané linky:', response.result.links);\r\n      return response.result.links;\r\n    } catch (error) {\r\n      console.error('Error getting shared links:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Kontrola, či zložka existuje\r\n  async checkFolderExists(folderPath: string): Promise<boolean> {\r\n    if (!this.dbx) {\r\n      throw new Error('Dropbox not initialized');\r\n    }\r\n\r\n    try {\r\n      console.log('DropboxService.checkFolderExists - kontrolujem zložku:', folderPath);\r\n      \r\n      const response = await this.dbx.filesGetMetadata({\r\n        path: folderPath\r\n      });\r\n      \r\n      console.log('DropboxService.checkFolderExists - zložka existuje:', response);\r\n      return response.result['.tag'] === 'folder';\r\n    } catch (error) {\r\n      console.log('DropboxService.checkFolderExists - zložka neexistuje:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const dropboxService = new DropboxService();\r\nexport default dropboxService;\r\n"],"names":["CheckCircleIcon","_ref","svgRef","title","titleId","props","_objectWithoutProperties","_excluded","React","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","CloudIcon","XCircleIcon","DropboxCallback","console","log","window","location","href","search","navigate","useNavigate","searchParams","useSearchParams","status","setStatus","useState","message","setMessage","isProcessing","useRef","useEffect","current","handleCallback","async","code","get","state","error","concat","dropboxService","handleAuthCallback","setTimeout","_jsx","className","children","_jsxs","_Fragment","onClick","DROPBOX_APP_KEY","process","DROPBOX_APP_SECRET","DROPBOX_REDIRECT_URI","constructor","dbx","accessToken","appKey","appSecret","appSecretLength","redirectUri","this","localStorage","getItem","initializeDropbox","Dropbox","fetch","bind","getAuthUrl","removeItem","Math","random","toString","substring","setItem","timestamp","Date","toISOString","authUrl","encodeURIComponent","savedState","received","saved","match","dropbox_auth_state","dropbox_access_token","dropbox_refresh_token","Error","client_id","client_secret","redirect_uri","requestBody","URLSearchParams","grant_type","response","method","headers","body","ok","errorText","text","fromEntries","entries","authResult","json","access_token","token_type","expires_in","refresh_token","isAuthenticated","tokenFromStorage","authenticated","result","logout","getAccountInfo","usersGetCurrentAccount","includes","token","listFiles","path","arguments","length","undefined","ico","targetPath","startsWith","companyFolder","getCompanyFolderPath","filesListFolder","limit","map","entry","name","path_lower","size","server_modified","content_hash","tag","stack","icoHash","hashICO","replace","createCompanyFolder","companyPath","filesCreateFolderV2","autorename","getCompanySharedLink","getSharedLink","uploadFile","file","onProgress","fileBuffer","arrayBuffer","fullPath","filesUpload","contents","mode","mute","downloadFile","fileBlob","filesDownload","Blob","type","deleteFile","filesDeleteV2","createFolder","sharingCreateSharedLinkWithSettings","settings","requested_visibility","audience","access","url","refreshAccessToken","refreshToken","createSharedLink","folderPath","permissions","canEdit","canUpload","canDelete","existingLinks","sharingListSharedLinks","direct_only","links","listError","revokeSharedLink","shareLink","sharingRevokeSharedLink","getAllSharedLinks","checkFolderExists","filesGetMetadata"],"sourceRoot":""}