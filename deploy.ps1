# üöÄ Deployment Script pre Client Portal (PowerShell)
# Pou≈æitie: .\deploy.ps1 [vercel|railway|docker]

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("docker", "vercel", "railway", "all")]
    [string]$DeploymentType
)

# Nastavenie error handling
$ErrorActionPreference = "Stop"

Write-Host "üöÄ Sp√∫≈°≈•am deployment script..." -ForegroundColor Green

# Funkcia pre logovanie
function Write-Log {
    param([string]$Message, [string]$Color = "Green")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] $Message" -ForegroundColor $Color
}

function Write-Warning {
    param([string]$Message)
    Write-Log "WARNING: $Message" "Yellow"
}

function Write-Error {
    param([string]$Message)
    Write-Log "ERROR: $Message" "Red"
    exit 1
}

# Kontrola pr√≠tomnosti s√∫borov
function Test-RequiredFiles {
    Write-Log "Kontrolujem potrebn√© s√∫bory..."
    
    $requiredFiles = @(
        "package.json",
        "backend/package.json",
        "vercel.json",
        "backend/railway.json",
        "Dockerfile",
        "backend/Dockerfile",
        "docker-compose.yml"
    )
    
    foreach ($file in $requiredFiles) {
        if (-not (Test-Path $file)) {
            Write-Error "Ch√Ωba s√∫bor: $file"
        }
    }
    
    Write-Log "‚úÖ V≈°etky potrebn√© s√∫bory s√∫ pr√≠tomn√©"
}

# Build aplik√°cie
function Build-App {
    Write-Log "Buildujem aplik√°ciu..."
    
    # Frontend build
    Write-Log "Buildujem frontend..."
    try {
        npm run build
        Write-Log "‚úÖ Frontend build √∫spe≈°n√Ω"
    }
    catch {
        Write-Error "‚ùå Frontend build zlyhal: $_"
    }
}

# Git commit a push
function Git-Deploy {
    Write-Log "Commit a push na GitHub..."
    
    try {
        git add .
        git commit -m "Deploy: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        git push origin main
        Write-Log "‚úÖ K√≥d pushnut√Ω na GitHub"
    }
    catch {
        Write-Error "‚ùå Git oper√°cia zlyhala: $_"
    }
}

# Docker deployment
function Docker-Deploy {
    Write-Log "Sp√∫≈°≈•am Docker deployment..."
    
    try {
        # Zastavenie existuj√∫cich kontajnerov
        docker-compose down
        
        # Build a spustenie
        docker-compose up --build -d
        
        Write-Log "‚úÖ Docker deployment √∫spe≈°n√Ω"
        Write-Log "üåê Frontend: http://localhost:3000"
        Write-Log "üîß Backend: http://localhost:5000"
    }
    catch {
        Write-Error "‚ùå Docker deployment zlyhal: $_"
    }
}

# Vercel deployment
function Vercel-Deploy {
    Write-Log "Sp√∫≈°≈•am Vercel deployment..."
    
    # Kontrola Vercel CLI
    try {
        $null = Get-Command vercel -ErrorAction Stop
    }
    catch {
        Write-Error "Vercel CLI nie je nain≈°talovan√©. Nain≈°talujte: npm i -g vercel"
    }
    
    try {
        # Deploy
        vercel --prod
        Write-Log "‚úÖ Vercel deployment √∫spe≈°n√Ω"
    }
    catch {
        Write-Error "‚ùå Vercel deployment zlyhal: $_"
    }
}

# Railway deployment
function Railway-Deploy {
    Write-Log "Sp√∫≈°≈•am Railway deployment..."
    
    # Kontrola Railway CLI
    try {
        $null = Get-Command railway -ErrorAction Stop
    }
    catch {
        Write-Error "Railway CLI nie je nain≈°talovan√©. Nain≈°talujte: npm i -g @railway/cli"
    }
    
    try {
        # Deploy backend
        Push-Location backend
        railway up
        Pop-Location
        Write-Log "‚úÖ Railway deployment √∫spe≈°n√Ω"
    }
    catch {
        Write-Error "‚ùå Railway deployment zlyhal: $_"
    }
}

# Hlavn√° funkcia
function Main {
    param([string]$DeploymentType)
    
    Write-Log "Zaƒç√≠nam deployment typu: $DeploymentType"
    
    # Kontrola s√∫borov
    Test-RequiredFiles
    
    switch ($DeploymentType) {
        "docker" {
            Build-App
            Docker-Deploy
        }
        "vercel" {
            Build-App
            Git-Deploy
            Vercel-Deploy
        }
        "railway" {
            Git-Deploy
            Railway-Deploy
        }
        "all" {
            Build-App
            Git-Deploy
            Vercel-Deploy
            Railway-Deploy
        }
    }
    
    Write-Log "üéâ Deployment dokonƒçen√Ω!"
}

# Spustenie skriptu
try {
    Main -DeploymentType $DeploymentType
}
catch {
    Write-Error "Deployment zlyhal: $_"
}
