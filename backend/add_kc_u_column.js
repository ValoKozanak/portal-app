const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// Pripojenie k SQLite datab√°ze
const dbPath = path.join(__dirname, 'portal.db');
const db = new sqlite3.Database(dbPath);

async function addKcUColumn() {
  try {
    console.log('üîß Prid√°vam stƒ∫pec kc_u do tabuƒæky issued_invoices...');
    
    // Pridanie stƒ∫pca kc_u
    db.run(`ALTER TABLE issued_invoices ADD COLUMN kc_u DECIMAL(10,2) DEFAULT 0`, (err) => {
      if (err) {
        if (err.message.includes('duplicate column name')) {
          console.log(`‚úÖ Stƒ∫pec kc_u u≈æ existuje`);
        } else {
          console.error(`‚ùå Chyba pri prid√°van√≠ stƒ∫pca kc_u:`, err.message);
        }
      } else {
        console.log(`‚úÖ Pridan√Ω stƒ∫pec kc_u`);
      }
    });
    
    // Kontrola fin√°lnej ≈°trukt√∫ry
    setTimeout(() => {
      db.all("PRAGMA table_info(issued_invoices)", (err, rows) => {
        if (err) {
          console.error('‚ùå Chyba pri ƒç√≠tan√≠ sch√©my:', err);
          db.close();
          return;
        }
        
        console.log('\nüìä Fin√°lna ≈°trukt√∫ra tabuƒæky issued_invoices:');
        console.log('=====================================');
        rows.forEach((row, index) => {
          console.log(`${index + 1}. ${row.name} (${row.type})`);
        });
        console.log(`\nüìä Celkov√Ω poƒçet stƒ∫pcov: ${rows.length}`);
        
        // Kontrola nov√©ho stƒ∫pca
        const kcUColumn = rows.find(row => row.name === 'kc_u');
        if (kcUColumn) {
          console.log('\n‚úÖ Stƒ∫pec kc_u bol √∫spe≈°ne pridan√Ω!');
        } else {
          console.log('\n‚ö†Ô∏è Stƒ∫pec kc_u ch√Ωba');
        }
        
        db.close();
      });
    }, 1000);
    
  } catch (error) {
    console.error('‚ùå Chyba pri prid√°van√≠ stƒ∫pca:', error);
    db.close();
  }
}

addKcUColumn();

