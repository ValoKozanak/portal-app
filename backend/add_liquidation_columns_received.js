const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// Pripojenie k SQLite datab√°ze
const dbPath = path.join(__dirname, 'portal.db');
const db = new sqlite3.Database(dbPath);

async function addLiquidationColumnsReceived() {
  try {
    console.log('üîß Prid√°vam stƒ∫pce pre likvid√°ciu do tabuƒæky received_invoices...');
    
    // Pridanie stƒ∫pcov pre likvid√°ciu
    const columns = [
      { name: 'kc_likv', type: 'DECIMAL(10,2) DEFAULT 0' },
      { name: 'kc_zuplat', type: 'DECIMAL(10,2) DEFAULT 0' },
      { name: 'dat_likv', type: 'DATE' }
    ];
    
    for (const column of columns) {
      db.run(`ALTER TABLE received_invoices ADD COLUMN ${column.name} ${column.type}`, (err) => {
        if (err) {
          if (err.message.includes('duplicate column name')) {
            console.log(`‚úÖ Stƒ∫pec ${column.name} u≈æ existuje`);
          } else {
            console.error(`‚ùå Chyba pri prid√°van√≠ stƒ∫pca ${column.name}:`, err.message);
          }
        } else {
          console.log(`‚úÖ Pridan√Ω stƒ∫pec ${column.name}`);
        }
      });
    }
    
    // Kontrola fin√°lnej ≈°trukt√∫ry
    setTimeout(() => {
      db.all("PRAGMA table_info(received_invoices)", (err, rows) => {
        if (err) {
          console.error('‚ùå Chyba pri ƒç√≠tan√≠ sch√©my:', err);
          db.close();
          return;
        }
        
        console.log('\nüìä Fin√°lna ≈°trukt√∫ra tabuƒæky received_invoices:');
        console.log('=====================================');
        rows.forEach((row, index) => {
          console.log(`${index + 1}. ${row.name} (${row.type})`);
        });
        console.log(`\nüìä Celkov√Ω poƒçet stƒ∫pcov: ${rows.length}`);
        
        // Kontrola nov√Ωch stƒ∫pcov
        const newColumns = rows.filter(row => 
          row.name === 'kc_likv' || 
          row.name === 'kc_zuplat' || 
          row.name === 'dat_likv'
        );
        
        if (newColumns.length === 3) {
          console.log('\n‚úÖ V≈°etky stƒ∫pce pre likvid√°ciu boli √∫spe≈°ne pridan√©!');
        } else {
          console.log('\n‚ö†Ô∏è Niektor√© stƒ∫pce pre likvid√°ciu ch√Ωbaj√∫');
        }
        
        db.close();
      });
    }, 1000);
    
  } catch (error) {
    console.error('‚ùå Chyba pri prid√°van√≠ stƒ∫pcov:', error);
    db.close();
  }
}

addLiquidationColumnsReceived();

