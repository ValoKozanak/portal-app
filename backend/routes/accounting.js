const express = require('express');
const { Router } = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const router = Router();
const { authenticateToken } = require('./auth');
const { db } = require('../database');

// ===== √öƒåTOVN√çCTVO API ROUTES =====

// 1. NASTAVENIA √öƒåTOVN√çCTVA

// Z√≠skanie nastaven√≠ √∫ƒçtovn√≠ctva pre firmu
router.get('/settings/:companyId', authenticateToken, (req, res) => {
  const { companyId } = req.params;
  
  db.get(`
    SELECT * FROM accounting_settings 
    WHERE company_id = ?
  `, [companyId], (err, settings) => {
    if (err) {
      console.error('Chyba pri naƒç√≠tan√≠ nastaven√≠ √∫ƒçtovn√≠ctva:', err);
      return res.status(500).json({ error: 'Chyba pri naƒç√≠tan√≠ nastaven√≠' });
    }
    
    res.json(settings || {
      company_id: parseInt(companyId),
      pohoda_enabled: false,
      auto_sync: false,
      sync_frequency: 'daily'
    });
  });
});

// Ulo≈æenie nastaven√≠ √∫ƒçtovn√≠ctva
router.post('/settings/:companyId', authenticateToken, (req, res) => {
  const { companyId } = req.params;
  
  // Kontrola, ƒçi je pou≈æ√≠vateƒæ admin, company alebo user
  if (req.user.role !== 'admin' && req.user.role !== 'company' && req.user.role !== 'user') {
    return res.status(403).json({ error: 'Pr√≠stup zamietnut√Ω. Len admin, firma alebo pou≈æ√≠vateƒæ m√¥≈æe upravova≈• nastavenia.' });
  }
  
  const {
    pohoda_enabled,
    pohoda_url,
    pohoda_username,
    pohoda_password,
    pohoda_ico,
    pohoda_year,
    auto_sync,
    sync_frequency
  } = req.body;
  
  db.run(`
    INSERT OR REPLACE INTO accounting_settings (
      company_id, pohoda_enabled, pohoda_url, pohoda_username, pohoda_password,
      pohoda_ico, pohoda_year, auto_sync, sync_frequency, updated_at
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
  `, [companyId, pohoda_enabled, pohoda_url, pohoda_username, pohoda_password,
      pohoda_ico, pohoda_year, auto_sync, sync_frequency], function(err) {
    if (err) {
      console.error('Chyba pri ukladan√≠ nastaven√≠ √∫ƒçtovn√≠ctva:', err);
      return res.status(500).json({ error: 'Chyba pri ukladan√≠ nastaven√≠' });
    }
    
    res.json({ success: true, id: this.lastID });
  });
});

// 2. HOSPOD√ÅRSKE V√ùSLEDKY (pUD)

// Z√≠skanie s√∫ƒçtu Kc z pUD
router.get('/pud-summary/:companyId', authenticateToken, async (req, res) => {
  const { companyId } = req.params;
  
  console.log('üìä Z√≠skavam s√∫hrn pUD pre company_id:', companyId);
  console.log('üîç Pou≈æ√≠vateƒæ:', req.user.email);
  
  try {
    // Z√≠skanie inform√°ci√≠ o firme
    const company = await new Promise((resolve, reject) => {
      db.get('SELECT * FROM companies WHERE id = ?', [companyId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
    
    if (!company) {
      return res.status(404).json({ error: 'Firma nebola n√°jden√°' });
    }
    
    const mdbPath = path.join(__dirname, '..', 'zalohy', '2025', `${company.ico}_2025`, `${company.ico}_2025.mdb`);
    
    console.log('üìÅ Naƒç√≠tavam d√°ta z:', mdbPath);
    
    if (!fs.existsSync(mdbPath)) {
      return res.status(404).json({ error: 'MDB s√∫bor nebol n√°jden√Ω' });
    }
    
    // Import z MDB
    const ADODB = require('node-adodb');
    const connection = ADODB.open(`Provider=Microsoft.Jet.OLEDB.4.0;Data Source=${mdbPath};`);
    
    // Z√≠skanie s√∫ƒçtu Kc
    const sumResult = await connection.query('SELECT SUM(Kc) as total_kc, COUNT(*) as total_count FROM pUD');
    
    const summary = {
      total_kc: sumResult[0].total_kc || 0,
      total_count: sumResult[0].total_count || 0
    };
    
    console.log('‚úÖ S√∫hrn pUD:', summary);
    res.json(summary);
    
  } catch (error) {
    console.error('Chyba pri z√≠skavan√≠ s√∫hrnu pUD:', error);
    res.status(500).json({ error: 'Chyba pri z√≠skavan√≠ s√∫hrnu pUD' });
  }
});

// Podrobn√° anal√Ωza n√°kladov a v√Ωnosov z pUD
router.get('/financial-analysis/:companyId', authenticateToken, async (req, res) => {
  const { companyId } = req.params;
  const { dateFrom, dateTo } = req.query;
  
  console.log('üìä Z√≠skavam podrobn√∫ anal√Ωzu n√°kladov a v√Ωnosov pre company_id:', companyId);
  console.log('üìÖ Filtre d√°tumov:', { dateFrom, dateTo });
  
  try {
    // Z√≠skanie inform√°ci√≠ o firme
    const company = await new Promise((resolve, reject) => {
      db.get('SELECT * FROM companies WHERE id = ?', [companyId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
    
    if (!company) {
      return res.status(404).json({ error: 'Firma nebola n√°jden√°' });
    }
    
    const mdbPath = path.join(__dirname, '..', 'zalohy', '2025', `${company.ico}_2025`, `${company.ico}_2025.mdb`);
    
    console.log('üìÅ Naƒç√≠tavam d√°ta z:', mdbPath);
    
    if (!fs.existsSync(mdbPath)) {
      return res.status(404).json({ error: 'MDB s√∫bor nebol n√°jden√Ω' });
    }
    
    // Import z MDB
    const ADODB = require('node-adodb');
    const connection = ADODB.open(`Provider=Microsoft.Jet.OLEDB.4.0;Data Source=${mdbPath};`);
    
    // Vytvorenie d√°tumov√Ωch filtrov
    let dateFilter = '';
    if (dateFrom && dateTo) {
      // Pou≈æijeme CDate() funkciu pre spr√°vne porovnanie d√°tumov
      dateFilter = ` AND CDate(Datum) BETWEEN CDate('${dateFrom}') AND CDate('${dateTo}')`;
      console.log('üìÖ D√°tumov√© filtre:', { dateFrom, dateTo });
    }
    
    // Anal√Ωza n√°kladov (√∫ƒçty zaƒç√≠naj√∫ce 5)
    const expensesQuery = `
      SELECT 
        pUD.UMD as account,
        pOS.Nazev as account_name,
        SUM(pUD.Kc) as total_amount,
        COUNT(*) as transaction_count
      FROM pUD 
      LEFT JOIN pOS ON pUD.UMD = pOS.Ucet
      WHERE pUD.UMD LIKE '5%'${dateFilter}
      GROUP BY pUD.UMD, pOS.Nazev
      ORDER BY pUD.UMD
    `;
    
    // Anal√Ωza v√Ωnosov (√∫ƒçty zaƒç√≠naj√∫ce 6)
    const revenueQuery = `
      SELECT 
        pUD.UD as account,
        pOS.Nazev as account_name,
        SUM(pUD.Kc) as total_amount,
        COUNT(*) as transaction_count
      FROM pUD 
      LEFT JOIN pOS ON pUD.UD = pOS.Ucet
      WHERE pUD.UD LIKE '6%'${dateFilter}
      GROUP BY pUD.UD, pOS.Nazev
      ORDER BY pUD.UD
    `;
    
    // Celkov√© s√∫ƒçty
    const totalExpensesQuery = `SELECT SUM(Kc) as total_expenses FROM pUD WHERE UMD LIKE '5%'${dateFilter}`;
    const totalRevenueQuery = `SELECT SUM(Kc) as total_revenue FROM pUD WHERE UD LIKE '6%'${dateFilter}`;
    
    // Vykonanie queries
    const expenses = await connection.query(expensesQuery);
    const revenue = await connection.query(revenueQuery);
    const totalExpenses = await connection.query(totalExpensesQuery);
    const totalRevenue = await connection.query(totalRevenueQuery);
    
    // V√Ωpoƒçet zisku/straty
    const totalExpensesAmount = totalExpenses[0]?.total_expenses || 0;
    const totalRevenueAmount = totalRevenue[0]?.total_revenue || 0;
    const profit = totalRevenueAmount - totalExpensesAmount;
    
    const analysis = {
      expenses: {
        total: totalExpensesAmount,
        count: expenses.length,
        details: expenses.map(item => ({
          account: item.account,
          account_name: item.account_name || `${item.account} (n√°zov nen√°jden√Ω)`,
          amount: item.total_amount || 0,
          count: item.transaction_count || 0
        }))
      },
      revenue: {
        total: totalRevenueAmount,
        count: revenue.length,
        details: revenue.map(item => ({
          account: item.account,
          account_name: item.account_name || `${item.account} (n√°zov nen√°jden√Ω)`,
          amount: item.total_amount || 0,
          count: item.transaction_count || 0
        }))
      },
      profit: profit,
      isProfit: profit >= 0,
      filters: {
        dateFrom: dateFrom || null,
        dateTo: dateTo || null
      }
    };
    
    console.log('‚úÖ Anal√Ωza n√°kladov a v√Ωnosov:', analysis);
    res.json(analysis);
    
  } catch (error) {
    console.error('Chyba pri z√≠skavan√≠ anal√Ωzy n√°kladov a v√Ωnosov:', error);
    res.status(500).json({ error: 'Chyba pri z√≠skavan√≠ anal√Ωzy n√°kladov a v√Ωnosov' });
  }
});

// Podrobn√° anal√Ωza n√°kladov a v√Ωnosov z pUD (bez autentifik√°cie pre testovanie)
router.get('/financial-analysis-test/:companyId', async (req, res) => {
  const { companyId } = req.params;
  const { dateFrom, dateTo } = req.query;
  
  console.log('üìä Z√≠skavam podrobn√∫ anal√Ωzu n√°kladov a v√Ωnosov pre company_id:', companyId);
  console.log('üìÖ Filtre d√°tumov:', { dateFrom, dateTo });
  
  try {
    // Z√≠skanie inform√°ci√≠ o firme
    const company = await new Promise((resolve, reject) => {
      db.get('SELECT * FROM companies WHERE id = ?', [companyId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
    
    if (!company) {
      return res.status(404).json({ error: 'Firma nebola n√°jden√°' });
    }
    
    const mdbPath = path.join(__dirname, '..', 'zalohy', '2025', `${company.ico}_2025`, `${company.ico}_2025.mdb`);
    
    console.log('üìÅ Naƒç√≠tavam d√°ta z:', mdbPath);
    
    if (!fs.existsSync(mdbPath)) {
      return res.status(404).json({ error: 'MDB s√∫bor nebol n√°jden√Ω' });
    }
    
    // Import z MDB
    const ADODB = require('node-adodb');
    const connection = ADODB.open(`Provider=Microsoft.Jet.OLEDB.4.0;Data Source=${mdbPath};`);
    
    // Vytvorenie d√°tumov√Ωch filtrov
    let dateFilter = '';
    if (dateFrom && dateTo) {
      // Pou≈æijeme CDate() funkciu pre spr√°vne porovnanie d√°tumov
      dateFilter = ` AND CDate(Datum) BETWEEN CDate('${dateFrom}') AND CDate('${dateTo}')`;
      console.log('üìÖ D√°tumov√© filtre:', { dateFrom, dateTo });
    }
    
    // Anal√Ωza n√°kladov (√∫ƒçty zaƒç√≠naj√∫ce 5)
    const expensesQuery = `
      SELECT 
        pUD.UMD as account,
        pOS.Nazev as account_name,
        SUM(pUD.Kc) as total_amount,
        COUNT(*) as transaction_count
      FROM pUD 
      LEFT JOIN pOS ON pUD.UMD = pOS.Ucet
      WHERE pUD.UMD LIKE '5%'${dateFilter}
      GROUP BY pUD.UMD, pOS.Nazev
      ORDER BY pUD.UMD
    `;
    
    // Anal√Ωza v√Ωnosov (√∫ƒçty zaƒç√≠naj√∫ce 6)
    const revenueQuery = `
      SELECT 
        pUD.UD as account,
        pOS.Nazev as account_name,
        SUM(pUD.Kc) as total_amount,
        COUNT(*) as transaction_count
      FROM pUD 
      LEFT JOIN pOS ON pUD.UD = pOS.Ucet
      WHERE pUD.UD LIKE '6%'${dateFilter}
      GROUP BY pUD.UD, pOS.Nazev
      ORDER BY pUD.UD
    `;
    
    // Celkov√© s√∫ƒçty
    const totalExpensesQuery = `SELECT SUM(Kc) as total_expenses FROM pUD WHERE UMD LIKE '5%'${dateFilter}`;
    const totalRevenueQuery = `SELECT SUM(Kc) as total_revenue FROM pUD WHERE UD LIKE '6%'${dateFilter}`;
    
    // Vykonanie queries
    const expenses = await connection.query(expensesQuery);
    const revenue = await connection.query(revenueQuery);
    const totalExpenses = await connection.query(totalExpensesQuery);
    const totalRevenue = await connection.query(totalRevenueQuery);
    
    // V√Ωpoƒçet zisku/straty
    const totalExpensesAmount = totalExpenses[0]?.total_expenses || 0;
    const totalRevenueAmount = totalRevenue[0]?.total_revenue || 0;
    const profit = totalRevenueAmount - totalExpensesAmount;
    
    const analysis = {
      expenses: {
        total: totalExpensesAmount,
        count: expenses.length,
        details: expenses.map(item => ({
          account: item.account,
          account_name: item.account_name || `${item.account} (n√°zov nen√°jden√Ω)`,
          amount: item.total_amount || 0,
          count: item.transaction_count || 0
        }))
      },
      revenue: {
        total: totalRevenueAmount,
        count: revenue.length,
        details: revenue.map(item => ({
          account: item.account,
          account_name: item.account_name || `${item.account} (n√°zov nen√°jden√Ω)`,
          amount: item.total_amount || 0,
          count: item.transaction_count || 0
        }))
      },
      profit: profit,
      isProfit: profit >= 0,
      filters: {
        dateFrom: dateFrom || null,
        dateTo: dateTo || null
      }
    };
    
    console.log('‚úÖ Anal√Ωza n√°kladov a v√Ωnosov:', analysis);
    res.json(analysis);
    
  } catch (error) {
    console.error('Chyba pri z√≠skavan√≠ anal√Ωzy n√°kladov a v√Ωnosov:', error);
    res.status(500).json({ error: 'Chyba pri z√≠skavan√≠ anal√Ωzy n√°kladov a v√Ωnosov' });
  }
});

// 3. ≈†TATISTIKY

// Z√≠skanie ≈°tatist√≠k √∫ƒçtovn√≠ctva
router.get('/stats/:companyId', authenticateToken, (req, res) => {
  const { companyId } = req.params;
  const { date_from, date_to } = req.query;
  
  console.log('üîç Naƒç√≠tavam ≈°tatistiky pre company_id:', companyId);
  console.log('üîç Pou≈æ√≠vateƒæ:', req.user.email);
  
  let dateFilter = '';
  let params = [companyId];
  
  if (date_from && date_to) {
    dateFilter = ' AND issue_date BETWEEN ? AND ?';
    params.push(date_from, date_to);
  }
  
  // ≈†tatistiky vydan√Ωch fakt√∫r
  db.get(`
    SELECT 
      COUNT(*) as total_issued,
      SUM(total_amount) as total_issued_amount,
      SUM(vat_amount) as total_issued_vat,
      COUNT(CASE WHEN status = 'paid' THEN 1 END) as paid_issued,
      SUM(CASE WHEN status = 'paid' THEN total_amount ELSE 0 END) as paid_issued_amount,
      SUM(CASE WHEN kc_likv > 0 THEN kc_likv ELSE 0 END) as unpaid_amount
    FROM issued_invoices 
    WHERE company_id = ?${dateFilter}
  `, params, (err, issuedStats) => {
    if (err) {
      console.error('Chyba pri naƒç√≠tan√≠ ≈°tatist√≠k vydan√Ωch fakt√∫r:', err);
      return res.status(500).json({ error: 'Chyba pri naƒç√≠tan√≠ ≈°tatist√≠k' });
    }
    
    // ≈†tatistiky prijat√Ωch fakt√∫r
    db.get(`
      SELECT 
        COUNT(*) as total_received,
        SUM(total_amount) as total_received_amount,
        SUM(vat_amount) as total_received_vat,
        COUNT(CASE WHEN status = 'paid' THEN 1 END) as paid_received,
        SUM(CASE WHEN status = 'paid' THEN total_amount ELSE 0 END) as paid_received_amount,
        SUM(CASE WHEN kc_likv > 0 THEN kc_likv ELSE 0 END) as unpaid_amount
      FROM received_invoices 
      WHERE company_id = ?${dateFilter}
    `, params, (err, receivedStats) => {
      if (err) {
        console.error('Chyba pri naƒç√≠tan√≠ ≈°tatist√≠k prijat√Ωch fakt√∫r:', err);
        return res.status(500).json({ error: 'Chyba pri naƒç√≠tan√≠ ≈°tatist√≠k' });
      }
      
      const stats = {
        issued_invoices: {
          total_count: issuedStats.total_issued || 0,
          total_amount: issuedStats.total_issued_amount || 0,
          paid_amount: issuedStats.paid_issued_amount || 0,
          overdue_amount: issuedStats.unpaid_amount || 0
        },
        received_invoices: {
          total_count: receivedStats.total_received || 0,
          total_amount: receivedStats.total_received_amount || 0,
          paid_amount: receivedStats.paid_received_amount || 0,
          overdue_amount: receivedStats.unpaid_amount || 0
        }
      };
      
      res.json(stats);
    });
  });
});





// 4. VYDAN√â FAKT√öRY

// Z√≠skanie vydan√Ωch fakt√∫r
router.get('/issued-invoices/:companyId', authenticateToken, (req, res) => {
  const { companyId } = req.params;
  const { status, date_from, date_to, limit = 50, offset = 0 } = req.query;
  
  console.log('üîç Naƒç√≠tavam vydan√© fakt√∫ry pre company_id:', companyId);
  console.log('üîç Pou≈æ√≠vateƒæ:', req.user.email);
  
  let query = `
    SELECT * FROM issued_invoices 
    WHERE company_id = ?
  `;
  let params = [companyId];
  
  if (status) {
    query += ' AND status = ?';
    params.push(status);
  }
  
  if (date_from) {
    query += ' AND issue_date >= ?';
    params.push(date_from);
  }
  
  if (date_to) {
    query += ' AND issue_date <= ?';
    params.push(date_to);
  }
  
  query += ' ORDER BY issue_date DESC LIMIT ? OFFSET ?';
  params.push(parseInt(limit), parseInt(offset));
  
  console.log('üîç Query:', query);
  console.log('üîç Params:', params);
  
  db.all(query, params, (err, invoices) => {
    if (err) {
      console.error('Chyba pri naƒç√≠tan√≠ vydan√Ωch fakt√∫r:', err);
      return res.status(500).json({ error: 'Chyba pri naƒç√≠tan√≠ fakt√∫r' });
    }
    
    console.log('üîç Na≈°iel som fakt√∫r:', invoices.length);
    
    res.json(invoices);
  });
});

// Vytvorenie novej vydanej fakt√∫ry
router.post('/issued-invoices/:companyId', authenticateToken, (req, res) => {
  const { companyId } = req.params;
  
  // Kontrola, ƒçi je pou≈æ√≠vateƒæ admin, company alebo user
  if (req.user.role !== 'admin' && req.user.role !== 'company' && req.user.role !== 'user') {
    return res.status(403).json({ error: 'Pr√≠stup zamietnut√Ω. Len admin, firma alebo pou≈æ√≠vateƒæ m√¥≈æe vytv√°ra≈• fakt√∫ry.' });
  }
  
  const {
    invoice_number,
    customer_name,
    customer_ico,
    customer_dic,
    customer_address,
    issue_date,
    due_date,
    total_amount,
    vat_amount,
    currency,
    notes,
    items
  } = req.body;
  
  const created_by = req.user.email;
  
  db.run(`
    INSERT INTO issued_invoices (
      company_id, invoice_number, customer_name, customer_ico, customer_dic,
      customer_address, issue_date, due_date, total_amount, vat_amount,
      currency, notes, created_by
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
  `, [companyId, invoice_number, customer_name, customer_ico, customer_dic,
      customer_address, issue_date, due_date, total_amount, vat_amount,
      currency, notes, created_by], function(err) {
    if (err) {
      console.error('Chyba pri vytv√°ran√≠ fakt√∫ry:', err);
      return res.status(500).json({ error: 'Chyba pri vytv√°ran√≠ fakt√∫ry' });
    }
    
    const invoiceId = this.lastID;
    
    // Pridanie polo≈æiek fakt√∫ry
    if (items && items.length > 0) {
      const itemValues = items.map(item => [
        invoiceId,
        item.description,
        item.quantity,
        item.unit_price,
        item.vat_rate,
        item.total_price,
        item.vat_amount,
        item.unit || 'ks'
      ]);
      
      const placeholders = items.map(() => '(?, ?, ?, ?, ?, ?, ?, ?)').join(',');
      
      db.run(`
        INSERT INTO issued_invoice_items (
          invoice_id, description, quantity, unit_price, vat_rate,
          total_price, vat_amount, unit
        ) VALUES ${placeholders}
      `, itemValues.flat(), (err) => {
        if (err) {
          console.error('Chyba pri prid√°van√≠ polo≈æiek fakt√∫ry:', err);
        }
      });
    }
    
    res.json({ success: true, id: invoiceId });
  });
});

// 4. PRIJAT√â FAKT√öRY

// Z√≠skanie prijat√Ωch fakt√∫r
router.get('/received-invoices/:companyId', authenticateToken, (req, res) => {
  const { companyId } = req.params;
  const { status, date_from, date_to, limit = 50, offset = 0 } = req.query;
  
  let query = `
    SELECT * FROM received_invoices 
    WHERE company_id = ?
  `;
  let params = [companyId];
  
  if (status) {
    query += ' AND status = ?';
    params.push(status);
  }
  
  if (date_from) {
    query += ' AND issue_date >= ?';
    params.push(date_from);
  }
  
  if (date_to) {
    query += ' AND issue_date <= ?';
    params.push(date_to);
  }
  
  query += ' ORDER BY issue_date DESC LIMIT ? OFFSET ?';
  params.push(parseInt(limit), parseInt(offset));
  
  db.all(query, params, (err, invoices) => {
    if (err) {
      console.error('Chyba pri naƒç√≠tan√≠ prijat√Ωch fakt√∫r:', err);
      return res.status(500).json({ error: 'Chyba pri naƒç√≠tan√≠ fakt√∫r' });
    }
    
    res.json(invoices);
  });
});

// 5. OBNOVENIE FAKT√öR Z MDB

// Obnovenie vydan√Ωch fakt√∫r z MDB
router.post('/refresh-invoices/:companyId', authenticateToken, async (req, res) => {
  const { companyId } = req.params;
  
  try {
    console.log('üîç Params:', [companyId, 100, 0]);
    
    // Najprv n√°jdeme firmu a jej IƒåO
    db.get("SELECT ico, name FROM companies WHERE id = ?", [companyId], async (err, company) => {
      if (err) {
        console.error('Chyba pri hƒæadan√≠ firmy:', err);
        return res.status(500).json({ error: 'Chyba pri naƒç√≠tan√≠ firmy' });
      }
      
      if (!company) {
        return res.status(404).json({ error: 'Firma nen√°jden√°' });
      }
      
      console.log('üîç Firma:', company.name, 'ICO:', company.ico);
      
      // Vymazanie existuj√∫cich fakt√∫r
      db.run("DELETE FROM issued_invoices WHERE company_id = ?", [companyId], function(err) {
    if (err) {
          console.error('Chyba pri mazan√≠ fakt√∫r:', err);
          return res.status(500).json({ error: 'Chyba pri mazan√≠ fakt√∫r' });
        }
        
        console.log('üóëÔ∏è Vymazan√Ωch', this.changes, 'fakt√∫r');
        
        // Pripojenie k MDB
        const ADODB = require('node-adodb');
        const currentYear = new Date().getFullYear();
        const mdbPath = path.join(__dirname, '..', 'zalohy', currentYear.toString(), `${company.ico}_${currentYear}`, `${company.ico}_${currentYear}.mdb`);
        
        console.log('üìÅ Obnovujem fakt√∫ry z:', mdbPath);
        
        const connection = ADODB.open(`Provider=Microsoft.Jet.OLEDB.4.0;Data Source=${mdbPath};`);
        
        try {
                     const query = `
             SELECT 
               ID,
               Cislo,
               Firma,
               ICO,
               DIC,
               Ulice,
               PSC,
               Obec,
               Datum,
               DatSplat,
               Kc0,
               Kc1,
               Kc2,
               Kc3,
               KcDPH1, 
               KcDPH2,
               KcDPH3,
               KcCelkem,
               VarSym,
               SText,
               RelTpFak,
               KcLikv,
               KcZUplat,
               DatLikv
             FROM [FA] 
             WHERE RelTpFak = 1
             ORDER BY Datum DESC
           `;
          
          connection.query(query)
            .then(data => {
              console.log(`‚úÖ Naƒç√≠tan√© ${data.length} fakt√∫r z MDB`);
              
              // Import fakt√∫r do datab√°zy
              let importedCount = 0;
              
              data.forEach((row, index) => {
                // V√Ωpoƒçet z√°kladu bez DPH (Kc0 + Kc1 + Kc2 + Kc3)
                const base_amount = (parseFloat(row.Kc0) || 0) + (parseFloat(row.Kc1) || 0) + (parseFloat(row.Kc2) || 0) + (parseFloat(row.Kc3) || 0);
                
                // V√Ωpoƒçet celkovej DPH
                const vat_total = (parseFloat(row.KcDPH1) || 0) + (parseFloat(row.KcDPH2) || 0) + (parseFloat(row.KcDPH3) || 0);
                
                                 // Vlo≈æenie novej fakt√∫ry - OPRAVEN√ù INSERT s likvid√°ciou
                 db.run(`
                   INSERT INTO issued_invoices (
                     company_id, invoice_number, customer_name, customer_ico, customer_dic, 
                     customer_address, issue_date, due_date, total_amount, vat_amount, 
                     currency, status, pohoda_id, notes, created_by, created_at, updated_at,
                     kc_dph1, kc_dph2, kc_dph3, var_sym, s_text, kc_celkem, kc0, dat_splat, 
                     firma, ico, dic, ulice, psc, obec, mdb_cislo, mdb_id, rel_tp_fak, datum,
                     kc1, kc2, kc3, kc_likv, kc_u, dat_likv
                   ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                     ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                 `, [
                   companyId,
                   row.Cislo || '',
                   row.Firma || '',
                   row.ICO || '',
                   row.DIC || '',
                   `${row.Ulice || ''}, ${row.PSC || ''} ${row.Obec || ''}`.trim().replace(/^,\s*/, ''),
                   row.Datum ? new Date(row.Datum).toISOString().split('T')[0] : '',
                   row.DatSplat ? new Date(row.DatSplat).toISOString().split('T')[0] : '',
                   base_amount,
                   vat_total,
                   'EUR',
                   'sent',
                   null, // pohoda_id
                   row.SText || '',
                   req.user.email,
                   new Date().toISOString(),
                   new Date().toISOString(),
                   parseFloat(row.KcDPH1) || 0,
                   parseFloat(row.KcDPH2) || 0,
                   parseFloat(row.KcDPH3) || 0,
                   row.VarSym || '',
                   row.SText || '',
                   parseFloat(row.KcCelkem) || 0,
                   parseFloat(row.Kc0) || 0,
                   row.DatSplat || null,
                   row.Firma || '',
                   row.ICO || '',
                   row.DIC || '',
                   row.Ulice || '',
                   row.PSC || '',
                   row.Obec || '',
                   row.Cislo || '',
                   row.ID || null,
                   row.RelTpFak || null,
                   row.Datum || null,
                   parseFloat(row.Kc1) || 0,
                   parseFloat(row.Kc2) || 0,
                   parseFloat(row.Kc3) || 0,
                   parseFloat(row.KcLikv) || 0,
                   parseFloat(row.KcU) || 0,
                   row.DatLikv ? new Date(row.DatLikv).toISOString().split('T')[0] : null
                 ], function(err) {
    if (err) {
                    console.error('Chyba pri vkladan√≠ fakt√∫ry:', err);
                  } else {
                    importedCount++;
                    console.log(`‚úÖ Importovan√° fakt√∫ra ${row.Cislo}`);
                  }
                  
                  // Ak sme spracovali v≈°etky fakt√∫ry, po≈°leme odpoveƒè
                  if (index === data.length - 1) {
                    res.json({
                      success: true,
                      message: `Obnovenie dokonƒçen√©. Importovan√Ωch ${importedCount} fakt√∫r.`,
                      importedCount: importedCount,
                      totalCount: data.length
                    });
                  }
          });
        });
            })
            .catch(error => {
              console.error('Chyba pri ƒç√≠tan√≠ MDB:', error);
              res.status(500).json({ error: 'Chyba pri ƒç√≠tan√≠ MDB datab√°zy' });
            });
            
        } catch (error) {
          console.error('Chyba pri vytv√°ran√≠ pripojenia k MDB:', error);
          res.status(500).json({ error: 'Chyba pri pripojen√≠ k MDB datab√°ze' });
        }
  });
});

  } catch (error) {
    console.error('Chyba pri obnoven√≠ fakt√∫r:', error);
    res.status(500).json({ error: 'Chyba pri obnoven√≠ fakt√∫r' });
  }
});

// Obnovenie prijat√Ωch fakt√∫r z MDB
router.post('/refresh-received-invoices/:companyId', authenticateToken, async (req, res) => {
  const { companyId } = req.params;
  
  try {
    console.log('üîç Obnovujem prijat√© fakt√∫ry pre company_id:', companyId);
    
    // Najprv n√°jdeme firmu a jej IƒåO
    db.get("SELECT ico, name FROM companies WHERE id = ?", [companyId], async (err, company) => {
      if (err) {
        console.error('Chyba pri hƒæadan√≠ firmy:', err);
        return res.status(500).json({ error: 'Chyba pri naƒç√≠tan√≠ firmy' });
      }
      
      if (!company) {
        return res.status(404).json({ error: 'Firma nen√°jden√°' });
      }
      
      console.log('üîç Firma:', company.name, 'ICO:', company.ico);
      
      // Vymazanie existuj√∫cich prijat√Ωch fakt√∫r
      db.run("DELETE FROM received_invoices WHERE company_id = ?", [companyId], function(err) {
        if (err) {
          console.error('Chyba pri mazan√≠ prijat√Ωch fakt√∫r:', err);
          return res.status(500).json({ error: 'Chyba pri mazan√≠ prijat√Ωch fakt√∫r' });
        }
        
        console.log('üóëÔ∏è Vymazan√Ωch', this.changes, 'prijat√Ωch fakt√∫r');
        
        // Pripojenie k MDB
        const ADODB = require('node-adodb');
        const currentYear = new Date().getFullYear();
        const mdbPath = path.join(__dirname, '..', 'zalohy', currentYear.toString(), `${company.ico}_${currentYear}`, `${company.ico}_${currentYear}.mdb`);
        
        console.log('üìÅ Obnovujem prijat√© fakt√∫ry z:', mdbPath);
        
        const connection = ADODB.open(`Provider=Microsoft.Jet.OLEDB.4.0;Data Source=${mdbPath};`);
        
        try {
                     const query = `
             SELECT 
               ID,
               Cislo,
               Firma,
               ICO,
               DIC,
               Ulice,
               PSC,
               Obec,
               Datum,
               DatSplat,
               Kc0,
               Kc1,
               Kc2,
               Kc3,
               KcDPH1, 
               KcDPH2,
               KcDPH3,
               KcCelkem,
               VarSym,
               SText,
               RelTpFak,
               KcLikv,
               KcU,
               DatLikv
             FROM [FA] 
             WHERE RelTpFak = 11
             ORDER BY Datum DESC
           `;
          
          connection.query(query)
            .then(data => {
              console.log(`‚úÖ Naƒç√≠tan√© ${data.length} prijat√Ωch fakt√∫r z MDB`);
              
              // Import prijat√Ωch fakt√∫r do datab√°zy
    let importedCount = 0;
              
              data.forEach((row, index) => {
                // V√Ωpoƒçet z√°kladu bez DPH (Kc0 + Kc1 + Kc2 + Kc3)
                const base_amount = (parseFloat(row.Kc0) || 0) + (parseFloat(row.Kc1) || 0) + (parseFloat(row.Kc2) || 0) + (parseFloat(row.Kc3) || 0);
                
                // V√Ωpoƒçet celkovej DPH
                const vat_total = (parseFloat(row.KcDPH1) || 0) + (parseFloat(row.KcDPH2) || 0) + (parseFloat(row.KcDPH3) || 0);
                
                                 // Vlo≈æenie novej prijatej fakt√∫ry s likvid√°ciou
              db.run(`
                   INSERT INTO received_invoices (
                     company_id, invoice_number, supplier_name, supplier_ico, supplier_dic,
                     supplier_address, issue_date, due_date, total_amount, vat_amount,
                     kc0, kc1, kc2, kc3, kc_dph1, kc_dph2, kc_dph3, kc_celkem, var_sym, s_text,
                     mdb_id, rel_tp_fak, datum, dat_splat, firma, ico, dic, ulice, psc, obec,
                     mdb_cislo, base_0, base_1, base_2, base_3, vat_0, vat_1, vat_2, vat_3,
                     varsym, currency, status, pohoda_id, notes, created_by, created_at, updated_at,
                     kc_likv, kc_u, dat_likv
                   ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                     ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
              `, [
                companyId,
                   row.Cislo || '',
                   row.Firma || '',
                   row.ICO || '',
                   row.DIC || '',
                   `${row.Ulice || ''}, ${row.PSC || ''} ${row.Obec || ''}`.trim().replace(/^,\s*/, ''),
                   row.Datum ? new Date(row.Datum).toISOString().split('T')[0] : '',
                   row.DatSplat ? new Date(row.DatSplat).toISOString().split('T')[0] : '',
                   base_amount,
                   vat_total,
                   parseFloat(row.Kc0) || 0,
                   parseFloat(row.Kc1) || 0,
                   parseFloat(row.Kc2) || 0,
                   parseFloat(row.Kc3) || 0,
                   parseFloat(row.KcDPH1) || 0,
                   parseFloat(row.KcDPH2) || 0,
                   parseFloat(row.KcDPH3) || 0,
                   parseFloat(row.KcCelkem) || 0,
                   row.VarSym || '',
                   row.SText || '',
                   row.ID || null,
                   row.RelTpFak || null,
                   row.Datum || null,
                   row.DatSplat || null,
                   row.Firma || '',
                   row.ICO || '',
                   row.DIC || '',
                   row.Ulice || '',
                   row.PSC || '',
                   row.Obec || '',
                   row.Cislo || '',
                   parseFloat(row.Kc0) || 0,
                   parseFloat(row.Kc1) || 0,
                   parseFloat(row.Kc2) || 0,
                   parseFloat(row.Kc3) || 0,
                   parseFloat(row.KcDPH1) || 0,
                   parseFloat(row.KcDPH2) || 0,
                   parseFloat(row.KcDPH3) || 0,
                   parseFloat(row.KcDPH3) || 0,
                   row.VarSym || '',
                   'EUR',
                   'received',
                   null, // pohoda_id
                   row.SText || '',
                   req.user.email,
                   new Date().toISOString(),
                   new Date().toISOString(),
                   parseFloat(row.KcLikv) || 0,
                   parseFloat(row.KcU) || 0,
                   row.DatLikv ? new Date(row.DatLikv).toISOString().split('T')[0] : null
              ], function(err) {
                  if (err) {
                    console.error('Chyba pri vkladan√≠ prijatej fakt√∫ry:', err);
                  } else {
          importedCount++;
                    console.log(`‚úÖ Importovan√° prijat√° fakt√∫ra ${row.Cislo}`);
                  }
                  
                  // Ak sme spracovali v≈°etky fakt√∫ry, po≈°leme odpoveƒè
                  if (index === data.length - 1) {
    res.json({ 
      success: true, 
                      message: `Obnovenie prijat√Ωch fakt√∫r dokonƒçen√©. Importovan√Ωch ${importedCount} fakt√∫r.`,
                      importedCount: importedCount,
                      totalCount: data.length
                    });
                  }
                });
              });
            })
            .catch(error => {
              console.error('Chyba pri ƒç√≠tan√≠ MDB:', error);
              res.status(500).json({ error: 'Chyba pri ƒç√≠tan√≠ MDB datab√°zy' });
            });
            
        } catch (error) {
          console.error('Chyba pri vytv√°ran√≠ pripojenia k MDB:', error);
          res.status(500).json({ error: 'Chyba pri pripojen√≠ k MDB datab√°ze' });
        }
      });
    });
    
  } catch (error) {
    console.error('Chyba pri obnoven√≠ prijat√Ωch fakt√∫r:', error);
    res.status(500).json({ error: 'Chyba pri obnoven√≠ prijat√Ωch fakt√∫r' });
  }
});

// 6. DPH PODANIA

// Z√≠skanie DPH podan√≠ z MDB
router.get('/vat-returns/:companyId', authenticateToken, async (req, res) => {
  const { companyId } = req.params;
  const { year } = req.query;
  
  console.log('üìä Z√≠skavam DPH podania pre company_id:', companyId, 'rok:', year);
  console.log('üîç Pou≈æ√≠vateƒæ:', req.user.email);
  
  try {
    // Z√≠skanie inform√°ci√≠ o firme
    const company = await new Promise((resolve, reject) => {
      db.get('SELECT * FROM companies WHERE id = ?', [companyId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
    
    if (!company) {
      return res.status(404).json({ error: 'Firma nebola n√°jden√°' });
    }
    
    const mdbPath = path.join(__dirname, '..', 'zalohy', '2025', `${company.ico}_2025`, `${company.ico}_2025.mdb`);
    
    console.log('üìÅ Naƒç√≠tavam DPH d√°ta z:', mdbPath);
    
    if (!fs.existsSync(mdbPath)) {
      return res.status(404).json({ error: 'MDB s√∫bor nebol n√°jden√Ω' });
    }

    // Naƒç√≠tanie DPH d√°t z MDB
    const ADODB = require('node-adodb');
    const connection = ADODB.open(`Provider=Microsoft.Jet.OLEDB.4.0;Data Source=${mdbPath};`);
    
    const selectedYear = year || new Date().getFullYear();
    
    const query = `
      SELECT 
        ID,
        Rok,
        RelObDPH,
        KcDan,
        KcOdpoc,
        ElOdeslano
      FROM DPH 
      WHERE Rok = ${selectedYear}
      ORDER BY RelObDPH ASC
    `;
    
    console.log('üîç SQL query:', query);
    
    const data = await connection.query(query);
    
    console.log('üìä N√°jden√Ωch DPH z√°znamov:', data.length);
    
    // Spracovanie d√°t
    const returns = data.map((row, index) => ({
      id: index + 1,
      rok: parseInt(row.Rok) || selectedYear,
      mesiac: parseInt(row.RelObDPH) || 0,
      povinnost: parseFloat(row.KcDan) || 0,
      odpoƒçet: parseFloat(row.KcOdpoc) || 0,
      odoslan√©: row.ElOdeslano === true || row.ElOdeslano === 1 || row.ElOdeslano === 'True'
    }));
    
    // V√Ωpoƒçet s√∫hrnu
    const summary = {
      totalPovinnost: returns.reduce((sum, item) => sum + item.povinnost, 0),
      totalOdpoƒçet: returns.reduce((sum, item) => sum + item.odpoƒçet, 0),
      totalRozdiel: returns.reduce((sum, item) => sum + (item.povinnost - item.odpoƒçet), 0),
      odoslan√©Count: returns.filter(item => item.odoslan√©).length,
      neodoslan√©Count: returns.filter(item => !item.odoslan√©).length
    };
    
    const response = {
      company: {
        id: company.id,
        name: company.name,
        ico: company.ico
      },
      year: parseInt(selectedYear),
      returns: returns,
      summary: summary
    };
    
    console.log('‚úÖ DPH d√°ta √∫spe≈°ne naƒç√≠tan√©');
    res.json(response);
    
  } catch (error) {
    console.error('‚ùå Chyba pri naƒç√≠tan√≠ DPH d√°t:', error);
    res.status(500).json({ error: 'Chyba pri naƒç√≠tan√≠ DPH d√°t' });
  }
});

// 7. BANKOV√â √öƒåTY

// Z√≠skanie bankov√Ωch √∫ƒçtov z MDB
router.get('/bank-accounts/:companyId', authenticateToken, async (req, res) => {
  const { companyId } = req.params;
  
  console.log('üè¶ Z√≠skavam bankov√© √∫ƒçty pre company_id:', companyId);
  console.log('üîç Pou≈æ√≠vateƒæ:', req.user.email);
  
  try {
    // Z√≠skanie inform√°ci√≠ o firme
    const company = await new Promise((resolve, reject) => {
      db.get('SELECT * FROM companies WHERE id = ?', [companyId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
    
    if (!company) {
      return res.status(404).json({ error: 'Firma nebola n√°jden√°' });
    }
    
    console.log('üè¢ Inform√°cie o firme:', {
      id: company.id,
      name: company.name,
      ico: company.ico
    });
    
    const mdbPath = path.join(__dirname, '..', 'zalohy', '2025', `${company.ico}_2025`, `${company.ico}_2025.mdb`);
    
    console.log('üìÅ Naƒç√≠tavam bankov√© d√°ta z:', mdbPath);
    
    if (!fs.existsSync(mdbPath)) {
      console.log('‚ùå MDB s√∫bor neexistuje:', mdbPath);
      return res.status(404).json({ 
        error: 'MDB s√∫bor nebol n√°jden√Ω',
        details: {
          companyId: companyId,
          companyName: company.name,
          companyIco: company.ico,
          mdbPath: mdbPath
        }
      });
    }

    // Naƒç√≠tanie bankov√Ωch √∫ƒçtov z MDB
    const ADODB = require('node-adodb');
    const connection = ADODB.open(`Provider=Microsoft.Jet.OLEDB.4.0;Data Source=${mdbPath};`);
    
    // Najprv skontrolujeme, ƒçi tabuƒæky existuj√∫
    try {
      const tablesQuery = "SELECT Name FROM MSysObjects WHERE Type=1 AND Flags=0";
      const tables = await connection.query(tablesQuery);
      console.log('üìã Dostupn√© tabuƒæky:', tables.map(t => t.Name));
    } catch (error) {
      console.log('‚ö†Ô∏è Nepodarilo sa z√≠ska≈• zoznam tabuliek:', error.message);
    }
    
    // Z√≠skanie v≈°etk√Ωch √∫ƒçtov z tabuƒæky sUcet a potom filtrovanie bankov√Ωch √∫ƒçtov
    const accountsQuery = `
      SELECT 
        ID,
        AUcet,
        SText,
        Banka,
        RelJeUcet
      FROM sUcet 
      ORDER BY AUcet
    `;
    
    console.log('üîç SQL query pre √∫ƒçty:', accountsQuery);
    
    const allAccountsData = await connection.query(accountsQuery);
    
    console.log('üè¶ N√°jden√Ωch √∫ƒçtov v sUcet (pred filtrovan√≠m):', allAccountsData.length);
    console.log('üè¶ V≈°etky √∫ƒçty v sUcet:', allAccountsData);
    
    const accounts = [];
    let totalBalance = 0;
    let totalCredit = 0;
    let totalDebit = 0;
    
    for (const account of allAccountsData) {
      let accountNumber = account.AUcet;
      let displayAccountNumber = account.SText; // Pre zobrazenie pou≈æijeme SText
      
      // Ak je SText pr√°zdne, preskoƒç√≠me tento √∫ƒçet √∫plne
      if (!displayAccountNumber || displayAccountNumber === '') {
        console.log(`üè¶ Preskakujem √∫ƒçet s pr√°zdnym SText: AUcet=${accountNumber}`);
        continue;
      }
      
      // Ak je RelJeUcet = 1, je to poklad≈àa, preskoƒç√≠me
      if (account.RelJeUcet === 1) {
        console.log(`üè¶ Preskakujem poklad≈àu (RelJeUcet=1): AUcet=${accountNumber}, SText=${displayAccountNumber}`);
        continue;
      }
      
      // Ak je AUcet pr√°zdne, pou≈æijeme 221000 pre v√Ωpoƒçty v pUD
      if (!accountNumber || accountNumber === '') {
        accountNumber = '221000'; // Pre v√Ωpoƒçty v pUD
        console.log(`üè¶ AUcet je pr√°zdne, pou≈æ√≠vam 221000 pre pUD v√Ωpoƒçty, zobrazenie: ${displayAccountNumber}`);
      }
      
      // Filtrujeme iba bankov√© √∫ƒçty (221)
      if (!accountNumber.startsWith('221')) {
        continue; // Preskoƒç√≠me tento √∫ƒçet, ak nie je 221
      }
      
      const accountName = displayAccountNumber; // Pou≈æ√≠vame SText, ktor√Ω u≈æ vieme ≈æe nie je pr√°zdny
      const bankName = account.Banka || 'Nezn√°ma banka';
      
      console.log(`üè¶ Spracujem √∫ƒçet: ${accountNumber} (pUD), zobrazenie: ${displayAccountNumber}, n√°zov: ${accountName}, banka: ${bankName}`);
      
      // Z√≠skanie kreditn√Ωch pohybov (UMD) pre tento √∫ƒçet z pUD - pou≈æ√≠vame √∫ƒçtov√∫ osnovu
      const creditQuery = `
        SELECT 
          SUM(pUD.Kc) as credit_total,
          COUNT(*) as transaction_count
        FROM pUD 
        WHERE pUD.UMD = '${accountNumber}'
      `;
      
      // Z√≠skanie debetn√Ωch pohybov (UD) pre tento √∫ƒçet z pUD - pou≈æ√≠vame √∫ƒçtov√∫ osnovu
      const debitQuery = `
        SELECT 
          SUM(pUD.Kc) as debit_total
        FROM pUD 
        WHERE pUD.UD = '${accountNumber}'
      `;
      
      console.log(`üîç SQL query pre kredit √∫ƒçtu ${accountNumber}:`, creditQuery);
      console.log(`üîç SQL query pre debet √∫ƒçtu ${accountNumber}:`, debitQuery);
      
      const creditData = await connection.query(creditQuery);
      const debitData = await connection.query(debitQuery);
      
      console.log(`üîç Kredit pre √∫ƒçet ${accountNumber}:`, creditData);
      console.log(`üîç Debet pre √∫ƒçet ${accountNumber}:`, debitData);
      
      const creditTotal = parseFloat(creditData[0]?.credit_total) || 0;
      const debitTotal = parseFloat(debitData[0]?.debit_total) || 0;
      const balance = creditTotal - debitTotal;
      const transactionCount = parseInt(creditData[0]?.transaction_count) || 0;
      
      accounts.push({
        id: account.ID || accounts.length + 1,
        accountNumber: displayAccountNumber, // Zobrazujeme SText, ktor√Ω u≈æ vieme ≈æe nie je pr√°zdny
        accountName: accountName,
        bankName: bankName,
        balance: balance,
        creditTotal: creditTotal,
        debitTotal: debitTotal,
        transactionCount: transactionCount
      });
      
      totalBalance += balance;
      totalCredit += creditTotal;
      totalDebit += debitTotal;
    }
    
    const response = {
      company: {
        id: company.id,
        name: company.name,
        ico: company.ico
      },
      accounts: accounts,
      summary: {
        totalBalance: totalBalance,
        totalCredit: totalCredit,
        totalDebit: totalDebit,
        accountCount: accounts.length
      },
      message: accounts.length === 0 ? 'Neboli n√°jden√© ≈æiadne bankov√© √∫ƒçty (221)' : undefined
    };
    
    console.log('‚úÖ Bankov√© d√°ta √∫spe≈°ne naƒç√≠tan√©');
    res.json(response);
    
  } catch (error) {
    console.error('‚ùå Chyba pri naƒç√≠tan√≠ bankov√Ωch d√°t:', error);
    res.status(500).json({ error: 'Chyba pri naƒç√≠tan√≠ bankov√Ωch d√°t' });
  }
});

// 8. POKLAD≈áA

// Z√≠skanie poklad≈àov√Ωch √∫ƒçtov z MDB
router.get('/cash-accounts/:companyId', authenticateToken, async (req, res) => {
  const { companyId } = req.params;
  
  console.log('üí∞ Z√≠skavam poklad≈àov√© √∫ƒçty pre company_id:', companyId);
  console.log('üîç Pou≈æ√≠vateƒæ:', req.user.email);
  
  try {
    // Z√≠skanie inform√°ci√≠ o firme
    const company = await new Promise((resolve, reject) => {
      db.get('SELECT * FROM companies WHERE id = ?', [companyId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
    
    if (!company) {
      return res.status(404).json({ error: 'Firma nebola n√°jden√°' });
    }
    
    const mdbPath = path.join(__dirname, '..', 'zalohy', '2025', `${company.ico}_2025`, `${company.ico}_2025.mdb`);
    
    console.log('üìÅ Naƒç√≠tavam poklad≈àov√© d√°ta z:', mdbPath);
    
    if (!fs.existsSync(mdbPath)) {
      return res.status(404).json({ error: 'MDB s√∫bor nebol n√°jden√Ω' });
    }

    // Naƒç√≠tanie poklad≈àov√Ωch √∫ƒçtov z MDB
    const ADODB = require('node-adodb');
    const connection = ADODB.open(`Provider=Microsoft.Jet.OLEDB.4.0;Data Source=${mdbPath};`);
    
    // Z√≠skanie poklad≈àov√Ωch √∫ƒçtov z tabuƒæky sUcet (iba 211 - poklad≈àa)
    const accountsQuery = `
      SELECT 
        ID,
        AUcet,
        SText
      FROM sUcet 
      WHERE AUcet LIKE '211%'
      ORDER BY AUcet
    `;
    
    console.log('üîç SQL query pre poklad≈àov√© √∫ƒçty:', accountsQuery);
    
    const accountsData = await connection.query(accountsQuery);
    
    console.log('üí∞ N√°jden√Ωch poklad≈àov√Ωch √∫ƒçtov:', accountsData.length);
    console.log('üí∞ √öƒçty:', accountsData);
    
    // Spracovanie poklad≈àov√Ωch √∫ƒçtov - pou≈æijeme rovnak√Ω pr√≠stup ako pri banke
    const accounts = [];
    let totalBalance = 0;
    let totalCredit = 0;
    let totalDebit = 0;
    
    for (const account of accountsData) {
      const accountNumber = account.AUcet; // Iba 211 √∫ƒçty
      const accountName = account.SText || `Poklad≈àa ${accountNumber}`;
      
      // Z√≠skanie kreditn√Ωch pohybov (UMD) pre tento √∫ƒçet z pUD
      const creditQuery = `
        SELECT 
          SUM(pUD.Kc) as credit_total,
          COUNT(*) as transaction_count
        FROM pUD 
        WHERE pUD.UMD = '${accountNumber}'
      `;
      
      // Z√≠skanie debetn√Ωch pohybov (UD) pre tento √∫ƒçet z pUD
      const debitQuery = `
        SELECT 
          SUM(pUD.Kc) as debit_total
        FROM pUD 
        WHERE pUD.UD = '${accountNumber}'
      `;
      
      console.log(`üîç SQL query pre kredit pokladne ${accountNumber}:`, creditQuery);
      console.log(`üîç SQL query pre debet pokladne ${accountNumber}:`, debitQuery);
      
      const creditData = await connection.query(creditQuery);
      const debitData = await connection.query(debitQuery);
      
      console.log(`üîç Kredit pre poklad≈àu ${accountNumber}:`, creditData);
      console.log(`üîç Debet pre poklad≈àu ${accountNumber}:`, debitData);
      
      const creditTotal = parseFloat(creditData[0]?.credit_total) || 0;
      const debitTotal = parseFloat(debitData[0]?.debit_total) || 0;
      const balance = creditTotal - debitTotal;
      const transactionCount = parseInt(creditData[0]?.transaction_count) || 0;
      
      accounts.push({
        id: account.ID || accounts.length + 1,
        accountNumber: accountNumber,
        accountName: accountName,
        balance: balance,
        creditTotal: creditTotal,
        debitTotal: debitTotal,
        transactionCount: transactionCount
      });
      
      totalBalance += balance;
      totalCredit += creditTotal;
      totalDebit += debitTotal;
    }
    
    const response = {
      company: {
        id: company.id,
        name: company.name,
        ico: company.ico
      },
      accounts: accounts,
      summary: {
        totalBalance: totalBalance,
        totalCredit: totalCredit,
        totalDebit: totalDebit,
        accountCount: accounts.length
      }
    };
    
    console.log('‚úÖ Poklad≈àov√© d√°ta √∫spe≈°ne naƒç√≠tan√©');
    res.json(response);
    
  } catch (error) {
    console.error('‚ùå Chyba pri naƒç√≠tan√≠ poklad≈àov√Ωch d√°t:', error);
    res.status(500).json({ error: 'Chyba pri naƒç√≠tan√≠ poklad≈àov√Ωch d√°t' });
  }
});

module.exports = router;
