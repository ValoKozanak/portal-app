const ADODB = require('node-adodb');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// Pripojenie k SQLite datab√°ze
const dbPath = path.join(__dirname, 'portal.db');
const db = new sqlite3.Database(dbPath);

async function cleanImport() {
  try {
    console.log('üßπ Zaƒç√≠nam ƒçist√Ω import v≈°etk√Ωch √∫dajov z MDB...');
    
    const currentYear = new Date().getFullYear();
    const mdbPath = `C:\\Users\\kozan\\Cursor\\backend\\zalohy\\${currentYear}\\77777777_${currentYear}\\77777777_${currentYear}.mdb`;
    
    console.log('üìÅ Cesta k MDB:', mdbPath);
    
    const connection = ADODB.open(`Provider=Microsoft.Jet.OLEDB.4.0;Data Source=${mdbPath};`);
    
    // 1. Vymazanie existuj√∫cich fakt√∫r
    console.log('üóëÔ∏è Vymaz√°vam existuj√∫ce fakt√∫ry...');
    db.run("DELETE FROM issued_invoices WHERE company_id = 3", function(err) {
      if (err) {
        console.error('‚ùå Chyba pri mazan√≠:', err);
        return;
      }
      console.log(`‚úÖ Vymazan√Ωch ${this.changes} fakt√∫r`);
      
      // 2. Naƒç√≠tanie v≈°etk√Ωch fakt√∫r z MDB
      const query = `
        SELECT * FROM [FA] 
        WHERE RelTpFak = 1
        ORDER BY Datum DESC
      `;
      
      connection.query(query)
        .then(data => {
          console.log(`‚úÖ Naƒç√≠tan√© ${data.length} fakt√∫r z MDB`);
          
          // 3. Import v≈°etk√Ωch √∫dajov
          let importedCount = 0;
          let errorCount = 0;
          
          data.forEach((row, index) => {
            // Pou≈æijeme INSERT s * pre v≈°etky stƒ∫pce
            const insertQuery = `
              INSERT INTO issued_invoices (
                company_id, invoice_number, customer_name, customer_ico, customer_dic,
                customer_address, issue_date, due_date, total_amount, vat_amount,
                currency, status, pohoda_id, notes, created_by, created_at, updated_at,
                kc_dph1, kc_dph2, kc_dph3, var_sym, s_text, kc_celkem, kc0, dat_splat,
                firma, ico, dic, ulice, psc, obec, mdb_cislo, mdb_id, rel_tp_fak, datum,
                kc1, kc2, kc3
              ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            `;
            
                         const values = [
               3, // company_id
               row.Cislo || '',
               row.Firma || '',
               row.ICO || '',
               row.DIC || '',
               `${row.Ulice || ''}, ${row.PSC || ''} ${row.Obec || ''}`.trim().replace(/^,\s*/, ''),
               row.Datum ? new Date(row.Datum).toISOString().split('T')[0] : '',
               row.DatSplat ? new Date(row.DatSplat).toISOString().split('T')[0] : '',
               (parseFloat(row.Kc0) || 0) + (parseFloat(row.Kc1) || 0) + (parseFloat(row.Kc2) || 0) + (parseFloat(row.Kc3) || 0),
               (parseFloat(row.KcDPH1) || 0) + (parseFloat(row.KcDPH2) || 0) + (parseFloat(row.KcDPH3) || 0),
               'EUR',
               'sent',
               null, // pohoda_id
               row.SText || '',
               'system@import.com',
               parseFloat(row.KcDPH1) || 0,
               parseFloat(row.KcDPH2) || 0,
               parseFloat(row.KcDPH3) || 0,
               row.VarSym || '',
               row.SText || '',
               parseFloat(row.KcCelkem) || 0,
               parseFloat(row.Kc0) || 0,
               row.DatSplat || null,
               row.Firma || '',
               row.ICO || '',
               row.DIC || '',
               row.Ulice || '',
               row.PSC || '',
               row.Obec || '',
               row.Cislo || '',
               row.ID || null,
               row.RelTpFak || null,
               row.Datum || null,
               parseFloat(row.Kc1) || 0,
               parseFloat(row.Kc2) || 0,
               parseFloat(row.Kc3) || 0
             ];
            
            db.run(insertQuery, values, function(err) {
              if (err) {
                console.error(`‚ùå Chyba pri importe fakt√∫ry ${row.Cislo}:`, err);
                errorCount++;
              } else {
                importedCount++;
                console.log(`‚úÖ Importovan√° fakt√∫ra ${row.Cislo} (${importedCount}/${data.length})`);
              }
              
              // Ak sme spracovali v≈°etky fakt√∫ry
              if (index === data.length - 1) {
                console.log('\nüéâ IMPORT DOKONƒåEN√ù!');
                console.log(`‚úÖ √öspe≈°ne importovan√Ωch: ${importedCount}`);
                console.log(`‚ùå Chyby: ${errorCount}`);
                console.log(`üìä Celkovo spracovan√Ωch: ${data.length}`);
                
                // Zatvorenie datab√°zy
                db.close();
                process.exit(0);
              }
            });
          });
        })
        .catch(error => {
          console.error('‚ùå Chyba pri ƒç√≠tan√≠ MDB:', error);
          db.close();
          process.exit(1);
        });
    });
    
  } catch (error) {
    console.error('‚ùå Chyba pri importe:', error);
    db.close();
    process.exit(1);
  }
}

cleanImport();
