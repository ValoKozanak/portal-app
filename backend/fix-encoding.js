const { db } = require('./database');

// Funkcia na opravu k√≥dovania n√°zvov s√∫borov
function fixFileEncoding() {
  console.log('üîß Opravujem k√≥dovanie n√°zvov s√∫borov...');
  
  db.all('SELECT id, original_name FROM files', [], (err, files) => {
    if (err) {
      console.error('‚ùå Chyba pri naƒç√≠tan√≠ s√∫borov:', err);
      return;
    }
    
    console.log(`üìÅ Na≈°lo sa ${files.length} s√∫borov na kontrolu`);
    
    files.forEach(file => {
      try {
        // Sk√∫sime dek√≥dova≈• n√°zov s√∫boru
        let fixedName = file.original_name;
        
        // Ak n√°zov obsahuje po≈°koden√© znaky, sk√∫sime ho opravi≈•
        if (fixedName.includes('√É')) {
          // Pokus o opravu UTF-8 k√≥dovania
          try {
            // Sk√∫sime dek√≥dova≈• ako UTF-8
            const buffer = Buffer.from(fixedName, 'latin1');
            fixedName = buffer.toString('utf8');
          } catch (e) {
            console.log(`‚ö†Ô∏è  Nepodarilo sa opravi≈•: ${file.original_name}`);
          }
        }
        
        // Ak sa n√°zov zmenil, aktualizujeme datab√°zu
        if (fixedName !== file.original_name) {
          db.run('UPDATE files SET original_name = ? WHERE id = ?', 
            [fixedName, file.id], 
            function(err) {
              if (err) {
                console.error(`‚ùå Chyba pri aktualiz√°cii s√∫boru ${file.id}:`, err);
              } else {
                console.log(`‚úÖ Opraven√Ω s√∫bor ${file.id}: "${file.original_name}" ‚Üí "${fixedName}"`);
              }
            }
          );
        }
      } catch (error) {
        console.error(`‚ùå Chyba pri spracovan√≠ s√∫boru ${file.id}:`, error);
      }
    });
    
    console.log('‚úÖ Oprava k√≥dovania dokonƒçen√°');
  });
}

// Spust√≠me opravu
fixFileEncoding();
















