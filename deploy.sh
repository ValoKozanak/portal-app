#!/bin/bash

# üöÄ Deployment Script pre Client Portal
# Pou≈æitie: ./deploy.sh [vercel|railway|docker]

set -e

echo "üöÄ Sp√∫≈°≈•am deployment script..."

# Farba pre v√Ωstup
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funkcia pre logovanie
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# Kontrola pr√≠tomnosti s√∫borov
check_files() {
    log "Kontrolujem potrebn√© s√∫bory..."
    
    required_files=(
        "package.json"
        "backend/package.json"
        "vercel.json"
        "backend/railway.json"
        "Dockerfile"
        "backend/Dockerfile"
        "docker-compose.yml"
    )
    
    for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
            error "Ch√Ωba s√∫bor: $file"
        fi
    done
    
    log "‚úÖ V≈°etky potrebn√© s√∫bory s√∫ pr√≠tomn√©"
}

# Build aplik√°cie
build_app() {
    log "Buildujem aplik√°ciu..."
    
    # Frontend build
    log "Buildujem frontend..."
    npm run build
    
    if [ $? -eq 0 ]; then
        log "‚úÖ Frontend build √∫spe≈°n√Ω"
    else
        error "‚ùå Frontend build zlyhal"
    fi
}

# Git commit a push
git_deploy() {
    log "Commit a push na GitHub..."
    
    git add .
    git commit -m "Deploy: $(date +'%Y-%m-%d %H:%M:%S')"
    git push origin main
    
    log "‚úÖ K√≥d pushnut√Ω na GitHub"
}

# Docker deployment
docker_deploy() {
    log "Sp√∫≈°≈•am Docker deployment..."
    
    # Zastavenie existuj√∫cich kontajnerov
    docker-compose down
    
    # Build a spustenie
    docker-compose up --build -d
    
    log "‚úÖ Docker deployment √∫spe≈°n√Ω"
    log "üåê Frontend: http://localhost:3000"
    log "üîß Backend: http://localhost:5000"
}

# Vercel deployment
vercel_deploy() {
    log "Sp√∫≈°≈•am Vercel deployment..."
    
    # Kontrola Vercel CLI
    if ! command -v vercel &> /dev/null; then
        error "Vercel CLI nie je nain≈°talovan√©. Nain≈°talujte: npm i -g vercel"
    fi
    
    # Deploy
    vercel --prod
    
    log "‚úÖ Vercel deployment √∫spe≈°n√Ω"
}

# Railway deployment
railway_deploy() {
    log "Sp√∫≈°≈•am Railway deployment..."
    
    # Kontrola Railway CLI
    if ! command -v railway &> /dev/null; then
        error "Railway CLI nie je nain≈°talovan√©. Nain≈°talujte: npm i -g @railway/cli"
    fi
    
    # Deploy backend
    cd backend
    railway up
    
    log "‚úÖ Railway deployment √∫spe≈°n√Ω"
}

# Hlavn√° funkcia
main() {
    local deployment_type=$1
    
    log "Zaƒç√≠nam deployment typu: $deployment_type"
    
    # Kontrola s√∫borov
    check_files
    
    case $deployment_type in
        "docker")
            build_app
            docker_deploy
            ;;
        "vercel")
            build_app
            git_deploy
            vercel_deploy
            ;;
        "railway")
            git_deploy
            railway_deploy
            ;;
        "all")
            build_app
            git_deploy
            vercel_deploy
            railway_deploy
            ;;
        *)
            echo "Pou≈æitie: $0 [docker|vercel|railway|all]"
            echo ""
            echo "Mo≈ænosti:"
            echo "  docker   - Lok√°lne nasadenie s Docker"
            echo "  vercel   - Nasadenie frontendu na Vercel"
            echo "  railway  - Nasadenie backendu na Railway"
            echo "  all      - Kompletn√© nasadenie"
            exit 1
            ;;
    esac
    
    log "üéâ Deployment dokonƒçen√Ω!"
}

# Spustenie skriptu
main "$@"
