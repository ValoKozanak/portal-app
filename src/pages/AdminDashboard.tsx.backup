import React, { useState, useEffect } from 'react';
import { 
  ChartBarIcon, 
  UsersIcon, 
  DocumentTextIcon, 
  CogIcon,
  BellIcon,
  MagnifyingGlassIcon,
  ShieldCheckIcon,
  TrashIcon,
  PencilIcon,
  PlusIcon,
  ExclamationTriangleIcon,
  XMarkIcon,
  BuildingOfficeIcon,
  UserIcon,
  ClipboardDocumentListIcon,
  CalendarIcon,
  GlobeAltIcon,
  DocumentIcon
} from '@heroicons/react/24/outline';
import AddUserModal from '../components/AddUserModal';
import AdminCompaniesList from '../components/AdminCompaniesList';
import CompanyDashboard from '../components/CompanyDashboard';
import AssignCompanyModal from '../components/AssignCompanyModal';
import EditUserModal from '../components/EditUserModal';
import EditCompanyModal from '../components/EditCompanyModal';
import { taskService } from '../services/taskService';
import { Task } from '../components/TaskModal';
import { apiService, Company } from '../services/apiService';
import { cmsService, CmsContent } from '../services/cmsService';

const AdminDashboard: React.FC = () => {
  const [stats, setStats] = useState({
    users: 0,
    documents: 0,
    tasks: 0,
    settings: 23,
    admins: 0,
    reports: 0,
    companies: 0
  });

  const [users, setUsers] = useState<any[]>([]);
  // Dynamicky generované dáta pre účtovníkov z users state a localStorage
  const getAccountantsFromUsers = () => {
    return users
      .filter(user => user.role === 'accountant')
      .map(user => ({
        id: user.id.toString(),
        name: user.name,
        email: user.email,
        role: user.role,
        department: 'Účtovníctvo'
      }));
  };

  const getAccountantsFromLocalStorage = () => {
    const accountants: any[] = [];
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && key.startsWith('accountant_') && key.endsWith('_profile_completed')) {
        const email = key.replace('accountant_', '').replace('_profile_completed', '');
        const profileKey = `accountant_${email}_profile`;
        const profileData = localStorage.getItem(profileKey);
        if (profileData) {
          const profile = JSON.parse(profileData);
          accountants.push({
            id: `local_${email}`,
            name: profile.name,
            email: profile.email,
            role: 'accountant',
            department: profile.department || 'Účtovníctvo'
          });
        }
      }
    }
    return accountants;
  };

  const accountants = React.useMemo(() => [
    ...getAccountantsFromUsers(),
    ...getAccountantsFromLocalStorage()
  ], [users, getAccountantsFromUsers, getAccountantsFromLocalStorage]);

  const [systemAlerts, setSystemAlerts] = useState([
    { id: 1, type: 'warning', message: 'Zálohovanie databázy sa nepodarilo', time: '1 hodinu' },
    { id: 2, type: 'info', message: 'Nová verzia systému je dostupná', time: '2 hodiny' },
    { id: 3, type: 'error', message: 'Kritická chyba v systéme', time: '30 minút' },
  ]);

  const [allCompanies, setAllCompanies] = useState<Company[]>([]);
  const [loading, setLoading] = useState(true);

  const [searchTerm, setSearchTerm] = useState('');
  const [showAddUserModal, setShowAddUserModal] = useState(false);
  const [showAssignCompanyModal, setShowAssignCompanyModal] = useState(false);
  const [showEditUserModal, setShowEditUserModal] = useState(false);
  const [selectedUserForEdit, setSelectedUserForEdit] = useState<any>(null);
  const [showEditCompanyModal, setShowEditCompanyModal] = useState(false);
  const [selectedCompanyForEdit, setSelectedCompanyForEdit] = useState<any>(null);
  const [selectedCompanyForDashboard, setSelectedCompanyForDashboard] = useState<any>(null);
  const [allTasks, setAllTasks] = useState<Task[]>([]);
  const [loadingTasks, setLoadingTasks] = useState(true);
  const [activeSection, setActiveSection] = useState<'overview' | 'users' | 'companies' | 'tasks' | 'documents' | 'cms' | 'settings' | 'alerts' | 'admins'>('overview');

  // CMS Content State
  const [cmsContent, setCmsContent] = useState<CmsContent>({});
  const [cmsLoading, setCmsLoading] = useState(true);
  const [cmsVersions, setCmsVersions] = useState<any[]>([]);
  const [showVersionModal, setShowVersionModal] = useState(false);
  const [newVersionName, setNewVersionName] = useState('');
  const [newVersionDescription, setNewVersionDescription] = useState('');

  // Načítanie používateľov z API
  useEffect(() => {
    const loadUsers = async () => {
      try {
        const usersData = await apiService.getAllUsers();
        // Pridáme lastLogin pole pre kompatibilitu
        const usersWithLastLogin = usersData.map(user => ({
          ...user,
          lastLogin: 'Nikdy' // V reálnej aplikácii by sa načítalo z databázy
        }));
        setUsers(usersWithLastLogin);
      } catch (error) {
        console.error('Chyba pri načítaní používateľov:', error);
      }
    };

    loadUsers();
  }, []);

  // Načítanie firiem z API
  useEffect(() => {
    const loadCompanies = async () => {
      try {
        setLoading(true);
        const companies = await apiService.getAllCompanies();
        setAllCompanies(companies);
      } catch (error) {
        console.error('Chyba pri načítaní firiem:', error);
      } finally {
        setLoading(false);
      }
    };

    loadCompanies();
  }, []);

  // Aktualizácia reálnych štatistík
  useEffect(() => {
    // Počet používateľov podľa rolí
    const adminUsers = users.filter(user => user.role === 'admin').length;
    const totalUsers = users.length;
    
    // Počet úloh
    const totalTasks = allTasks.length;
    
    // Počet firiem
    const totalCompanies = allCompanies.length;
    
    // Počet systémových upozornení
    const totalAlerts = systemAlerts.length;
    
    // Počet dokumentov (simulované - v reálnej aplikácii by sa počítali z databázy)
    const totalDocuments = Math.floor(totalCompanies * 15 + totalTasks * 3); // Simulované
    
    setStats({
      users: totalUsers,
      documents: totalDocuments,
      tasks: totalTasks,
      settings: 23,
      admins: adminUsers,
      reports: totalAlerts,
      companies: totalCompanies
    });
  }, [users, allTasks, allCompanies, systemAlerts]);



  // Načítanie všetkých úloh
  useEffect(() => {
    const tasks = taskService.getAllTasks();
    setAllTasks(tasks);
    setLoadingTasks(false);
  }, []);

  const handleDeleteUser = (userId: number) => {
    setUsers(prev => prev.filter(user => user.id !== userId));
  };

  const handleAssignCompany = async (companyId: number, accountantEmails: string[]) => {
    try {
      await apiService.assignAccountantsToCompany(companyId, accountantEmails);
      
      // Aktualizuj firmu v zozname
      setAllCompanies((prev: Company[]) => prev.map((company: Company) => 
        company.id === companyId 
          ? { 
              ...company, 
              assignedToAccountants: accountantEmails
            }
          : company
      ));
    } catch (error) {
      console.error('Chyba pri priraďovaní účtovníkov:', error);
    }
  };

  const handleDeleteCompany = async (companyId: number) => {
    try {
      await apiService.deleteCompany(companyId);
      setAllCompanies((prev: Company[]) => prev.filter((company: Company) => company.id !== companyId));
      setStats(prev => ({ ...prev, companies: prev.companies - 1 }));
    } catch (error) {
      console.error('Chyba pri mazaní firmy:', error);
    }
  };

  const handleOpenCompanyDashboard = (company: any) => {
    setSelectedCompanyForDashboard(company);
  };

  const handleChangeRole = (userId: number, newRole: string) => {
    setUsers(prev => prev.map(user => 
      user.id === userId ? { ...user, role: newRole } : user
    ));
  };

  const handleAddUser = async (userData: { name: string; email: string; password: string; role: string; status: string; phone?: string }) => {
    try {
      // Volanie API pre vytvorenie používateľa
      const response = await apiService.createUser(userData);
      
      const newUser = {
        id: response.userId,
        name: userData.name,
        email: userData.email,
        role: userData.role,
        status: userData.status,
        phone: userData.phone || '',
        lastLogin: 'Nikdy'
      };
      
      setUsers(prev => [...prev, newUser]);
      
      // Aktualizuj štatistiky
      setStats(prev => ({
        ...prev,
        users: prev.users + 1
      }));

      console.log('Používateľ vytvorený úspešne:', response.message);
    } catch (error: any) {
      console.error('Chyba pri vytváraní používateľa:', error.message);
      alert(`Chyba pri vytváraní používateľa: ${error.message}`);
    }
  };

    const handleEditUser = async (userId: number, userData: any) => {
    try {
      const response = await apiService.updateUser(userId, userData);
      
      // Aktualizuj používateľa v state
      setUsers(prev => prev.map(user => 
        user.id === userId 
          ? { ...user, ...userData }
          : user
      ));

      console.log('Používateľ aktualizovaný úspešne:', response.message);
    } catch (error: any) {
      console.error('Chyba pri aktualizácii používateľa:', error.message);
      alert(`Chyba pri aktualizácii používateľa: ${error.message}`);
    }
  };

  const handleEditCompany = async (companyId: number, companyData: any) => {
    try {
      const response = await apiService.updateCompany(companyId, companyData);
      
      // Aktualizuj firmu v state
      setAllCompanies(prev => prev.map(company => 
        company.id === companyId 
          ? { ...company, ...companyData }
          : company
      ));

      console.log('Firma aktualizovaná úspešne:', response.message);
    } catch (error: any) {
      console.error('Chyba pri aktualizácii firmy:', error.message);
      alert(`Chyba pri aktualizácii firmy: ${error.message}`);
    }
  };

  const handleUpdateTaskStatus = (taskId: string, newStatus: Task['status']) => {
    const updatedTask = taskService.updateTask(taskId, { status: newStatus });
    if (updatedTask) {
      setAllTasks(prev => prev.map(task => 
        task.id === taskId ? updatedTask : task
      ));
    }
  };

  const handleDeleteTask = (taskId: string) => {
    if (window.confirm('Naozaj chcete vymazať túto úlohu?')) {
      const success = taskService.deleteTask(taskId);
      if (success) {
        setAllTasks(prev => prev.filter(task => task.id !== taskId));
      }
    }
  };

  const getStatusBadge = (status: string) => {
    const colors = {
      pending: 'bg-yellow-100 text-yellow-800',
      completed: 'bg-green-100 text-green-800',
      in_progress: 'bg-blue-100 text-blue-800',
      cancelled: 'bg-gray-100 text-gray-800',
    };
    const labels = {
      pending: 'Čakajúce',
      completed: 'Dokončené',
      in_progress: 'V spracovaní',
      cancelled: 'Zrušené',
    };
    return (
      <span className={`px-2 py-1 text-xs font-medium rounded-full ${colors[status as keyof typeof colors]}`}>
        {labels[status as keyof typeof labels]}
      </span>
    );
  };

  const getPriorityBadge = (priority: string) => {
    const colors = {
      urgent: 'bg-red-100 text-red-800',
      high: 'bg-orange-100 text-orange-800',
      medium: 'bg-yellow-100 text-yellow-800',
      low: 'bg-green-100 text-green-800',
    };
    const labels = {
      urgent: 'Urgentná',
      high: 'Vysoká',
      medium: 'Stredná',
      low: 'Nízka',
    };
    return (
      <span className={`px-2 py-1 text-xs font-medium rounded-full ${colors[priority as keyof typeof colors]}`}>
        {labels[priority as keyof typeof labels]}
      </span>
    );
  };

  const handleOpenEditUser = (user: any) => {
    setSelectedUserForEdit(user);
    setShowEditUserModal(true);
  };

  const handleOpenEditCompany = (company: any) => {
    setSelectedCompanyForEdit(company);
    setShowEditCompanyModal(true);
  };

  const getAlertIcon = (type: string) => {
    switch (type) {
      case 'warning':
        return <ExclamationTriangleIcon className="h-5 w-5 text-yellow-500" />;
      case 'error':
        return <ExclamationTriangleIcon className="h-5 w-5 text-red-500" />;
      case 'info':
        return <BellIcon className="h-5 w-5 text-blue-500" />;
      default:
        return <BellIcon className="h-5 w-5 text-gray-500" />;
    }
  };

  const getRoleBadge = (role: string) => {
    const colors = {
      admin: 'bg-red-100 text-red-800',
      accountant: 'bg-yellow-100 text-yellow-800',
      moderator: 'bg-yellow-100 text-yellow-800',
      user: 'bg-green-100 text-green-800'
    };
    
    const roleLabels = {
      admin: 'Admin',
      accountant: 'Účtovník',
      moderator: 'Moderátor',
      user: 'Používateľ'
    };
    
    return (
      <span className={`px-2 py-1 text-xs font-medium rounded-full ${colors[role as keyof typeof colors] || 'bg-gray-100 text-gray-800'}`}>
        {roleLabels[role as keyof typeof roleLabels] || role}
      </span>
    );
  };

  const getTaskStatusBadge = (status: string) => {
    return (
      <span className={`px-2 py-1 text-xs font-medium rounded-full ${
        status === 'completed' ? 'bg-green-100 text-green-800' :
        status === 'in_progress' ? 'bg-blue-100 text-blue-800' :
        status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
        'bg-gray-100 text-gray-800'
      }`}>
        {status === 'completed' ? 'Dokončené' :
         status === 'in_progress' ? 'V spracovaní' :
         status === 'pending' ? 'Čakajúce' :
         status === 'cancelled' ? 'Zrušené' : status}
      </span>
    );
  };

  const handleCmsUpdate = async (section: string, field: string, value: string) => {
    try {
      // Aktualizácia lokálneho stavu
      setCmsContent(prev => ({
        ...prev,
        [section]: {
          ...prev[section],
          [field]: value
        }
      }));
      
      // Uloženie do databázy
      await cmsService.updateField(section, field, value);
    } catch (error) {
      console.error('Chyba pri aktualizácii CMS obsahu:', error);
      alert('Chyba pri uložení zmeny');
    }
  };

  // Načítanie CMS obsahu z databázy
  useEffect(() => {
    const loadCmsContent = async () => {
      try {
        setCmsLoading(true);
        const content = await cmsService.getContent();
        setCmsContent(content);
        
        // Načítanie verzií
        const versions = await cmsService.getVersions();
        setCmsVersions(versions);
      } catch (error) {
        console.error('Chyba pri načítaní CMS obsahu:', error);
      } finally {
        setCmsLoading(false);
      }
    };

    loadCmsContent();
  }, []);

  const handleSaveAllChanges = async () => {
    try {
      const updates = cmsService.prepareBatchUpdates(cmsContent);
      await cmsService.batchUpdate(updates);
      alert('Všetky zmeny boli úspešne uložené!');
    } catch (error) {
      console.error('Chyba pri hromadnom uložení:', error);
      alert('Chyba pri uložení zmien');
    }
  };

  const handleCreateVersion = async () => {
    try {
      await cmsService.createVersion(newVersionName, newVersionDescription);
      setShowVersionModal(false);
      setNewVersionName('');
      setNewVersionDescription('');
      
      // Obnovenie verzií
      const versions = await cmsService.getVersions();
      setCmsVersions(versions);
      
      alert('Nová verzia bola úspešne vytvorená!');
    } catch (error) {
      console.error('Chyba pri vytvorení verzie:', error);
      alert('Chyba pri vytvorení verzie');
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex">
              <div className="flex-shrink-0 flex items-center">
                <h1 className="text-xl font-semibold text-gray-900">Admin Dashboard</h1>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        {/* Navigation Tabs */}
        <div className="border-b border-gray-200 mb-6">
          <nav className="-mb-px flex space-x-8">
            {[
              { id: 'overview', name: 'Prehľad', icon: ChartBarIcon },
              { id: 'users', name: 'Používatelia', icon: UsersIcon },
              { id: 'companies', name: 'Firmy', icon: BuildingOfficeIcon },
              { id: 'tasks', name: 'Úlohy', icon: ClipboardDocumentListIcon },
              { id: 'documents', name: 'Dokumenty', icon: DocumentTextIcon },
              { id: 'cms', name: 'Správa obsahu', icon: GlobeAltIcon },
              { id: 'settings', name: 'Nastavenia', icon: CogIcon }
            ].map((tab) => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveSection(tab.id as any)}
                  className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${
                    activeSection === tab.id
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700'
                  }`}
                >
                  <Icon className="h-5 w-5" />
                  <span>{tab.name}</span>
                </button>
              );
            })}
          </nav>
        </div>

        {/* CMS Content Management Section */}
        {(activeSection as any) === 'cms' && (
          <div className="bg-white rounded-lg shadow-md">
            <div className="px-6 py-4 border-b border-gray-200">
              <div className="flex justify-between items-center">
                <div>
                  <h2 className="text-lg font-semibold text-gray-900">Správa obsahu webu</h2>
                  <p className="text-sm text-gray-600 mt-1">Tu môžete editovať obsah verejných stránok</p>
                </div>
                <div className="flex space-x-3">
                  <button
                    onClick={() => setShowVersionModal(true)}
                    className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors"
                  >
                    Vytvoriť verziu
                  </button>
                  <button
                    onClick={handleSaveAllChanges}
                    className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
                  >
                    Uložiť všetky zmeny
                  </button>
                </div>
              </div>
            </div>
            
            <div className="p-6">
              {cmsLoading ? (
                <div className="text-center py-12">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
                  <p className="mt-4 text-gray-600">Načítavam obsah...</p>
                </div>
              ) : (
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                
                {/* Hlavná stránka */}
                <div className="space-y-6">
                  <div className="border-b border-gray-200 pb-4">
                    <h3 className="text-lg font-medium text-gray-900 mb-4">Hlavná stránka</h3>
                    
                    <div className="space-y-4">
                                             <div>
                         <label className="block text-sm font-medium text-gray-700 mb-2">
                           Hlavný nadpis
                         </label>
                         <input
                           type="text"
                           value={cmsContent.home?.heroTitle || ''}
                           onChange={(e) => handleCmsUpdate('home', 'heroTitle', e.target.value)}
                           className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                         />
                       </div>
                      
                                             <div>
                         <label className="block text-sm font-medium text-gray-700 mb-2">
                           Podnadpis
                         </label>
                         <textarea
                           value={cmsContent.home?.heroSubtitle || ''}
                           onChange={(e) => handleCmsUpdate('home', 'heroSubtitle', e.target.value)}
                           rows={3}
                           className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                         />
                       </div>
                      
                                             <div className="grid grid-cols-2 gap-4">
                         <div>
                           <label className="block text-sm font-medium text-gray-700 mb-2">
                             Tlačidlo 1
                           </label>
                           <input
                             type="text"
                             value={cmsContent.home?.heroButton1 || ''}
                             onChange={(e) => handleCmsUpdate('home', 'heroButton1', e.target.value)}
                             className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                           />
                         </div>
                         <div>
                           <label className="block text-sm font-medium text-gray-700 mb-2">
                             Tlačidlo 2
                           </label>
                           <input
                             type="text"
                             value={cmsContent.home?.heroButton2 || ''}
                             onChange={(e) => handleCmsUpdate('home', 'heroButton2', e.target.value)}
                             className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                           />
                         </div>
                       </div>
                    </div>
                  </div>
                  
                  {/* O nás */}
                  <div className="border-b border-gray-200 pb-4">
                    <h3 className="text-lg font-medium text-gray-900 mb-4">O nás</h3>
                    
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Názov spoločnosti
                        </label>
                        <input
                          type="text"
                          value={cmsContent.about?.companyName || ''}
                          onChange={(e) => handleCmsUpdate('about', 'companyName', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Popis spoločnosti
                        </label>
                        <textarea
                          value={cmsContent.about?.description || ''}
                          onChange={(e) => handleCmsUpdate('about', 'description', e.target.value)}
                          rows={3}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Misia
                        </label>
                        <textarea
                          value={cmsContent.about?.mission || ''}
                          onChange={(e) => handleCmsUpdate('about', 'mission', e.target.value)}
                          rows={3}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Vízia
                        </label>
                        <textarea
                          value={cmsContent.about?.vision || ''}
                          onChange={(e) => handleCmsUpdate('about', 'vision', e.target.value)}
                          rows={3}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* Služby a Kontakt */}
                <div className="space-y-6">
                  {/* Služby */}
                  <div className="border-b border-gray-200 pb-4">
                    <h3 className="text-lg font-medium text-gray-900 mb-4">Služby</h3>
                    
                    <div className="space-y-4">
                      <div className="border border-gray-200 rounded-lg p-4">
                        <h4 className="font-medium text-gray-900 mb-2">Základné účtovníctvo</h4>
                        <div className="space-y-2">
                          <input
                            type="text"
                            value={cmsContent.services?.basicAccounting_name || ''}
                            onChange={(e) => handleCmsUpdate('services', 'basicAccounting_name', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Názov služby"
                          />
                          <input
                            type="text"
                            value={cmsContent.services?.basicAccounting_price || ''}
                            onChange={(e) => handleCmsUpdate('services', 'basicAccounting_price', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Cena"
                          />
                          <textarea
                            value={cmsContent.services?.basicAccounting_description || ''}
                            onChange={(e) => handleCmsUpdate('services', 'basicAccounting_description', e.target.value)}
                            rows={2}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Popis služby"
                          />
                        </div>
                      </div>
                      
                      <div className="border border-gray-200 rounded-lg p-4">
                        <h4 className="font-medium text-gray-900 mb-2">Daňové poradenstvo</h4>
                        <div className="space-y-2">
                          <input
                            type="text"
                            value={cmsContent.services?.taxAdvisory_name || ''}
                            onChange={(e) => handleCmsUpdate('services', 'taxAdvisory_name', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Názov služby"
                          />
                          <input
                            type="text"
                            value={cmsContent.services?.taxAdvisory_price || ''}
                            onChange={(e) => handleCmsUpdate('services', 'taxAdvisory_price', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Cena"
                          />
                          <textarea
                            value={cmsContent.services?.taxAdvisory_description || ''}
                            onChange={(e) => handleCmsUpdate('services', 'taxAdvisory_description', e.target.value)}
                            rows={2}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Popis služby"
                          />
                        </div>
                      </div>
                      
                      <div className="border border-gray-200 rounded-lg p-4">
                        <h4 className="font-medium text-gray-900 mb-2">Audit a kontrola</h4>
                        <div className="space-y-2">
                          <input
                            type="text"
                            value={cmsContent.services?.audit_name || ''}
                            onChange={(e) => handleCmsUpdate('services', 'audit_name', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Názov služby"
                          />
                          <input
                            type="text"
                            value={cmsContent.services?.audit_price || ''}
                            onChange={(e) => handleCmsUpdate('services', 'audit_price', e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Cena"
                          />
                          <textarea
                            value={cmsContent.services?.audit_description || ''}
                            onChange={(e) => handleCmsUpdate('services', 'audit_description', e.target.value)}
                            rows={2}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Popis služby"
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {/* Kontakt */}
                  <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4">Kontaktné údaje</h3>
                    
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Adresa
                        </label>
                        <input
                          type="text"
                          value={cmsContent.contact?.address || ''}
                          onChange={(e) => handleCmsUpdate('contact', 'address', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Telefón
                        </label>
                        <input
                          type="text"
                          value={cmsContent.contact?.phone || ''}
                          onChange={(e) => handleCmsUpdate('contact', 'phone', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Email
                        </label>
                        <input
                          type="email"
                          value={cmsContent.contact?.email || ''}
                          onChange={(e) => handleCmsUpdate('contact', 'email', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Otváracie hodiny
                        </label>
                        <input
                          type="text"
                          value={cmsContent.contact?.workingHours || ''}
                          onChange={(e) => handleCmsUpdate('contact', 'workingHours', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="mt-8 pt-6 border-t border-gray-200">
                {/* Save Button */}
                <div className="flex justify-between items-center">
                  <p className="text-sm text-gray-600">
                    Zmeny sa automaticky ukladajú do databázy. Pre hromadné uloženie použite tlačidlo nižšie.
                  </p>
                  <button
                    onClick={handleSaveAllChanges}
                    className="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition-colors"
                  >
                    Uložiť všetky zmeny
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Admin Stats Cards */}
        {(activeSection as any) === 'overview' && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <button 
              onClick={() => setActiveSection('users' as any)}
              className={`bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-all duration-200 transform hover:scale-105 ${
                (activeSection as any) === 'users' ? 'ring-2 ring-primary-500' : ''
              }`}
            >
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <UsersIcon className="h-8 w-8 text-blue-500" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Celkovo používateľov</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.users.toLocaleString()}</p>
                  <p className="text-xs text-gray-500 mt-1">Kliknite pre zobrazenie</p>
                </div>
              </div>
            </button>

            <button 
              onClick={() => setActiveSection('companies' as any)}
              className={`bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-all duration-200 transform hover:scale-105 ${
                (activeSection as any) === 'companies' ? 'ring-2 ring-primary-500' : ''
              }`}
            >
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <BuildingOfficeIcon className="h-8 w-8 text-purple-500" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Celkovo firiem</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.companies}</p>
                  <p className="text-xs text-gray-500 mt-1">Kliknite pre zobrazenie</p>
                </div>
              </div>
            </button>

            <button 
              onClick={() => setActiveSection('tasks' as any)}
              className={`bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-all duration-200 transform hover:scale-105 ${
                (activeSection as any) === 'tasks' ? 'ring-2 ring-primary-500' : ''
              }`}
            >
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <ClipboardDocumentListIcon className="h-8 w-8 text-green-500" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Všetky úlohy</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.tasks}</p>
                  <p className="text-xs text-gray-500 mt-1">Kliknite pre zobrazenie</p>
                </div>
              </div>
            </button>

            <button 
              onClick={() => setActiveSection('alerts' as any)}
              className={`bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-all duration-200 transform hover:scale-105 ${
                (activeSection as any) === 'alerts' ? 'ring-2 ring-primary-500' : ''
              }`}
            >
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <ExclamationTriangleIcon className="h-8 w-8 text-yellow-500" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Systémové upozornenia</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.reports}</p>
                  <p className="text-xs text-gray-500 mt-1">Kliknite pre zobrazenie</p>
                </div>
              </div>
            </button>

            <button 
              onClick={() => setActiveSection('admins' as any)}
              className={`bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-all duration-200 transform hover:scale-105 ${
                (activeSection as any) === 'admins' ? 'ring-2 ring-primary-500' : ''
              }`}
            >
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <ShieldCheckIcon className="h-8 w-8 text-red-500" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Administrátori</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.admins}</p>
                  <p className="text-xs text-gray-500 mt-1">Kliknite pre zobrazenie</p>
                </div>
              </div>
            </button>

            <button 
              onClick={() => setActiveSection('documents' as any)}
              className={`bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-all duration-200 transform hover:scale-105 ${
                (activeSection as any) === 'documents' ? 'ring-2 ring-primary-500' : ''
              }`}
            >
              <div className="flex items-center">
                <div className="flex-shrink-0">
                  <DocumentTextIcon className="h-8 w-8 text-indigo-500" />
                </div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-600">Dokumenty</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.documents.toLocaleString()}</p>
                  <p className="text-xs text-gray-500 mt-1">Kliknite pre zobrazenie</p>
                </div>
              </div>
            </button>
          </div>
        )}

        {/* System Alerts */}
        {(activeSection as any) === 'alerts' && (
          <div className="bg-white rounded-lg shadow-md">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900">Systémové upozornenia</h2>
            </div>
            <div className="p-6">
              <div className="space-y-4">
                {systemAlerts.map((alert) => (
                  <div key={alert.id} className="flex items-start space-x-3 p-3 border rounded-md">
                    <div className="flex-shrink-0 mt-1">
                      {getAlertIcon(alert.type)}
                    </div>
                    <div className="flex-1">
                      <p className="text-sm font-medium text-gray-900">{alert.message}</p>
                      <p className="text-sm text-gray-500">{alert.time}</p>
                    </div>
                    <button className="text-gray-400 hover:text-gray-600">
                      <XMarkIcon className="h-5 w-5" />
                    </button>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Všetky úlohy */}
        {(activeSection as any) === 'tasks' && (
          <div className="bg-white rounded-lg shadow-md">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900">Všetky úlohy zo všetkých firiem</h2>
            </div>
            <div className="p-6">
              {loadingTasks ? (
                <div className="text-center py-12">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto"></div>
                  <p className="mt-4 text-gray-600">Načítavam úlohy...</p>
                </div>
              ) : allTasks.length > 0 ? (
                <div className="space-y-4">
                  {allTasks.map((task) => (
                    <div key={task.id} className="bg-gray-50 rounded-lg p-6 hover:shadow-md transition-shadow">
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex-1">
                          <h3 className="text-lg font-semibold text-gray-900 mb-2">{task.title}</h3>
                          <p className="text-sm text-gray-600 mb-3">{task.description}</p>
                          
                          <div className="flex items-center space-x-4 text-sm text-gray-500 mb-3">
                            <div className="flex items-center">
                              <BuildingOfficeIcon className="h-4 w-4 mr-1" />
                              <span>{task.companyName}</span>
                            </div>
                            <div className="flex items-center">
                              <UserIcon className="h-4 w-4 mr-1" />
                              <span>Priradené: {task.assignedTo}</span>
                            </div>
                            <div className="flex items-center">
                              <CalendarIcon className="h-4 w-4 mr-1" />
                              <span>Termín: {new Date(task.dueDate).toLocaleDateString('sk-SK')}</span>
                            </div>
                            {task.estimatedHours && (
                              <div>
                                <span>Odhad: {task.estimatedHours}h</span>
                              </div>
                            )}
                          </div>
                        </div>
                        <div className="flex flex-col items-end space-y-2 ml-4">
                          {getTaskStatusBadge(task.status)}
                          {getPriorityBadge(task.priority)}
                        </div>
                      </div>
                      
                      <div className="flex items-center justify-between pt-4 border-t border-gray-200">
                        <div className="text-xs text-gray-500">
                          Vytvoril: {task.createdBy} | Kategória: {task.category}
                        </div>
                        <div className="flex space-x-2">
                          {task.status === 'pending' && (
                            <button
                              onClick={() => handleUpdateTaskStatus(task.id, 'in_progress')}
                              className="text-blue-600 hover:text-blue-700 text-sm font-medium"
                            >
                              Začať prácu
                            </button>
                          )}
                          {task.status === 'in_progress' && (
                            <button
                              onClick={() => handleUpdateTaskStatus(task.id, 'completed')}
                              className="text-green-600 hover:text-green-700 text-sm font-medium"
                            >
                              Dokončiť
                            </button>
                          )}
                          <button
                            onClick={() => handleDeleteTask(task.id)}
                            className="text-red-600 hover:text-red-700 text-sm font-medium"
                          >
                            Vymazať
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-12">
                  <ClipboardDocumentListIcon className="mx-auto h-12 w-12 text-gray-400" />
                  <h3 className="mt-2 text-sm font-medium text-gray-900">Žiadne úlohy</h3>
                  <p className="mt-1 text-sm text-gray-500">
                    Zatiaľ neboli vytvorené žiadne úlohy.
                  </p>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Companies Management */}
        {(activeSection as any) === 'companies' && (
          <div className="bg-white rounded-lg shadow-md">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900">Správa všetkých firiem</h2>
            </div>
            <div className="p-6">
                      <AdminCompaniesList 
            companies={allCompanies} 
            onDeleteCompany={handleDeleteCompany}
            onOpenDashboard={handleOpenCompanyDashboard}
            onEditCompany={handleOpenEditCompany}
          />
            </div>
          </div>
        )}

        {/* Users Management */}
        {(activeSection as any) === 'users' && (
          <div className="bg-white rounded-lg shadow-md">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900">Správa používateľov</h2>
            </div>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Používateľ
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Rola
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Posledné prihlásenie
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Akcie
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {users.map((user) => (
                    <tr key={user.id}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div className="text-sm font-medium text-gray-900">{user.name}</div>
                          <div className="text-sm text-gray-500">{user.email}</div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {getRoleBadge(user.role)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {getStatusBadge(user.status)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {user.lastLogin}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div className="flex space-x-2">
                          <button 
                            onClick={() => handleOpenEditUser(user)}
                            className="text-primary-600 hover:text-primary-900"
                            title="Upraviť používateľa"
                          >
                            <PencilIcon className="h-4 w-4" />
                          </button>
                          <button 
                            onClick={() => handleDeleteUser(user.id)}
                            className="text-red-600 hover:text-red-900"
                            title="Vymazať používateľa"
                          >
                            <TrashIcon className="h-4 w-4" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

              {/* Administrators Section */}
        {(activeSection as any) === 'admins' && (
          <div className="bg-white rounded-lg shadow-md">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900">Administrátori systému</h2>
            </div>
            <div className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {users.filter(user => user.role === 'admin').map((admin) => (
                  <div key={admin.id} className="bg-gray-50 rounded-lg p-6 border border-gray-200">
                    <div className="flex items-center mb-4">
                      <div className="flex-shrink-0 h-12 w-12">
                        <div className="h-12 w-12 rounded-full bg-red-100 flex items-center justify-center">
                          <ShieldCheckIcon className="h-6 w-6 text-red-600" />
                        </div>
                      </div>
                      <div className="ml-4">
                        <h3 className="text-lg font-medium text-gray-900">{admin.name}</h3>
                        <p className="text-sm text-gray-500">{admin.email}</p>
                      </div>
                    </div>
                    <div className="space-y-2">
                      <div className="flex items-center text-sm text-gray-600">
                        <span className="font-medium">Status:</span>
                        <span className="ml-2">{getStatusBadge(admin.status)}</span>
                      </div>
                      <div className="flex items-center text-sm text-gray-600">
                        <span className="font-medium">Posledné prihlásenie:</span>
                        <span className="ml-2">{admin.lastLogin}</span>
                      </div>
                    </div>
                    <div className="mt-4 flex space-x-2">
                      <button 
                        onClick={() => handleOpenEditUser(admin)}
                        className="flex-1 bg-primary-600 text-white px-3 py-2 rounded-md hover:bg-primary-700 text-sm"
                      >
                        Upraviť
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Documents Section */}
        {(activeSection as any) === 'documents' && (
          <div className="bg-white rounded-lg shadow-md">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900">Prehľad dokumentov</h2>
              <p className="text-sm text-gray-600 mt-1">Celkovo {stats.documents.toLocaleString()} dokumentov v systéme</p>
            </div>
            <div className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div className="bg-blue-50 rounded-lg p-6 border border-blue-200">
                  <div className="flex items-center">
                    <DocumentTextIcon className="h-8 w-8 text-blue-500" />
                    <div className="ml-4">
                      <p className="text-sm font-medium text-blue-600">Faktúry</p>
                      <p className="text-2xl font-bold text-blue-900">{Math.floor(stats.documents * 0.3)}</p>
                    </div>
                  </div>
                </div>
                <div className="bg-green-50 rounded-lg p-6 border border-green-200">
                  <div className="flex items-center">
                    <DocumentTextIcon className="h-8 w-8 text-green-500" />
                    <div className="ml-4">
                      <p className="text-sm font-medium text-green-600">Zmluvy</p>
                      <p className="text-2xl font-bold text-green-900">{Math.floor(stats.documents * 0.2)}</p>
                    </div>
                  </div>
                </div>
                <div className="bg-yellow-50 rounded-lg p-6 border border-yellow-200">
                  <div className="flex items-center">
                    <DocumentTextIcon className="h-8 w-8 text-yellow-500" />
                    <div className="ml-4">
                      <p className="text-sm font-medium text-yellow-600">Výkazy</p>
                      <p className="text-2xl font-bold text-yellow-900">{Math.floor(stats.documents * 0.25)}</p>
                    </div>
                  </div>
                </div>
                <div className="bg-purple-50 rounded-lg p-6 border border-purple-200">
                  <div className="flex items-center">
                    <DocumentTextIcon className="h-8 w-8 text-purple-500" />
                    <div className="ml-4">
                      <p className="text-sm font-medium text-purple-600">Ostatné</p>
                      <p className="text-2xl font-bold text-purple-900">{Math.floor(stats.documents * 0.25)}</p>
                    </div>
                  </div>
                </div>
              </div>
              <div className="mt-8">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Najnovšie dokumenty</h3>
                <div className="space-y-3">
                  {Array.from({ length: 5 }, (_, i) => (
                    <div key={i} className="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                      <div className="flex items-center">
                        <DocumentTextIcon className="h-5 w-5 text-gray-400 mr-3" />
                        <div>
                          <p className="text-sm font-medium text-gray-900">Dokument {i + 1}</p>
                          <p className="text-xs text-gray-500">Firma {i + 1} • {new Date().toLocaleDateString('sk-SK')}</p>
                        </div>
                      </div>
                      <span className="text-xs text-gray-500">{(Math.random() * 2 + 0.5).toFixed(1)} MB</span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Quick Admin Actions */}
        <div className="bg-white rounded-lg shadow-md p-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">Rýchle admin akcie</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <button className="flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700">
              <ShieldCheckIcon className="h-5 w-5 mr-2" />
              Správa oprávnení
            </button>
            <button className="flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-yellow-600 hover:bg-yellow-700">
              <CogIcon className="h-5 w-5 mr-2" />
              Systémové nastavenia
            </button>
            <button className="flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-600 hover:bg-purple-700">
              <ChartBarIcon className="h-5 w-5 mr-2" />
              Analytika
            </button>
          </div>
        </div>

               {/* Add User Modal */}
        <AddUserModal
          isOpen={showAddUserModal}
          onClose={() => setShowAddUserModal(false)}
          onAddUser={handleAddUser}
        />

        {/* Company Dashboard Modal */}
        {selectedCompanyForDashboard && (
          <CompanyDashboard
            company={selectedCompanyForDashboard}
            onClose={() => setSelectedCompanyForDashboard(null)}
          />
        )}

        {/* Assign Company Modal */}
        <AssignCompanyModal
          isOpen={showAssignCompanyModal}
          onClose={() => setShowAssignCompanyModal(false)}
          onAssign={handleAssignCompany}
          companies={allCompanies}
          accountants={accountants}
        />

        {/* Edit User Modal */}
        <EditUserModal
          isOpen={showEditUserModal}
          onClose={() => {
            setShowEditUserModal(false);
            setSelectedUserForEdit(null);
          }}
          onSave={handleEditUser}
          user={selectedUserForEdit}
        />

        {/* Edit Company Modal */}
        <EditCompanyModal
          isOpen={showEditCompanyModal}
          onClose={() => {
            setShowEditCompanyModal(false);
            setSelectedCompanyForEdit(null);
          }}
          onSave={handleEditCompany}
          company={selectedCompanyForEdit}
        />

        {/* Version Creation Modal */}
        {showVersionModal && (
          <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
              <div className="flex items-center justify-between p-6 border-b border-gray-200">
                <h2 className="text-xl font-semibold text-gray-900">Vytvoriť novú verziu</h2>
                <button
                  onClick={() => setShowVersionModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <XMarkIcon className="h-6 w-6" />
                </button>
              </div>
              
              <div className="p-6 space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Názov verzie *
                  </label>
                  <input
                    type="text"
                    value={newVersionName}
                    onChange={(e) => setNewVersionName(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Napr. Verzia 2.0 - Nový dizajn"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Popis (voliteľné)
                  </label>
                  <textarea
                    value={newVersionDescription}
                    onChange={(e) => setNewVersionDescription(e.target.value)}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Popis zmien v tejto verzii..."
                  />
                </div>
              </div>
              
              <div className="flex justify-end space-x-3 p-6 border-t border-gray-200">
                <button
                  onClick={() => setShowVersionModal(false)}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                >
                  Zrušiť
                </button>
                <button
                  onClick={handleCreateVersion}
                  disabled={!newVersionName.trim()}
                  className="px-4 py-2 text-sm font-medium text-white bg-green-600 border border-transparent rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Vytvoriť verziu
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminDashboard;
