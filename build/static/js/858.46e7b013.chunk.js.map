{"version":3,"file":"static/js/858.46e7b013.chunk.js","mappings":"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","sources":["services/hrService.ts"],"sourcesContent":["import { apiService } from './apiService';\r\n\r\nexport interface Employee {\r\n  id: number;\r\n  company_id: number;\r\n  employee_id: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  phone?: string;\r\n  position: string;\r\n  department?: string;\r\n  hire_date: string;\r\n  salary?: number;\r\n  employment_type: 'full_time' | 'part_time' | 'contract' | 'intern';\r\n  status: 'active' | 'inactive' | 'terminated' | 'on_leave';\r\n  termination_date?: string;\r\n  termination_reason?: string;\r\n  manager_id?: number;\r\n  manager_first_name?: string;\r\n  manager_last_name?: string;\r\n  \r\n  // Pracovné pomery\r\n  employment_start_date?: string;\r\n  employment_end_date?: string;\r\n  attendance_mode?: 'manual' | 'automatic';\r\n  \r\n  // Personálne údaje\r\n  birth_name?: string;\r\n  title_before?: string;\r\n  title_after?: string;\r\n  gender?: 'muž' | 'žena';\r\n  birth_date?: string;\r\n  birth_number?: string;\r\n  birth_place?: string;\r\n  nationality?: string;\r\n  citizenship?: string;\r\n  education?: string;\r\n  marital_status?: string;\r\n  is_partner?: boolean;\r\n  is_statutory?: boolean;\r\n  employee_bonus?: boolean;\r\n  bonus_months?: number;\r\n  \r\n  // Adresa trvalého pobytu\r\n  permanent_street?: string;\r\n  permanent_number?: string;\r\n  permanent_city?: string;\r\n  permanent_zip?: string;\r\n  permanent_country?: string;\r\n  \r\n  // Kontaktná adresa\r\n  contact_street?: string;\r\n  contact_number?: string;\r\n  contact_city?: string;\r\n  contact_zip?: string;\r\n  contact_country?: string;\r\n  \r\n  // Cudzinecké údaje\r\n  is_foreigner?: boolean;\r\n  foreigner_country?: string;\r\n  residence_permit_number?: string;\r\n  social_insurance_sr?: string;\r\n  social_insurance_foreign?: string;\r\n  health_insurance_sr?: string;\r\n  foreigner_without_permanent_residence?: boolean;\r\n  tax_identification_number?: string;\r\n  \r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface Attendance {\r\n  id: number;\r\n  employee_id: number;\r\n  company_id: number;\r\n  date: string;\r\n  check_in?: string;\r\n  check_out?: string;\r\n  total_hours?: number;\r\n  break_minutes: number;\r\n  status: 'present' | 'absent' | 'late' | 'early_leave' | 'sick_leave' | 'vacation' | 'holiday';\r\n  notes?: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  employee_id_code: string;\r\n  employee_name?: string; // Pre zobrazenie všetkých zamestnancov\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface EmployeeAttendanceStatus {\r\n  id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  position: string;\r\n  email: string;\r\n  status: string;\r\n  attendance_mode: 'manual' | 'automatic' | null;\r\n  employment_start_date: string;\r\n  employment_end_date: string | null;\r\n  is_active: number;\r\n  today_status: 'present' | 'absent' | 'late' | 'early_leave' | 'sick_leave' | 'vacation' | 'holiday';\r\n  check_in: string | null;\r\n  check_out: string | null;\r\n  status_type: 'present' | 'absent' | 'late' | 'leave' | 'holiday' | 'weekend';\r\n  status_description: string;\r\n  is_weekend: boolean;\r\n  is_holiday: boolean;\r\n}\r\n\r\nexport interface LeaveRequest {\r\n  id: number;\r\n  employee_id: number;\r\n  company_id: number;\r\n  leave_type: 'vacation' | 'sick_leave' | 'personal_leave' | 'maternity_leave' | 'paternity_leave' | 'unpaid_leave';\r\n  start_date: string;\r\n  end_date: string;\r\n  total_days: number;\r\n  reason?: string;\r\n  status: 'pending' | 'approved' | 'rejected' | 'cancelled';\r\n  approved_by?: number;\r\n  approved_at?: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  employee_id_code: string;\r\n  approver_first_name?: string;\r\n  approver_last_name?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface WorkShift {\r\n  id: number;\r\n  company_id: number;\r\n  shift_name: string;\r\n  start_time: string;\r\n  end_time: string;\r\n  break_start?: string;\r\n  break_end?: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n}\r\n\r\nexport interface HREvent {\r\n  id: number;\r\n  company_id: number;\r\n  employee_id?: number;\r\n  event_type: 'hire' | 'termination' | 'promotion' | 'salary_change' | 'position_change' | 'warning' | 'recognition';\r\n  title: string;\r\n  description?: string;\r\n  event_date: string;\r\n  created_by: number;\r\n  first_name?: string;\r\n  last_name?: string;\r\n  employee_id_code?: string;\r\n  created_by_first_name: string;\r\n  created_by_last_name: string;\r\n  created_at: string;\r\n}\r\n\r\nexport interface HRStats {\r\n  employees: {\r\n    total_employees: number;\r\n    active_employees: number;\r\n    inactive_employees: number;\r\n    terminated_employees: number;\r\n    on_leave_employees: number;\r\n  };\r\n  attendance: {\r\n    total_attendance: number;\r\n    present_today: number;\r\n    absent_today: number;\r\n    late_today: number;\r\n  };\r\n  leave_requests: {\r\n    pending_leave_requests: number;\r\n  };\r\n}\r\n\r\nclass HRService {\r\n  // Zamestnanci\r\n  async getEmployees(companyId: number): Promise<Employee[]> {\r\n    return apiService.get(`/hr/employees/${companyId}`);\r\n  }\r\n\r\n  async addEmployee(employeeData: Omit<Employee, 'id' | 'created_at' | 'updated_at'>): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/employees', employeeData);\r\n  }\r\n\r\n  async updateEmployee(id: number, employeeData: Partial<Employee>): Promise<{ message: string }> {\r\n    return apiService.put(`/hr/employees/${id}`, employeeData);\r\n  }\r\n\r\n  // Dochádzka\r\n  async getAttendance(companyId: number, employeeId?: number, startDate?: string, endDate?: string): Promise<Attendance[]> {\r\n    let url = `/hr/attendance/${companyId}`;\r\n    \r\n    const params = new URLSearchParams();\r\n    if (employeeId) params.append('employeeId', employeeId.toString());\r\n    if (startDate) params.append('startDate', startDate);\r\n    if (endDate) params.append('endDate', endDate);\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n    \r\n    return apiService.get(url);\r\n  }\r\n\r\n  async checkAttendanceDuplicates(companyId: number, employeeId?: number, startDate?: string, endDate?: string): Promise<any> {\r\n    let url = `/hr/attendance/check-duplicates/${companyId}`;\r\n    \r\n    const params = new URLSearchParams();\r\n    if (employeeId) params.append('employeeId', employeeId.toString());\r\n    if (startDate) params.append('startDate', startDate);\r\n    if (endDate) params.append('endDate', endDate);\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n    \r\n    return apiService.get(url);\r\n  }\r\n\r\n  async addAttendance(attendanceData: Omit<Attendance, 'id' | 'created_at' | 'updated_at' | 'first_name' | 'last_name' | 'employee_id_code'>): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/attendance', attendanceData);\r\n  }\r\n\r\n  // Dovolenky\r\n  async getLeaveRequests(companyId: number, status?: string, employeeId?: number): Promise<LeaveRequest[]> {\r\n    let url = `/hr/leave-requests/${companyId}`;\r\n    const params = new URLSearchParams();\r\n    if (status) {\r\n      params.append('status', status);\r\n    }\r\n    if (employeeId) {\r\n      params.append('employee_id', employeeId.toString());\r\n    }\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n    return apiService.get(url);\r\n  }\r\n\r\n  async addLeaveRequest(leaveData: Omit<LeaveRequest, 'id' | 'created_at' | 'updated_at' | 'first_name' | 'last_name' | 'employee_id_code' | 'approver_first_name' | 'approver_last_name'>): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/leave-requests', leaveData);\r\n  }\r\n\r\n  async updateLeaveRequestStatus(id: number, status: string, approvedBy: number): Promise<{ message: string }> {\r\n    return apiService.put(`/hr/leave-requests/${id}/status`, { status, approved_by: approvedBy });\r\n  }\r\n\r\n  // Pracovné zmeny\r\n  async getWorkShifts(companyId: number): Promise<WorkShift[]> {\r\n    return apiService.get(`/hr/work-shifts/${companyId}`);\r\n  }\r\n\r\n  async addWorkShift(shiftData: Omit<WorkShift, 'id' | 'created_at'>): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/work-shifts', shiftData);\r\n  }\r\n\r\n  // HR udalosti\r\n  async getHREvents(companyId: number, eventType?: string, employeeId?: number): Promise<HREvent[]> {\r\n    let url = `/hr/hr-events/${companyId}`;\r\n    const params = new URLSearchParams();\r\n    if (eventType) params.append('event_type', eventType);\r\n    if (employeeId) params.append('employee_id', employeeId.toString());\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n    \r\n    return apiService.get(url);\r\n  }\r\n\r\n  async addHREvent(eventData: Omit<HREvent, 'id' | 'created_at' | 'first_name' | 'last_name' | 'employee_id_code' | 'created_by_first_name' | 'created_by_last_name'>): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/hr-events', eventData);\r\n  }\r\n\r\n  // Hľadanie zamestnanca podľa emailu\r\n  async findEmployeeByEmail(email: string): Promise<Employee> {\r\n    return apiService.get(`/hr/employees/find/${encodeURIComponent(email)}`);\r\n  }\r\n\r\n  // Aktualizácia company_id zamestnanca\r\n  async updateEmployeeCompany(employeeId: number, companyId: number): Promise<{ message: string }> {\r\n    return apiService.put(`/hr/employees/${employeeId}/company`, { company_id: companyId });\r\n  }\r\n\r\n  // Štatistiky\r\n  async getHRStats(companyId: number): Promise<HRStats> {\r\n    return apiService.get(`/hr/hr-stats/${companyId}`);\r\n  }\r\n\r\n  // Pomocné funkcie\r\n  getEmploymentTypeLabel(type: string): string {\r\n    const types = {\r\n      'full_time': 'Plný úväzok',\r\n      'part_time': 'Čiastočný úväzok',\r\n      'contract': 'Dohoda',\r\n      'intern': 'Stáž'\r\n    };\r\n    return types[type as keyof typeof types] || type;\r\n  }\r\n\r\n  getStatusLabel(status: string): string {\r\n    const statuses = {\r\n      'active': 'Aktívny',\r\n      'inactive': 'Neaktívny',\r\n      'terminated': 'Ukončený',\r\n      'on_leave': 'Na dovolenke'\r\n    };\r\n    return statuses[status as keyof typeof statuses] || status;\r\n  }\r\n\r\n  getLeaveTypeLabel(type: string): string {\r\n    const types = {\r\n      'vacation': 'Dovolenka',\r\n      'sick_leave': 'PN',\r\n      'personal_leave': 'Osobné voľno',\r\n      'maternity_leave': 'Materská dovolenka',\r\n      'paternity_leave': 'Otcovská dovolenka',\r\n      'unpaid_leave': 'Neplatené voľno'\r\n    };\r\n    return types[type as keyof typeof types] || type;\r\n  }\r\n\r\n  getEventTypeLabel(type: string): string {\r\n    const types = {\r\n      'hire': 'Nábor',\r\n      'termination': 'Ukončenie',\r\n      'promotion': 'Povýšenie',\r\n      'salary_change': 'Zmena mzdy',\r\n      'position_change': 'Zmena pozície',\r\n      'warning': 'Upozornenie',\r\n      'recognition': 'Uznanie'\r\n    };\r\n    return types[type as keyof typeof types] || type;\r\n  }\r\n\r\n  getAttendanceStatusLabel(status: string): string {\r\n    const statuses = {\r\n      'present': 'Prítomný',\r\n      'absent': 'Neprítomný',\r\n      'late': 'Meškanie',\r\n      'early_leave': 'Predčasný odchod',\r\n      'sick_leave': 'PN',\r\n      'vacation': 'Dovolenka',\r\n      'holiday': 'Sviatok'\r\n    };\r\n    return statuses[status as keyof typeof statuses] || status;\r\n  }\r\n\r\n  calculateWorkHours(checkIn: string, checkOut: string): number {\r\n    if (!checkIn || !checkOut) return 0;\r\n    \r\n    const start = new Date(`2000-01-01T${checkIn}`);\r\n    const end = new Date(`2000-01-01T${checkOut}`);\r\n    \r\n    const diffMs = end.getTime() - start.getTime();\r\n    const diffHours = diffMs / (1000 * 60 * 60);\r\n    \r\n    return Math.round(diffHours * 100) / 100;\r\n  }\r\n\r\n  formatTime(time: string): string {\r\n    if (!time) return '';\r\n    return time.substring(0, 5); // Zobrazí len HH:MM\r\n  }\r\n\r\n  formatDate(date: string): string {\r\n    return new Date(date).toLocaleDateString('sk-SK');\r\n  }\r\n\r\n  formatDateTime(dateTime: string): string {\r\n    return new Date(dateTime).toLocaleString('sk-SK');\r\n  }\r\n\r\n  // API pre správu zmien personálnych údajov\r\n  async createEmployeeChange(changeData: {\r\n    employee_id: number;\r\n    field_name: string;\r\n    current_value: string;\r\n    new_value: string;\r\n    reason: string;\r\n    company_id: number;\r\n  }): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/employee-changes', changeData);\r\n  }\r\n\r\n  async getEmployeeChanges(employeeId: number): Promise<any[]> {\r\n    return apiService.get(`/hr/employee-changes/${employeeId}`);\r\n  }\r\n\r\n  async getCompanyChanges(companyId: number): Promise<any[]> {\r\n    return apiService.get(`/hr/company-changes/${companyId}`);\r\n  }\r\n\r\n  async approveEmployeeChange(changeId: number, approvedBy: number): Promise<{ message: string }> {\r\n    return apiService.patch(`/hr/employee-changes/${changeId}`, { status: 'approved', approved_by: approvedBy });\r\n  }\r\n\r\n  async rejectEmployeeChange(changeId: number, approvedBy: number): Promise<{ message: string }> {\r\n    return apiService.patch(`/hr/employee-changes/${changeId}`, { status: 'rejected', approved_by: approvedBy });\r\n  }\r\n\r\n  async updateEmployeeField(employeeId: number, fieldName: string, newValue: string): Promise<{ message: string }> {\r\n    return apiService.patch(`/hr/employees/${employeeId}/update-field`, { field_name: fieldName, new_value: newValue });\r\n  }\r\n\r\n  // Dochádzkové nastavenia\r\n  async getAttendanceSettings(employeeId: number): Promise<any> {\r\n    return apiService.get(`/hr/attendance-settings/${employeeId}`);\r\n  }\r\n\r\n  async createAutomaticAttendance(companyId: number, date: string): Promise<{ message: string; results: any[] }> {\r\n    return apiService.post('/hr/attendance/auto-create', { companyId, date });\r\n  }\r\n\r\n  // Aktualizácia dochádzky s typom\r\n  async addAttendanceWithType(attendanceData: Omit<Attendance, 'id' | 'created_at' | 'updated_at' | 'first_name' | 'last_name' | 'employee_id_code'> & { attendance_type: 'manual' | 'automatic' }): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/attendance', attendanceData);\r\n  }\r\n\r\n  // Pracovné pomery\r\n  async getEmploymentRelations(companyId: number): Promise<any[]> {\r\n    return apiService.get(`/hr/employment-relations/${companyId}`);\r\n  }\r\n\r\n  async addEmploymentRelation(relationData: {\r\n    employee_id: number;\r\n    company_id: number;\r\n    position: string;\r\n    employment_type?: 'full_time' | 'part_time' | 'contract' | 'intern';\r\n    employment_start_date: string;\r\n    employment_end_date?: string;\r\n    salary?: number;\r\n    weekly_hours?: number;\r\n    attendance_mode?: 'manual' | 'automatic';\r\n    work_start_time?: string;\r\n    work_end_time?: string;\r\n    break_start_time?: string;\r\n    break_end_time?: string;\r\n    is_active?: boolean;\r\n  }): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/employment-relations', relationData);\r\n  }\r\n\r\n  async updateEmploymentRelation(id: number, relationData: {\r\n    position?: string;\r\n    employment_type?: 'full_time' | 'part_time' | 'contract' | 'intern';\r\n    employment_start_date?: string;\r\n    employment_end_date?: string;\r\n    salary?: number;\r\n    weekly_hours?: number;\r\n    attendance_mode?: 'manual' | 'automatic';\r\n    work_start_time?: string;\r\n    work_end_time?: string;\r\n    break_start_time?: string;\r\n    break_end_time?: string;\r\n    is_active?: boolean;\r\n  }): Promise<{ message: string }> {\r\n    return apiService.put(`/hr/employment-relations/${id}`, relationData);\r\n  }\r\n\r\n  // Automatické prepočítanie dochádzky\r\n  async getEmployeesWithAutomaticAttendance(companyId: number): Promise<any[]> {\r\n    return apiService.get(`/hr/employees/automatic-attendance/${companyId}`);\r\n  }\r\n\r\n  async processAutomaticAttendance(\r\n    companyId: number, \r\n    employeeIds: number[], \r\n    startDate: string, \r\n    endDate: string\r\n  ): Promise<{ message: string; results: any[] }> {\r\n    return apiService.post('/hr/attendance/process-automatic', {\r\n      companyId,\r\n      employeeIds,\r\n      startDate,\r\n      endDate\r\n    });\r\n  }\r\n\r\n  // Získanie prítomných zamestnancov dnes\r\n  async getPresentEmployeesToday(companyId: number): Promise<Attendance[]> {\r\n    return apiService.get(`/hr/attendance/present-today/${companyId}`);\r\n  }\r\n\r\n  // Získanie neprítomných zamestnancov dnes\r\n  async getAbsentEmployeesToday(companyId: number): Promise<any[]> {\r\n    return apiService.get(`/hr/attendance/absent-today/${companyId}`);\r\n  }\r\n\r\n  // Získanie všetkých aktívnych zamestnancov s informáciou o dochádzke\r\n  async getEmployeesAttendanceStatus(companyId: number): Promise<EmployeeAttendanceStatus[]> {\r\n    return apiService.get(`/hr/employees/attendance-status/${companyId}`);\r\n  }\r\n\r\n  // Získanie zamestnancov s chýbajúcou dochádzkou\r\n  async getEmployeesWithMissingAttendance(companyId: number): Promise<any[]> {\r\n    return apiService.get(`/hr/employees/missing-attendance/${companyId}`);\r\n  }\r\n\r\n  // Zaznamenanie dochádzky\r\n  async recordAttendance(attendanceData: {\r\n    employee_id: number;\r\n    company_id: number;\r\n    date: string;\r\n    attendance_type: 'present' | 'absent' | 'leave' | 'sick_leave';\r\n    start_time?: string | null;\r\n    end_time?: string | null;\r\n    break_minutes?: number;\r\n    note?: string;\r\n    recorded_by: string;\r\n  }): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/attendance/record', attendanceData);\r\n  }\r\n}\r\n\r\nexport const hrService = new HRService();\r\n"],"names":["hrService","getEmployees","companyId","apiService","get","concat","addEmployee","employeeData","post","updateEmployee","id","put","getAttendance","employeeId","startDate","endDate","url","params","URLSearchParams","append","toString","checkAttendanceDuplicates","addAttendance","attendanceData","getLeaveRequests","status","addLeaveRequest","leaveData","updateLeaveRequestStatus","approvedBy","approved_by","getWorkShifts","addWorkShift","shiftData","getHREvents","eventType","addHREvent","eventData","findEmployeeByEmail","email","encodeURIComponent","updateEmployeeCompany","company_id","getHRStats","getEmploymentTypeLabel","type","getStatusLabel","getLeaveTypeLabel","getEventTypeLabel","getAttendanceStatusLabel","calculateWorkHours","checkIn","checkOut","start","Date","diffHours","getTime","Math","round","formatTime","time","substring","formatDate","date","toLocaleDateString","formatDateTime","dateTime","toLocaleString","createEmployeeChange","changeData","getEmployeeChanges","getCompanyChanges","approveEmployeeChange","changeId","patch","rejectEmployeeChange","updateEmployeeField","fieldName","newValue","field_name","new_value","getAttendanceSettings","createAutomaticAttendance","addAttendanceWithType","getEmploymentRelations","addEmploymentRelation","relationData","updateEmploymentRelation","getEmployeesWithAutomaticAttendance","processAutomaticAttendance","employeeIds","getPresentEmployeesToday","getAbsentEmployeesToday","getEmployeesAttendanceStatus","getEmployeesWithMissingAttendance","recordAttendance"],"sourceRoot":""}