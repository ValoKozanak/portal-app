"use strict";(self.webpackChunkclient_portal_frontend=self.webpackChunkclient_portal_frontend||[]).push([[605],{92605:(e,t,a)=>{a.r(t),a.d(t,{hrService:()=>r});var n=a(50237);const r=new class{async getEmployees(e){return n.apiService.get("/hr/employees/".concat(e))}async addEmployee(e){return n.apiService.post("/hr/employees",e)}async updateEmployee(e,t){return n.apiService.put("/hr/employees/".concat(e),t)}async deleteEmployee(e){return n.apiService.delete("/hr/employees/".concat(e))}async getAttendance(e,t,a,r){let c="/hr/attendance/".concat(e);const o=new URLSearchParams;return t&&o.append("employeeId",t.toString()),a&&o.append("startDate",a),r&&o.append("endDate",r),o.toString()&&(c+="?".concat(o.toString())),n.apiService.get(c)}async checkAttendanceDuplicates(e,t,a,r){let c="/hr/attendance/check-duplicates/".concat(e);const o=new URLSearchParams;return t&&o.append("employeeId",t.toString()),a&&o.append("startDate",a),r&&o.append("endDate",r),o.toString()&&(c+="?".concat(o.toString())),n.apiService.get(c)}async addAttendance(e){return n.apiService.post("/hr/attendance",e)}async getLeaveRequests(e,t,a){let r="/hr/leave-requests/".concat(e);const c=new URLSearchParams;return t&&c.append("status",t),a&&c.append("employee_id",a.toString()),c.toString()&&(r+="?".concat(c.toString())),n.apiService.get(r)}async addLeaveRequest(e){return n.apiService.post("/hr/leave-requests",e)}async updateLeaveRequestStatus(e,t,a){return n.apiService.put("/hr/leave-requests/".concat(e,"/status"),{status:t,approved_by:a})}async getWorkShifts(e){return n.apiService.get("/hr/work-shifts/".concat(e))}async addWorkShift(e){return n.apiService.post("/hr/work-shifts",e)}async getHREvents(e,t,a){let r="/hr/hr-events/".concat(e);const c=new URLSearchParams;return t&&c.append("event_type",t),a&&c.append("employee_id",a.toString()),c.toString()&&(r+="?".concat(c.toString())),n.apiService.get(r)}async addHREvent(e){return n.apiService.post("/hr/hr-events",e)}async findEmployeeByEmail(e){return n.apiService.get("/hr/employees/find/".concat(encodeURIComponent(e)))}async updateEmployeeCompany(e,t){return n.apiService.put("/hr/employees/".concat(e,"/company"),{company_id:t})}async getHRStats(e){return n.apiService.get("/hr/hr-stats/".concat(e))}getEmploymentTypeLabel(e){return{full_time:"Pln\xfd \xfav\xe4zok",part_time:"\u010ciasto\u010dn\xfd \xfav\xe4zok",contract:"Dohoda",intern:"St\xe1\u017e"}[e]||e}getStatusLabel(e){return{active:"Akt\xedvny",inactive:"Neakt\xedvny",terminated:"Ukon\u010den\xfd",on_leave:"Na dovolenke"}[e]||e}getLeaveTypeLabel(e){return{vacation:"Dovolenka",sick_leave:"PN",personal_leave:"Osobn\xe9 vo\u013eno",maternity_leave:"Matersk\xe1 dovolenka",paternity_leave:"Otcovsk\xe1 dovolenka",unpaid_leave:"Neplaten\xe9 vo\u013eno"}[e]||e}getEventTypeLabel(e){return{hire:"N\xe1bor",termination:"Ukon\u010denie",promotion:"Pov\xfd\u0161enie",salary_change:"Zmena mzdy",position_change:"Zmena poz\xedcie",warning:"Upozornenie",recognition:"Uznanie"}[e]||e}getAttendanceStatusLabel(e){return{present:"Pr\xedtomn\xfd",absent:"Nepr\xedtomn\xfd",late:"Me\u0161kanie",early_leave:"Pred\u010dasn\xfd odchod",sick_leave:"PN",vacation:"Dovolenka",holiday:"Sviatok"}[e]||e}calculateWorkHours(e,t){if(!e||!t)return 0;const a=new Date("2000-01-01T".concat(e)),n=(new Date("2000-01-01T".concat(t)).getTime()-a.getTime())/36e5;return Math.round(100*n)/100}formatTime(e){return e?e.substring(0,5):""}formatDate(e){return new Date(e).toLocaleDateString("sk-SK")}formatDateTime(e){return new Date(e).toLocaleString("sk-SK")}async createEmployeeChange(e){return n.apiService.post("/hr/employee-changes",e)}async getEmployeeChanges(e){return n.apiService.get("/hr/employee-changes/".concat(e))}async getCompanyChanges(e){return n.apiService.get("/hr/company-changes/".concat(e))}async approveEmployeeChange(e,t){return n.apiService.patch("/hr/employee-changes/".concat(e),{status:"approved",approved_by:t})}async rejectEmployeeChange(e,t){return n.apiService.patch("/hr/employee-changes/".concat(e),{status:"rejected",approved_by:t})}async updateEmployeeField(e,t,a){return n.apiService.patch("/hr/employees/".concat(e,"/update-field"),{field_name:t,new_value:a})}async getAttendanceSettings(e){return n.apiService.get("/hr/attendance-settings/".concat(e))}async createAutomaticAttendance(e,t){return n.apiService.post("/hr/attendance/auto-create",{companyId:e,date:t})}async addAttendanceWithType(e){return n.apiService.post("/hr/attendance",e)}async updateAttendanceDay(e){return n.apiService.put("/hr/attendance/day",e)}async getEmploymentRelations(e){return n.apiService.get("/hr/employment-relations/".concat(e))}async addEmploymentRelation(e){return n.apiService.post("/hr/employment-relations",e)}async updateEmploymentRelation(e,t){return n.apiService.put("/hr/employment-relations/".concat(e),t)}async getEmployeesWithAutomaticAttendance(e){return n.apiService.get("/hr/employees/automatic-attendance/".concat(e))}async processAutomaticAttendance(e,t,a,r){return n.apiService.post("/hr/attendance/process-automatic",{companyId:e,employeeIds:t,startDate:a,endDate:r})}async getPresentEmployeesToday(e){return n.apiService.get("/hr/attendance/present-today/".concat(e))}async getAbsentEmployeesToday(e){return n.apiService.get("/hr/attendance/absent-today/".concat(e))}async getEmployeesAttendanceStatus(e){return n.apiService.get("/hr/employees/attendance-status/".concat(e))}async getEmployeesWithMissingAttendance(e){return n.apiService.get("/hr/employees/missing-attendance/".concat(e))}async recordAttendance(e){return n.apiService.post("/hr/attendance/record",e)}}}}]);