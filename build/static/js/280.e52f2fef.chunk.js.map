{"version":3,"file":"static/js/280.e52f2fef.chunk.js","mappings":"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","sources":["services/accountingService.ts","../node_modules/@heroicons/react/24/outline/esm/FunnelIcon.js","../node_modules/@heroicons/react/24/outline/esm/ArrowLeftIcon.js","../node_modules/@heroicons/react/24/outline/esm/BanknotesIcon.js","pages/CashTransactionsPage.tsx"],"sourcesContent":["import { apiService, ApiResponse } from './apiService';\r\n\r\n// ===== ÚČTOVNÍCTVO SERVICE =====\r\n\r\nexport interface AccountingSettings {\r\n  id?: number;\r\n  company_id: number;\r\n  pohoda_enabled: boolean;\r\n  pohoda_url?: string;\r\n  pohoda_username?: string;\r\n  pohoda_password?: string;\r\n  pohoda_ico?: string;\r\n  pohoda_year?: string;\r\n  auto_sync: boolean;\r\n  sync_frequency: 'hourly' | 'daily' | 'weekly' | 'manual';\r\n  last_sync?: string;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\nexport interface AccountingPermissions {\r\n  id?: number;\r\n  user_email: string;\r\n  company_id: number;\r\n  can_view_invoices: boolean;\r\n  can_create_invoices: boolean;\r\n  can_edit_invoices: boolean;\r\n  can_delete_invoices: boolean;\r\n  can_view_bank: boolean;\r\n  can_edit_bank: boolean;\r\n  can_view_cash: boolean;\r\n  can_edit_cash: boolean;\r\n  can_view_reports: boolean;\r\n  can_export_data: boolean;\r\n  can_manage_settings: boolean;\r\n  granted_by: string;\r\n  granted_at?: string;\r\n}\r\n\r\nexport interface FinancialAnalysis {\r\n  expenses: {\r\n    total: number;\r\n    count: number;\r\n    details: Array<{\r\n      account: string;\r\n      account_name: string;\r\n      amount: number;\r\n      count: number;\r\n    }>;\r\n  };\r\n  revenue: {\r\n    total: number;\r\n    count: number;\r\n    details: Array<{\r\n      account: string;\r\n      account_name: string;\r\n      amount: number;\r\n      count: number;\r\n    }>;\r\n  };\r\n  profit: number;\r\n  isProfit: boolean;\r\n  filters?: {\r\n    dateFrom: string | null;\r\n    dateTo: string | null;\r\n  };\r\n}\r\n\r\nexport interface InvoiceItem {\r\n  id?: number;\r\n  description: string;\r\n  quantity: number;\r\n  unit_price: number;\r\n  vat_rate: number;\r\n  total_price: number;\r\n  vat_amount: number;\r\n  unit?: string;\r\n}\r\n\r\nexport interface IssuedInvoice {\r\n  id?: number;\r\n  company_id: number;\r\n  invoice_number: string;\r\n  customer_name: string;\r\n  customer_ico?: string;\r\n  customer_dic?: string;\r\n  customer_address?: string;\r\n  issue_date: string;\r\n  due_date: string;\r\n  total_amount: number;\r\n  vat_amount: number;\r\n  \r\n  // MDB polia - základy DPH\r\n  kc0?: number;\r\n  kc1?: number;\r\n  kc2?: number;\r\n  kc3?: number;\r\n  \r\n  // MDB polia - DPH\r\n  kc_dph1?: number;\r\n  kc_dph2?: number;\r\n  kc_dph3?: number;\r\n  \r\n  // MDB polia - celkové sumy\r\n  kc_celkem?: number;\r\n  \r\n  // MDB polia - ďalšie informácie\r\n  var_sym?: string;\r\n  s_text?: string;\r\n  mdb_id?: number;\r\n  rel_tp_fak?: number;\r\n  datum?: string;\r\n  dat_splat?: string;\r\n  firma?: string;\r\n  ico?: string;\r\n  dic?: string;\r\n  ulice?: string;\r\n  psc?: string;\r\n  obec?: string;\r\n  mdb_cislo?: string;\r\n  \r\n  // MDB polia - likvidácia a platby\r\n  kc_likv?: number;\r\n  kc_u?: number;\r\n  dat_likv?: string;\r\n  \r\n  currency: string;\r\n  status: 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled';\r\n  pohoda_id?: string;\r\n  notes?: string;\r\n  created_by: string;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n  items?: InvoiceItem[];\r\n}\r\n\r\nexport interface ReceivedInvoice {\r\n  id?: number;\r\n  company_id: number;\r\n  invoice_number: string;\r\n  supplier_name: string;\r\n  supplier_ico?: string;\r\n  supplier_dic?: string;\r\n  supplier_address?: string;\r\n  issue_date: string;\r\n  due_date: string;\r\n  total_amount: number;\r\n  vat_amount: number;\r\n  \r\n  // MDB polia - základy DPH\r\n  kc0?: number;\r\n  kc1?: number;\r\n  kc2?: number;\r\n  kc3?: number;\r\n  \r\n  // MDB polia - DPH\r\n  kc_dph1?: number;\r\n  kc_dph2?: number;\r\n  kc_dph3?: number;\r\n  \r\n  // MDB polia - celkové sumy\r\n  kc_celkem?: number;\r\n  \r\n  // MDB polia - ďalšie informácie\r\n  var_sym?: string;\r\n  s_text?: string;\r\n  mdb_id?: number;\r\n  rel_tp_fak?: number;\r\n  datum?: string;\r\n  dat_splat?: string;\r\n  firma?: string;\r\n  ico?: string;\r\n  dic?: string;\r\n  ulice?: string;\r\n  psc?: string;\r\n  obec?: string;\r\n  mdb_cislo?: string;\r\n  \r\n  // MDB polia - likvidácia a platby\r\n  kc_likv?: number;\r\n  kc_u?: number;\r\n  dat_likv?: string;\r\n  \r\n  currency: string;\r\n  status: 'received' | 'approved' | 'paid' | 'overdue' | 'disputed';\r\n  pohoda_id?: string;\r\n  notes?: string;\r\n  created_by: string;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n  items?: InvoiceItem[];\r\n}\r\n\r\nexport interface BankTransaction {\r\n  id?: number;\r\n  company_id: number;\r\n  transaction_date: string;\r\n  description: string;\r\n  amount: number;\r\n  currency: string;\r\n  type: 'income' | 'expense';\r\n  category?: string;\r\n  bank_account?: string;\r\n  reference?: string;\r\n  pohoda_id?: string;\r\n  notes?: string;\r\n  created_by: string;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\nexport interface CashTransaction {\r\n  id?: number;\r\n  company_id: number;\r\n  transaction_date: string;\r\n  description: string;\r\n  amount: number;\r\n  currency: string;\r\n  type: 'income' | 'expense';\r\n  category?: string;\r\n  receipt_number?: string;\r\n  pohoda_id?: string;\r\n  notes?: string;\r\n  created_by: string;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\n\r\n\r\nexport interface AccountingStats {\r\n  issued_invoices: {\r\n    total_count: number;\r\n    total_amount: number;\r\n    paid_amount: number;\r\n    overdue_amount: number;\r\n  };\r\n  received_invoices: {\r\n    total_count: number;\r\n    total_amount: number;\r\n    paid_amount: number;\r\n    overdue_amount: number;\r\n  };\r\n  bank: {\r\n    total_income: number;\r\n    total_expense: number;\r\n  };\r\n  cash: {\r\n    total_income: number;\r\n    total_expense: number;\r\n  };\r\n}\r\n\r\nexport class AccountingService {\r\n  // 1. NASTAVENIA ÚČTOVNÍCTVA\r\n\r\n    async getSettings(companyId: number): Promise<AccountingSettings> {\r\n    const response = await apiService.get(`/accounting/settings/${companyId}`); \r\n    return response as AccountingSettings;\r\n  }\r\n\r\n  async saveSettings(companyId: number, settings: Partial<AccountingSettings>): Promise<any> {\r\n    const response = await apiService.post(`/accounting/settings/${companyId}`, settings);\r\n    return response;\r\n  }\r\n\r\n  // 2. PRÁVA PRE ÚČTOVNÍCTVO\r\n\r\n  async getPermissions(companyId: number, userEmail: string): Promise<AccountingPermissions> {\r\n    const response = await apiService.get(`/accounting/permissions/${companyId}/${userEmail}`);\r\n    return response as AccountingPermissions;\r\n  }\r\n\r\n  async savePermissions(companyId: number, permissions: Partial<AccountingPermissions>): Promise<any> {\r\n    const response = await apiService.post(`/accounting/permissions/${companyId}`, permissions);\r\n    return response;\r\n  }\r\n\r\n  async getAllPermissions(companyId: number): Promise<AccountingPermissions[]> {\r\n    const response = await apiService.get(`/accounting/permissions/${companyId}`);\r\n    return response as AccountingPermissions[];\r\n  }\r\n\r\n  // 3. VYDANÉ FAKTÚRY\r\n\r\n  async getIssuedInvoices(\r\n    companyId: number, \r\n    filters?: {\r\n      status?: string;\r\n      date_from?: string;\r\n      date_to?: string;\r\n      limit?: number;\r\n      offset?: number;\r\n    }\r\n  ): Promise<IssuedInvoice[]> {\r\n    const params = new URLSearchParams();\r\n    if (filters) {\r\n      Object.entries(filters).forEach(([key, value]) => {\r\n        if (value !== undefined) {\r\n          params.append(key, value.toString());\r\n        }\r\n      });\r\n    }\r\n    \r\n    const response = await apiService.get(`/accounting/issued-invoices/${companyId}?${params}`);\r\n    return response as IssuedInvoice[];\r\n  }\r\n\r\n  async createIssuedInvoice(companyId: number, invoice: Partial<IssuedInvoice>): Promise<any> {\r\n    const response = await apiService.post(`/accounting/issued-invoices/${companyId}`, invoice);\r\n    return response;\r\n  }\r\n\r\n  async getIssuedInvoiceById(invoiceId: number): Promise<IssuedInvoice> {\r\n    const response = await apiService.get(`/accounting/issued-invoices/detail/${invoiceId}`);\r\n    return response as IssuedInvoice;\r\n  }\r\n\r\n\r\n\r\n  // 4. PRIJATÉ FAKTÚRY\r\n\r\n  async getReceivedInvoices(\r\n    companyId: number, \r\n    filters?: {\r\n      status?: string;\r\n      date_from?: string;\r\n      date_to?: string;\r\n      limit?: number;\r\n      offset?: number;\r\n    }\r\n  ): Promise<ReceivedInvoice[]> {\r\n    const params = new URLSearchParams();\r\n    if (filters) {\r\n      Object.entries(filters).forEach(([key, value]) => {\r\n        if (value !== undefined) {\r\n          params.append(key, value.toString());\r\n        }\r\n      });\r\n    }\r\n    \r\n    const response = await apiService.get(`/accounting/received-invoices/${companyId}?${params}`);\r\n    return response as ReceivedInvoice[];\r\n  }\r\n\r\n  async getReceivedInvoiceById(invoiceId: number): Promise<ReceivedInvoice> {\r\n    const response = await apiService.get(`/accounting/received-invoices/detail/${invoiceId}`);\r\n    return response as ReceivedInvoice;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // 7. HOSPODÁRSKE VÝSLEDKY (pUD)\r\n\r\n  async getPudSummary(companyId: number): Promise<{ total_kc: number; total_count: number }> {\r\n    const response = await apiService.get(`/accounting/pud-summary/${companyId}`);\r\n    return response as { total_kc: number; total_count: number };\r\n  }\r\n\r\n  // Získanie podrobnej analýzy nákladov a výnosov\r\n  async getFinancialAnalysis(companyId: number, dateFrom?: string, dateTo?: string): Promise<FinancialAnalysis> {\r\n    let url = `/accounting/financial-analysis/${companyId}`;\r\n    const params = new URLSearchParams();\r\n    \r\n    if (dateFrom) params.append('dateFrom', dateFrom);\r\n    if (dateTo) params.append('dateTo', dateTo);\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n    \r\n    const response = await apiService.get(url);\r\n    return response as FinancialAnalysis;\r\n  }\r\n\r\n  // 8. ŠTATISTIKY\r\n\r\n  async getStats(\r\n    companyId: number, \r\n    filters?: {\r\n      year?: number;\r\n      month?: number;\r\n    }\r\n  ): Promise<AccountingStats> {\r\n    const params = new URLSearchParams();\r\n    if (filters) {\r\n      Object.entries(filters).forEach(([key, value]) => {\r\n        if (value !== undefined) {\r\n          params.append(key, value.toString());\r\n        }\r\n      });\r\n    }\r\n    \r\n    const response = await apiService.get(`/accounting/stats/${companyId}?${params}`);\r\n    return response as AccountingStats;\r\n  }\r\n\r\n  // 8. POMOCNÉ METÓDY\r\n\r\n  formatCurrency(amount: number, currency: string = 'EUR'): string {\r\n    return new Intl.NumberFormat('sk-SK', {\r\n      style: 'currency',\r\n      currency: currency\r\n    }).format(amount);\r\n  }\r\n\r\n  formatDate(date: string): string {\r\n    return new Date(date).toLocaleDateString('sk-SK');\r\n  }\r\n\r\n  getStatusBadge(status: string): { text: string; color: string } {\r\n    const statusMap: Record<string, { text: string; color: string }> = {\r\n      // Vydané faktúry\r\n      draft: { text: 'Koncept', color: 'bg-gray-100 text-gray-800' },\r\n      sent: { text: 'Odoslaná', color: 'bg-blue-100 text-blue-800' },\r\n      paid: { text: 'Zaplatená', color: 'bg-green-100 text-green-800' },\r\n      overdue: { text: 'Po splatnosti', color: 'bg-red-100 text-red-800' },\r\n      cancelled: { text: 'Zrušená', color: 'bg-yellow-100 text-yellow-800' },\r\n      \r\n      // Prijaté faktúry\r\n      received: { text: 'Prijatá', color: 'bg-gray-100 text-gray-800' },\r\n      approved: { text: 'Schválená', color: 'bg-blue-100 text-blue-800' },\r\n      disputed: { text: 'Sporná', color: 'bg-orange-100 text-orange-800' }\r\n    };\r\n\r\n    return statusMap[status] || { text: status, color: 'bg-gray-100 text-gray-800' };\r\n  }\r\n\r\n  getTypeBadge(type: string): { text: string; color: string } {\r\n    const typeMap: Record<string, { text: string; color: string }> = {\r\n      income: { text: 'Príjem', color: 'bg-green-100 text-green-800' },\r\n      expense: { text: 'Výdavok', color: 'bg-red-100 text-red-800' }\r\n    };\r\n\r\n    return typeMap[type] || { text: type, color: 'bg-gray-100 text-gray-800' };\r\n  }\r\n\r\n  // 9. POHODA INTEGRÁCIA\r\n\r\n  // Test POHODA connection\r\n  async testPohodaConnection(companyId: number, settings: Partial<AccountingSettings>): Promise<ApiResponse> {\r\n    return await apiService.post('/accounting/test-pohoda-connection', {\r\n      companyId,\r\n      ...settings\r\n    });\r\n  }\r\n\r\n  // Test POHODA invoices\r\n  async testPohodaInvoices(companyId: number, settings: Partial<AccountingSettings>): Promise<ApiResponse> {\r\n    return await apiService.post('/accounting/test-pohoda-invoices', {\r\n      companyId,\r\n      ...settings\r\n    });\r\n  }\r\n\r\n  // Sync POHODA invoices\r\n  async syncPohodaInvoices(companyId: number, dateFrom?: string, dateTo?: string): Promise<ApiResponse> {\r\n    return await apiService.post(`/accounting/sync-pohoda-invoices/${companyId}`, {\r\n      dateFrom,\r\n      dateTo\r\n    });\r\n  }\r\n\r\n  // 10. XML IMPORT/EXPORT\r\n\r\n  // Upload POHODA XML file\r\n  async uploadPohodaXml(companyId: number, file: File): Promise<ApiResponse> {\r\n    const formData = new FormData();\r\n    formData.append('xmlFile', file);\r\n    \r\n    // Používame fetch priamo pre FormData\r\n    const response = await fetch(`http://localhost:5000/api/accounting/upload-pohoda-xml/${companyId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n      },\r\n      body: formData\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Chyba pri nahrávaní XML súboru');\r\n    }\r\n    \r\n    return await response.json();\r\n  }\r\n\r\n  // Export invoices to POHODA XML format\r\n  async exportPohodaXml(companyId: number, dateFrom?: string, dateTo?: string): Promise<Blob> {\r\n    const response = await fetch(`http://localhost:5000/api/accounting/export-pohoda-xml/${companyId}?dateFrom=${dateFrom || ''}&dateTo=${dateTo || ''}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Chyba pri exporte XML súboru');\r\n    }\r\n    \r\n    return await response.blob();\r\n  }\r\n\r\n\r\n\r\n  // 11. OBNOVENIE FAKTÚR Z MDB\r\n\r\n  // Obnovenie vydaných faktúr z MDB\r\n  async refreshInvoicesFromMdb(companyId: number): Promise<{\r\n    success: boolean;\r\n    message: string;\r\n    importedCount: number;\r\n    totalCount: number;\r\n  }> {\r\n    const response = await fetch(`http://localhost:5000/api/accounting/refresh-invoices/${companyId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Chyba pri obnovení faktúr z MDB');\r\n    }\r\n    \r\n    return await response.json();\r\n  }\r\n\r\n  // Obnovenie prijatých faktúr z MDB\r\n  async refreshReceivedInvoicesFromMdb(companyId: number): Promise<{\r\n    success: boolean;\r\n    message: string;\r\n    importedCount: number;\r\n    totalCount: number;\r\n  }> {\r\n    const response = await fetch(`http://localhost:5000/api/accounting/refresh-received-invoices/${companyId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Chyba pri obnovení prijatých faktúr z MDB');\r\n    }\r\n    \r\n    return await response.json();\r\n  }\r\n\r\n  // 12. IMPORT FAKTÚR Z MDB\r\n\r\n  // Import vydaných faktúr z MDB\r\n  async importInvoicesFromMdb(companyId: number): Promise<{\r\n    success: boolean;\r\n    message: string;\r\n    importedCount: number;\r\n    skippedCount: number;\r\n    totalCount: number;\r\n  }> {\r\n    const response = await fetch(`http://localhost:5000/api/accounting/import-invoices/${companyId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Chyba pri importe faktúr z MDB');\r\n    }\r\n    \r\n    return await response.json();\r\n  }\r\n\r\n  // 12. MAZANIE POLOŽIEK\r\n\r\n  // Mazanie vydanej faktúry\r\n  async deleteIssuedInvoice(invoiceId: number): Promise<any> {\r\n    const response = await apiService.delete(`/accounting/issued-invoices/${invoiceId}`);\r\n    return response;\r\n  }\r\n\r\n  // Mazanie prijatej faktúry\r\n  async deleteReceivedInvoice(invoiceId: number): Promise<any> {\r\n    const response = await apiService.delete(`/accounting/received-invoices/${invoiceId}`);\r\n    return response;\r\n  }\r\n\r\n  // Mazanie bankovej transakcie\r\n  async deleteBankTransaction(transactionId: number): Promise<any> {\r\n    const response = await apiService.delete(`/accounting/bank-transactions/${transactionId}`);\r\n    return response;\r\n  }\r\n\r\n  // Mazanie pokladničnej transakcie\r\n  async deleteCashTransaction(transactionId: number): Promise<any> {\r\n    const response = await apiService.delete(`/accounting/cash-transactions/${transactionId}`);\r\n    return response;\r\n  }\r\n\r\n  // 13. ADRESÁR FIRIEM Z MDB\r\n\r\n  // Načítanie adresára firiem z MDB\r\n  async getDirectory(companyId: number): Promise<{\r\n    success: boolean;\r\n    company: { ico: string; name: string };\r\n    mdb_file: string;\r\n    companies: Array<{\r\n      id: number;\r\n      name: string;\r\n      ico: string;\r\n      dic: string;\r\n      address: string;\r\n      postal_code: string;\r\n      city: string;\r\n      phone: string;\r\n      email: string;\r\n      bank_account: string;\r\n      bank_code: string;\r\n    }>;\r\n    total_count: number;\r\n  }> {\r\n    const response = await fetch(`http://localhost:5000/api/accounting/directory/${companyId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Chyba pri načítaní adresára');\r\n    }\r\n    \r\n    return await response.json();\r\n  }\r\n\r\n  // 14. DPH PODANIA\r\n\r\n  // Načítanie DPH podaní z MDB\r\n  async getVatReturns(companyId: number, year?: number): Promise<{\r\n    company: {\r\n      id: number;\r\n      name: string;\r\n      ico: string;\r\n    };\r\n    year: number;\r\n    returns: Array<{\r\n      id: number;\r\n      rok: number;\r\n      mesiac: number;\r\n      povinnost: number;\r\n      odpočet: number;\r\n      odoslané: boolean;\r\n    }>;\r\n    summary: {\r\n      totalPovinnost: number;\r\n      totalOdpočet: number;\r\n      totalRozdiel: number;\r\n      odoslanéCount: number;\r\n      neodoslanéCount: number;\r\n    };\r\n  }> {\r\n    const yearParam = year || new Date().getFullYear();\r\n    const response = await fetch(`http://localhost:5000/api/accounting/vat-returns/${companyId}?year=${yearParam}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Chyba pri načítaní DPH podaní');\r\n    }\r\n    \r\n    return await response.json();\r\n  }\r\n\r\n  // 15. BANKOVÉ ÚČTY\r\n\r\n  // Načítanie bankových účtov z MDB\r\n  async getBankAccounts(companyId: number): Promise<{\r\n    company: {\r\n      id: number;\r\n      name: string;\r\n      ico: string;\r\n    };\r\n    accounts: Array<{\r\n      id: number;\r\n      accountNumber: string;\r\n      accountName: string;\r\n      bankName: string;\r\n      balance: number;\r\n      creditTotal: number;\r\n      debitTotal: number;\r\n      transactionCount: number;\r\n    }>;\r\n    summary: {\r\n      totalBalance: number;\r\n      totalCredit: number;\r\n      totalDebit: number;\r\n      accountCount: number;\r\n    };\r\n  }> {\r\n    console.log('🏦 Volám bankový endpoint pre companyId:', companyId);\r\n    \r\n    const response = await fetch(`http://localhost:5000/api/accounting/bank-accounts/${companyId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    console.log('🏦 Bankový endpoint response status:', response.status);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Chyba pri načítaní bankových účtov');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    console.log('🏦 Bankový endpoint response data:', data);\r\n    \r\n    return data;\r\n  }\r\n\r\n  // 16. POKLADŇA\r\n\r\n  // Načítanie pokladňových účtov z MDB\r\n  async getCashAccounts(companyId: number): Promise<{\r\n    company: {\r\n      id: number;\r\n      name: string;\r\n      ico: string;\r\n    };\r\n    accounts: Array<{\r\n      id: number;\r\n      accountNumber: string;\r\n      accountName: string;\r\n      balance: number;\r\n      creditTotal: number;\r\n      debitTotal: number;\r\n      transactionCount: number;\r\n    }>;\r\n    summary: {\r\n      totalBalance: number;\r\n      totalCredit: number;\r\n      totalDebit: number;\r\n      accountCount: number;\r\n    };\r\n  }> {\r\n    const response = await fetch(`http://localhost:5000/api/accounting/cash-accounts/${companyId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Chyba pri načítaní pokladňových účtov');\r\n    }\r\n    \r\n    return await response.json();\r\n  }\r\n\r\n  // 17. BANKOVÉ TRANSAKCIE\r\n  async getBankTransactions(companyId: number, accountNumber: string): Promise<{\r\n    company: { id: number; name: string; ico: string; };\r\n    account: { accountNumber: string; accountName: string; bankName: string; };\r\n    transactions: Array<{\r\n      id: number; datum: string; popis: string; kredit: number; debet: number; zostatok: number; typ: 'kredit' | 'debet';\r\n    }>;\r\n    summary: {\r\n      totalCredit: number; totalDebit: number; currentBalance: number; transactionCount: number;\r\n    };\r\n  }> {\r\n    console.log('🏦 Volám bankový transakčný endpoint pre companyId:', companyId, 'accountNumber:', accountNumber);\r\n\r\n    const response = await fetch(`http://localhost:5000/api/accounting/bank-transactions/${companyId}/${accountNumber}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    console.log('🏦 Bankový transakčný endpoint response status:', response.status);\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Chyba pri načítaní bankových transakcií');\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('🏦 Bankový transakčný endpoint response data:', data);\r\n\r\n    return data;\r\n  }\r\n\r\n  // 18. POKLADŇOVÉ TRANSAKCIE\r\n  async getCashTransactions(companyId: number, accountNumber: string): Promise<{\r\n    company: { id: number; name: string; ico: string; };\r\n    account: { accountNumber: string; accountName: string; bankName: string; };\r\n    transactions: Array<{\r\n      id: number; datum: string; popis: string; kredit: number; debet: number; zostatok: number; typ: 'kredit' | 'debet';\r\n    }>;\r\n    summary: {\r\n      totalCredit: number; totalDebit: number; currentBalance: number; transactionCount: number;\r\n    };\r\n  }> {\r\n    console.log('💰 Volám pokladňový transakčný endpoint pre companyId:', companyId, 'accountNumber:', accountNumber);\r\n\r\n    const response = await fetch(`http://localhost:5000/api/accounting/cash-transactions/${companyId}/${accountNumber}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${localStorage.getItem('token')}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    console.log('💰 Pokladňový transakčný endpoint response status:', response.status);\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Chyba pri načítaní pokladňových transakcií');\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('💰 Pokladňový transakčný endpoint response data:', data);\r\n\r\n    return data;\r\n  }\r\n}\r\n\r\nexport const accountingService = new AccountingService();\r\n","import * as React from \"react\";\nfunction FunnelIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 0 1-.659 1.591l-5.432 5.432a2.25 2.25 0 0 0-.659 1.591v2.927a2.25 2.25 0 0 1-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 0 0-.659-1.591L3.659 7.409A2.25 2.25 0 0 1 3 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0 1 12 3Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(FunnelIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ArrowLeftIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ArrowLeftIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction BanknotesIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M2.25 18.75a60.07 60.07 0 0 1 15.797 2.101c.727.198 1.453-.342 1.453-1.096V18.75M3.75 4.5v.75A.75.75 0 0 1 3 6h-.75m0 0v-.375c0-.621.504-1.125 1.125-1.125H20.25M2.25 6v9m18-10.5v.75c0 .414.336.75.75.75h.75m-1.5-1.5h.375c.621 0 1.125.504 1.125 1.125v9.75c0 .621-.504 1.125-1.125 1.125h-.375m1.5-1.5H21a.75.75 0 0 0-.75.75v.75m0 0H3.75m0 0h-.375a1.125 1.125 0 0 1-1.125-1.125V15m1.5 1.5v-.75A.75.75 0 0 0 3 15h-.75M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm3 0h.008v.008H18V10.5Zm-12 0h.008v.008H6V10.5Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(BanknotesIcon);\nexport default ForwardRef;","import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport {\r\n  ArrowLeftIcon,\r\n  BanknotesIcon,\r\n  MagnifyingGlassIcon,\r\n  FunnelIcon\r\n} from '@heroicons/react/24/outline';\r\nimport LoadingSpinner from '../components/LoadingSpinner';\r\nimport { useLocalStorage } from '../hooks/useLocalStorage';\r\nimport { accountingService } from '../services/accountingService';\r\n\r\ninterface CashTransaction {\r\n  id: number;\r\n  datum: string;\r\n  popis: string;\r\n  kredit: number;\r\n  debet: number;\r\n  zostatok: number;\r\n  typ: 'kredit' | 'debet';\r\n  firma?: string; // Voliteľné pole\r\n}\r\n\r\ninterface CashTransactionsData {\r\n  company: {\r\n    id: number;\r\n    name: string;\r\n    ico: string;\r\n  };\r\n  account: {\r\n    accountNumber: string;\r\n    accountName: string;\r\n    bankName: string;\r\n  };\r\n  transactions: CashTransaction[];\r\n  summary: {\r\n    totalCredit: number;\r\n    totalDebit: number;\r\n    currentBalance: number;\r\n    transactionCount: number;\r\n  };\r\n}\r\n\r\nconst CashTransactionsPage: React.FC = () => {\r\n  const { companyId, accountNumber } = useParams<{ companyId: string; accountNumber: string }>();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [transactionsData, setTransactionsData] = useState<CashTransactionsData | null>(null);\r\n  const [filters, setFilters] = useState({\r\n    datum: '',\r\n    popis: '',\r\n    firma: '',\r\n    kredit: '',\r\n    debet: '',\r\n    zostatok: ''\r\n  });\r\n\r\n  const [userRole] = useLocalStorage<'admin' | 'accountant' | 'user' | 'employee' | null>('userRole', null);\r\n\r\n  useEffect(() => {\r\n    if (companyId && accountNumber) {\r\n      loadTransactions();\r\n    }\r\n  }, [companyId, accountNumber]);\r\n\r\n  const loadTransactions = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      if (!accountNumber) {\r\n        setError('Chýba číslo účtu');\r\n        return;\r\n      }\r\n\r\n      console.log('💰 Načítavam transakcie pokladne pre účet:', accountNumber);\r\n\r\n      const data = await accountingService.getCashTransactions(Number(companyId), accountNumber);\r\n      console.log('💰 Transakcie pokladne načítané:', data);\r\n\r\n      setTransactionsData(data);\r\n    } catch (error) {\r\n      console.error('Chyba pri načítaní transakcií pokladne:', error);\r\n      setError('Chyba pri načítaní transakcií pokladne');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('sk-SK', {\r\n      style: 'currency',\r\n      currency: 'EUR'\r\n    }).format(amount);\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('sk-SK');\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    loadTransactions();\r\n  };\r\n\r\n  const handleFilterChange = (field: keyof typeof filters, value: string) => {\r\n    setFilters(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n\r\n  const clearFilters = () => {\r\n    setFilters({\r\n      datum: '',\r\n      popis: '',\r\n      firma: '',\r\n      kredit: '',\r\n      debet: '',\r\n      zostatok: ''\r\n    });\r\n  };\r\n\r\n  const filteredTransactions = transactionsData?.transactions?.filter(transaction => {\r\n    // Filtrovanie podľa dátumu\r\n    if (filters.datum && !transaction.datum.includes(filters.datum)) {\r\n      return false;\r\n    }\r\n    \r\n    // Filtrovanie podľa popisu\r\n    if (filters.popis && !transaction.popis.toLowerCase().includes(filters.popis.toLowerCase())) {\r\n      return false;\r\n    }\r\n    \r\n    // Filtrovanie podľa firmy\r\n    if (filters.firma && (!transaction.firma || !transaction.firma.toLowerCase().includes(filters.firma.toLowerCase()))) {\r\n      return false;\r\n    }\r\n    \r\n    // Filtrovanie podľa kreditu\r\n    if (filters.kredit && !transaction.kredit.toString().includes(filters.kredit)) {\r\n      return false;\r\n    }\r\n    \r\n    // Filtrovanie podľa debetu\r\n    if (filters.debet && !transaction.debet.toString().includes(filters.debet)) {\r\n      return false;\r\n    }\r\n    \r\n    // Filtrovanie podľa zostatku\r\n    if (filters.zostatok && !transaction.zostatok.toString().includes(filters.zostatok)) {\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }) || [];\r\n\r\n  if (loading) {\r\n    return <LoadingSpinner />;\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 dark:bg-dark-900\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\r\n          <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md p-4\">\r\n            <div className=\"flex\">\r\n              <div className=\"ml-3\">\r\n                <h3 className=\"text-sm font-medium text-red-800 dark:text-red-200\">\r\n                  Chyba\r\n                </h3>\r\n                <div className=\"mt-2 text-sm text-red-700 dark:text-red-300\">\r\n                  {error}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 dark:bg-dark-900\">\r\n      {/* Header */}\r\n      <div className=\"bg-white dark:bg-dark-800 shadow-sm border-b border-gray-200 dark:border-gray-700\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"flex items-center justify-between h-16\">\r\n            <div className=\"flex items-center\">\r\n              <button\r\n                onClick={() => navigate(`/accounting/cash/${companyId}`)}\r\n                className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n              >\r\n                <ArrowLeftIcon className=\"h-4 w-4 mr-2\" />\r\n                Späť na Pokladňu\r\n              </button>\r\n            </div>\r\n            <div className=\"flex items-center space-x-4\">\r\n              <h1 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\r\n                Transakcie pokladne - {transactionsData?.account?.accountNumber}\r\n              </h1>\r\n              <button\r\n                onClick={handleRefresh}\r\n                className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n              >\r\n                Obnoviť\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Hlavný obsah */}\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\r\n        {transactionsData && (\r\n          <>\r\n            {/* Informácie o účte */}\r\n            <div className=\"bg-white dark:bg-dark-800 rounded-lg shadow p-6 mb-6\">\r\n              <h2 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\r\n                Informácie o pokladni\r\n              </h2>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Číslo účtu</p>\r\n                  <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                    {transactionsData.account.accountNumber}\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Názov účtu</p>\r\n                  <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                    {transactionsData.account.accountName}\r\n                  </p>\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400\">Typ</p>\r\n                  <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\r\n                    Pokladňa\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Súhrn */}\r\n            <div className=\"bg-white dark:bg-dark-800 rounded-lg shadow p-6 mb-6\">\r\n              <h2 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\r\n                Súhrn transakcií\r\n              </h2>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\r\n                  <div className=\"flex items-center\">\r\n                    <BanknotesIcon className=\"h-8 w-8 text-blue-500\" />\r\n                    <div className=\"ml-3\">\r\n                      <p className=\"text-sm font-medium text-blue-600 dark:text-blue-400\">Aktuálny zostatok</p>\r\n                      <p className={`text-2xl font-bold ${transactionsData.summary.currentBalance >= 0 ? 'text-blue-900 dark:text-blue-100' : 'text-red-600 dark:text-red-400'}`}>\r\n                        {formatCurrency(transactionsData.summary.currentBalance)}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"bg-green-50 dark:bg-green-900/20 p-4 rounded-lg\">\r\n                  <div className=\"flex items-center\">\r\n                    <BanknotesIcon className=\"h-8 w-8 text-green-500\" />\r\n                    <div className=\"ml-3\">\r\n                      <p className=\"text-sm font-medium text-green-600 dark:text-green-400\">Celkový kredit</p>\r\n                      <p className=\"text-2xl font-bold text-green-900 dark:text-green-100\">\r\n                        {formatCurrency(transactionsData.summary.totalCredit)}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"bg-red-50 dark:bg-red-900/20 p-4 rounded-lg\">\r\n                  <div className=\"flex items-center\">\r\n                    <BanknotesIcon className=\"h-8 w-8 text-red-500\" />\r\n                    <div className=\"ml-3\">\r\n                      <p className=\"text-sm font-medium text-red-600 dark:text-red-400\">Celkový debet</p>\r\n                      <p className=\"text-2xl font-bold text-red-900 dark:text-red-100\">\r\n                        {formatCurrency(transactionsData.summary.totalDebit)}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg\">\r\n                  <div className=\"flex items-center\">\r\n                    <BanknotesIcon className=\"h-8 w-8 text-purple-500\" />\r\n                    <div className=\"ml-3\">\r\n                      <p className=\"text-sm font-medium text-purple-600 dark:text-purple-400\">Počet transakcií</p>\r\n                      <p className=\"text-2xl font-bold text-purple-900 dark:text-purple-100\">\r\n                        {transactionsData.summary.transactionCount}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Tabuľka transakcií s filtrovacími poliami v hlavičke */}\r\n            <div className=\"bg-white dark:bg-dark-800 rounded-lg shadow\">\r\n              <div className=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center\">\r\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\r\n                  Transakcie ({filteredTransactions.length})\r\n                </h3>\r\n                <button\r\n                  onClick={clearFilters}\r\n                  className=\"inline-flex items-center px-3 py-1 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n                >\r\n                  <FunnelIcon className=\"h-4 w-4 mr-1\" />\r\n                  Vyčistiť filtre\r\n                </button>\r\n              </div>\r\n              <div className=\"overflow-x-auto\">\r\n                <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n                  <thead className=\"bg-gray-50 dark:bg-gray-800\">\r\n                    <tr>\r\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                        Dátum\r\n                      </th>\r\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                        Popis\r\n                      </th>\r\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                        Firma\r\n                      </th>\r\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                        Kredit\r\n                      </th>\r\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                        Debet\r\n                      </th>\r\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\r\n                        Zostatok\r\n                      </th>\r\n                    </tr>\r\n                    {/* Filtrovacie riadky */}\r\n                    <tr className=\"bg-gray-100 dark:bg-gray-700\">\r\n                      <th className=\"px-3 py-2\">\r\n                        <input\r\n                          type=\"text\"\r\n                          value={filters.datum}\r\n                          onChange={(e) => handleFilterChange('datum', e.target.value)}\r\n                          placeholder=\"Filtrovať dátum...\"\r\n                          className=\"w-full px-2 py-1 text-xs border border-gray-300 dark:border-gray-600 rounded focus:outline-none focus:ring-1 focus:ring-blue-500 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\r\n                        />\r\n                      </th>\r\n                      <th className=\"px-3 py-2\">\r\n                        <input\r\n                          type=\"text\"\r\n                          value={filters.popis}\r\n                          onChange={(e) => handleFilterChange('popis', e.target.value)}\r\n                          placeholder=\"Filtrovať popis...\"\r\n                          className=\"w-full px-2 py-1 text-xs border border-gray-300 dark:border-gray-600 rounded focus:outline-none focus:ring-1 focus:ring-blue-500 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\r\n                        />\r\n                      </th>\r\n                      <th className=\"px-3 py-2\">\r\n                        <input\r\n                          type=\"text\"\r\n                          value={filters.firma}\r\n                          onChange={(e) => handleFilterChange('firma', e.target.value)}\r\n                          placeholder=\"Filtrovať firmu...\"\r\n                          className=\"w-full px-2 py-1 text-xs border border-gray-300 dark:border-gray-600 rounded focus:outline-none focus:ring-1 focus:ring-blue-500 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\r\n                        />\r\n                      </th>\r\n                      <th className=\"px-3 py-2\">\r\n                        <input\r\n                          type=\"text\"\r\n                          value={filters.kredit}\r\n                          onChange={(e) => handleFilterChange('kredit', e.target.value)}\r\n                          placeholder=\"Filtrovať kredit...\"\r\n                          className=\"w-full px-2 py-1 text-xs border border-gray-300 dark:border-gray-600 rounded focus:outline-none focus:ring-1 focus:ring-blue-500 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\r\n                        />\r\n                      </th>\r\n                      <th className=\"px-3 py-2\">\r\n                        <input\r\n                          type=\"text\"\r\n                          value={filters.debet}\r\n                          onChange={(e) => handleFilterChange('debet', e.target.value)}\r\n                          placeholder=\"Filtrovať debet...\"\r\n                          className=\"w-full px-2 py-1 text-xs border border-gray-300 dark:border-gray-600 rounded focus:outline-none focus:ring-1 focus:ring-blue-500 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\r\n                        />\r\n                      </th>\r\n                      <th className=\"px-3 py-2\">\r\n                        <input\r\n                          type=\"text\"\r\n                          value={filters.zostatok}\r\n                          onChange={(e) => handleFilterChange('zostatok', e.target.value)}\r\n                          placeholder=\"Filtrovať zostatok...\"\r\n                          className=\"w-full px-2 py-1 text-xs border border-gray-300 dark:border-gray-600 rounded focus:outline-none focus:ring-1 focus:ring-blue-500 bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\r\n                        />\r\n                      </th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody className=\"bg-white dark:bg-dark-800 divide-y divide-gray-200 dark:divide-gray-700\">\r\n                    {filteredTransactions.map((transaction) => (\r\n                      <tr key={transaction.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\r\n                          {formatDate(transaction.datum)}\r\n                        </td>\r\n                        <td className=\"px-6 py-4 text-sm text-gray-900 dark:text-white\">\r\n                          {transaction.popis}\r\n                        </td>\r\n                        <td className=\"px-6 py-4 text-sm text-gray-500 dark:text-gray-400\">\r\n                          {transaction.firma ? transaction.firma : '-'}\r\n                        </td>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-green-600 dark:text-green-400\">\r\n                          {transaction.kredit > 0 ? formatCurrency(transaction.kredit) : '-'}\r\n                        </td>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-red-600 dark:text-red-400\">\r\n                          {transaction.debet > 0 ? formatCurrency(transaction.debet) : '-'}\r\n                        </td>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\r\n                          <span className={`font-medium ${transaction.zostatok >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>\r\n                            {formatCurrency(transaction.zostatok)}\r\n                          </span>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CashTransactionsPage;\r\n"],"names":["accountingService","getSettings","companyId","apiService","get","concat","saveSettings","settings","post","getPermissions","userEmail","savePermissions","permissions","getAllPermissions","getIssuedInvoices","filters","params","URLSearchParams","Object","entries","forEach","_ref","key","value","undefined","append","toString","createIssuedInvoice","invoice","getIssuedInvoiceById","invoiceId","getReceivedInvoices","_ref2","getReceivedInvoiceById","getPudSummary","getFinancialAnalysis","dateFrom","dateTo","url","getStats","_ref3","formatCurrency","amount","currency","arguments","length","Intl","NumberFormat","style","format","formatDate","date","Date","toLocaleDateString","getStatusBadge","status","draft","text","color","sent","paid","overdue","cancelled","received","approved","disputed","getTypeBadge","type","income","expense","testPohodaConnection","_objectSpread","testPohodaInvoices","syncPohodaInvoices","uploadPohodaXml","file","formData","FormData","response","fetch","method","headers","localStorage","getItem","body","ok","Error","json","exportPohodaXml","blob","refreshInvoicesFromMdb","refreshReceivedInvoicesFromMdb","importInvoicesFromMdb","deleteIssuedInvoice","delete","deleteReceivedInvoice","deleteBankTransaction","transactionId","deleteCashTransaction","getDirectory","getVatReturns","year","yearParam","getFullYear","getBankAccounts","console","log","data","getCashAccounts","getBankTransactions","accountNumber","getCashTransactions","FunnelIcon","svgRef","title","titleId","props","_objectWithoutProperties","_excluded","React","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","ArrowLeftIcon","BanknotesIcon","CashTransactionsPage","_transactionsData$tra","_transactionsData$acc","useParams","navigate","useNavigate","loading","setLoading","useState","error","setError","transactionsData","setTransactionsData","setFilters","datum","popis","firma","kredit","debet","zostatok","userRole","useLocalStorage","useEffect","loadTransactions","async","Number","handleFilterChange","field","prev","filteredTransactions","transactions","filter","transaction","includes","toLowerCase","_jsx","LoadingSpinner","className","children","_jsxs","onClick","account","handleRefresh","_Fragment","accountName","summary","currentBalance","totalCredit","totalDebit","transactionCount","clearFilters","onChange","e","target","placeholder","map","dateString"],"sourceRoot":""}