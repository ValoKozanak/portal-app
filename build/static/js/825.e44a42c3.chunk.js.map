{"version":3,"file":"static/js/825.e44a42c3.chunk.js","mappings":"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","sources":["services/hrService.ts","components/MessageModal.tsx","components/MessagesList.tsx"],"sourcesContent":["import { apiService } from './apiService';\r\n\r\nexport interface Employee {\r\n  id: number;\r\n  company_id: number;\r\n  employee_id: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  phone?: string;\r\n  position: string;\r\n  department?: string;\r\n  hire_date: string;\r\n  salary?: number;\r\n  employment_type: 'full_time' | 'part_time' | 'contract' | 'intern';\r\n  status: 'active' | 'inactive' | 'terminated' | 'on_leave';\r\n  termination_date?: string;\r\n  termination_reason?: string;\r\n  manager_id?: number;\r\n  manager_first_name?: string;\r\n  manager_last_name?: string;\r\n  \r\n  // Pracovné pomery\r\n  employment_start_date?: string;\r\n  employment_end_date?: string;\r\n  attendance_mode?: 'manual' | 'automatic';\r\n  \r\n  // Personálne údaje\r\n  birth_name?: string;\r\n  title_before?: string;\r\n  title_after?: string;\r\n  gender?: 'muž' | 'žena';\r\n  birth_date?: string;\r\n  birth_number?: string;\r\n  birth_place?: string;\r\n  nationality?: string;\r\n  citizenship?: string;\r\n  education?: string;\r\n  marital_status?: string;\r\n  is_partner?: boolean;\r\n  is_statutory?: boolean;\r\n  employee_bonus?: boolean;\r\n  bonus_months?: number;\r\n  \r\n  // Adresa trvalého pobytu\r\n  permanent_street?: string;\r\n  permanent_number?: string;\r\n  permanent_city?: string;\r\n  permanent_zip?: string;\r\n  permanent_country?: string;\r\n  \r\n  // Kontaktná adresa\r\n  contact_street?: string;\r\n  contact_number?: string;\r\n  contact_city?: string;\r\n  contact_zip?: string;\r\n  contact_country?: string;\r\n  \r\n  // Cudzinecké údaje\r\n  is_foreigner?: boolean;\r\n  foreigner_country?: string;\r\n  residence_permit_number?: string;\r\n  social_insurance_sr?: string;\r\n  social_insurance_foreign?: string;\r\n  health_insurance_sr?: string;\r\n  foreigner_without_permanent_residence?: boolean;\r\n  tax_identification_number?: string;\r\n  \r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface Attendance {\r\n  id: number;\r\n  employee_id: number;\r\n  company_id: number;\r\n  date: string;\r\n  check_in?: string;\r\n  check_out?: string;\r\n  total_hours?: number;\r\n  break_minutes: number;\r\n  status: 'present' | 'absent' | 'late' | 'early_leave' | 'sick_leave' | 'vacation' | 'holiday';\r\n  notes?: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  employee_id_code: string;\r\n  employee_name?: string; // Pre zobrazenie všetkých zamestnancov\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface EmployeeAttendanceStatus {\r\n  id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  position: string;\r\n  email: string;\r\n  status: string;\r\n  attendance_mode: 'manual' | 'automatic' | null;\r\n  employment_start_date: string;\r\n  employment_end_date: string | null;\r\n  is_active: number;\r\n  today_status: 'present' | 'absent' | 'late' | 'early_leave' | 'sick_leave' | 'vacation' | 'holiday';\r\n  check_in: string | null;\r\n  check_out: string | null;\r\n  status_type: 'present' | 'absent' | 'late' | 'leave' | 'holiday' | 'weekend';\r\n  status_description: string;\r\n  is_weekend: boolean;\r\n  is_holiday: boolean;\r\n}\r\n\r\nexport interface LeaveRequest {\r\n  id: number;\r\n  employee_id: number;\r\n  company_id: number;\r\n  leave_type: 'vacation' | 'sick_leave' | 'personal_leave' | 'maternity_leave' | 'paternity_leave' | 'unpaid_leave';\r\n  start_date: string;\r\n  end_date: string;\r\n  total_days: number;\r\n  reason?: string;\r\n  status: 'pending' | 'approved' | 'rejected' | 'cancelled';\r\n  approved_by?: number;\r\n  approved_at?: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  employee_id_code: string;\r\n  approver_first_name?: string;\r\n  approver_last_name?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface WorkShift {\r\n  id: number;\r\n  company_id: number;\r\n  shift_name: string;\r\n  start_time: string;\r\n  end_time: string;\r\n  break_start?: string;\r\n  break_end?: string;\r\n  is_active: boolean;\r\n  created_at: string;\r\n}\r\n\r\nexport interface HREvent {\r\n  id: number;\r\n  company_id: number;\r\n  employee_id?: number;\r\n  event_type: 'hire' | 'termination' | 'promotion' | 'salary_change' | 'position_change' | 'warning' | 'recognition';\r\n  title: string;\r\n  description?: string;\r\n  event_date: string;\r\n  created_by: number;\r\n  first_name?: string;\r\n  last_name?: string;\r\n  employee_id_code?: string;\r\n  created_by_first_name: string;\r\n  created_by_last_name: string;\r\n  created_at: string;\r\n}\r\n\r\nexport interface HRStats {\r\n  employees: {\r\n    total_employees: number;\r\n    active_employees: number;\r\n    inactive_employees: number;\r\n    terminated_employees: number;\r\n    on_leave_employees: number;\r\n  };\r\n  attendance: {\r\n    total_attendance: number;\r\n    present_today: number;\r\n    absent_today: number;\r\n    late_today: number;\r\n  };\r\n  leave_requests: {\r\n    pending_leave_requests: number;\r\n  };\r\n}\r\n\r\nclass HRService {\r\n  // Zamestnanci\r\n  async getEmployees(companyId: number): Promise<Employee[]> {\r\n    return apiService.get(`/hr/employees/${companyId}`);\r\n  }\r\n\r\n  async addEmployee(employeeData: Omit<Employee, 'id' | 'created_at' | 'updated_at'>): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/employees', employeeData);\r\n  }\r\n\r\n  async updateEmployee(id: number, employeeData: Partial<Employee>): Promise<{ message: string }> {\r\n    return apiService.put(`/hr/employees/${id}`, employeeData);\r\n  }\r\n\r\n  // Dochádzka\r\n  async getAttendance(companyId: number, employeeId?: number, startDate?: string, endDate?: string): Promise<Attendance[]> {\r\n    let url = `/hr/attendance/${companyId}`;\r\n    \r\n    const params = new URLSearchParams();\r\n    if (employeeId) params.append('employeeId', employeeId.toString());\r\n    if (startDate) params.append('startDate', startDate);\r\n    if (endDate) params.append('endDate', endDate);\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n    \r\n    return apiService.get(url);\r\n  }\r\n\r\n  async checkAttendanceDuplicates(companyId: number, employeeId?: number, startDate?: string, endDate?: string): Promise<any> {\r\n    let url = `/hr/attendance/check-duplicates/${companyId}`;\r\n    \r\n    const params = new URLSearchParams();\r\n    if (employeeId) params.append('employeeId', employeeId.toString());\r\n    if (startDate) params.append('startDate', startDate);\r\n    if (endDate) params.append('endDate', endDate);\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n    \r\n    return apiService.get(url);\r\n  }\r\n\r\n  async addAttendance(attendanceData: Omit<Attendance, 'id' | 'created_at' | 'updated_at' | 'first_name' | 'last_name' | 'employee_id_code'>): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/attendance', attendanceData);\r\n  }\r\n\r\n  // Dovolenky\r\n  async getLeaveRequests(companyId: number, status?: string, employeeId?: number): Promise<LeaveRequest[]> {\r\n    let url = `/hr/leave-requests/${companyId}`;\r\n    const params = new URLSearchParams();\r\n    if (status) {\r\n      params.append('status', status);\r\n    }\r\n    if (employeeId) {\r\n      params.append('employee_id', employeeId.toString());\r\n    }\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n    return apiService.get(url);\r\n  }\r\n\r\n  async addLeaveRequest(leaveData: Omit<LeaveRequest, 'id' | 'created_at' | 'updated_at' | 'first_name' | 'last_name' | 'employee_id_code' | 'approver_first_name' | 'approver_last_name'>): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/leave-requests', leaveData);\r\n  }\r\n\r\n  async updateLeaveRequestStatus(id: number, status: string, approvedBy: number): Promise<{ message: string }> {\r\n    return apiService.put(`/hr/leave-requests/${id}/status`, { status, approved_by: approvedBy });\r\n  }\r\n\r\n  // Pracovné zmeny\r\n  async getWorkShifts(companyId: number): Promise<WorkShift[]> {\r\n    return apiService.get(`/hr/work-shifts/${companyId}`);\r\n  }\r\n\r\n  async addWorkShift(shiftData: Omit<WorkShift, 'id' | 'created_at'>): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/work-shifts', shiftData);\r\n  }\r\n\r\n  // HR udalosti\r\n  async getHREvents(companyId: number, eventType?: string, employeeId?: number): Promise<HREvent[]> {\r\n    let url = `/hr/hr-events/${companyId}`;\r\n    const params = new URLSearchParams();\r\n    if (eventType) params.append('event_type', eventType);\r\n    if (employeeId) params.append('employee_id', employeeId.toString());\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n    \r\n    return apiService.get(url);\r\n  }\r\n\r\n  async addHREvent(eventData: Omit<HREvent, 'id' | 'created_at' | 'first_name' | 'last_name' | 'employee_id_code' | 'created_by_first_name' | 'created_by_last_name'>): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/hr-events', eventData);\r\n  }\r\n\r\n  // Hľadanie zamestnanca podľa emailu\r\n  async findEmployeeByEmail(email: string): Promise<Employee> {\r\n    return apiService.get(`/hr/employees/find/${encodeURIComponent(email)}`);\r\n  }\r\n\r\n  // Aktualizácia company_id zamestnanca\r\n  async updateEmployeeCompany(employeeId: number, companyId: number): Promise<{ message: string }> {\r\n    return apiService.put(`/hr/employees/${employeeId}/company`, { company_id: companyId });\r\n  }\r\n\r\n  // Štatistiky\r\n  async getHRStats(companyId: number): Promise<HRStats> {\r\n    return apiService.get(`/hr/hr-stats/${companyId}`);\r\n  }\r\n\r\n  // Pomocné funkcie\r\n  getEmploymentTypeLabel(type: string): string {\r\n    const types = {\r\n      'full_time': 'Plný úväzok',\r\n      'part_time': 'Čiastočný úväzok',\r\n      'contract': 'Dohoda',\r\n      'intern': 'Stáž'\r\n    };\r\n    return types[type as keyof typeof types] || type;\r\n  }\r\n\r\n  getStatusLabel(status: string): string {\r\n    const statuses = {\r\n      'active': 'Aktívny',\r\n      'inactive': 'Neaktívny',\r\n      'terminated': 'Ukončený',\r\n      'on_leave': 'Na dovolenke'\r\n    };\r\n    return statuses[status as keyof typeof statuses] || status;\r\n  }\r\n\r\n  getLeaveTypeLabel(type: string): string {\r\n    const types = {\r\n      'vacation': 'Dovolenka',\r\n      'sick_leave': 'PN',\r\n      'personal_leave': 'Osobné voľno',\r\n      'maternity_leave': 'Materská dovolenka',\r\n      'paternity_leave': 'Otcovská dovolenka',\r\n      'unpaid_leave': 'Neplatené voľno'\r\n    };\r\n    return types[type as keyof typeof types] || type;\r\n  }\r\n\r\n  getEventTypeLabel(type: string): string {\r\n    const types = {\r\n      'hire': 'Nábor',\r\n      'termination': 'Ukončenie',\r\n      'promotion': 'Povýšenie',\r\n      'salary_change': 'Zmena mzdy',\r\n      'position_change': 'Zmena pozície',\r\n      'warning': 'Upozornenie',\r\n      'recognition': 'Uznanie'\r\n    };\r\n    return types[type as keyof typeof types] || type;\r\n  }\r\n\r\n  getAttendanceStatusLabel(status: string): string {\r\n    const statuses = {\r\n      'present': 'Prítomný',\r\n      'absent': 'Neprítomný',\r\n      'late': 'Meškanie',\r\n      'early_leave': 'Predčasný odchod',\r\n      'sick_leave': 'PN',\r\n      'vacation': 'Dovolenka',\r\n      'holiday': 'Sviatok'\r\n    };\r\n    return statuses[status as keyof typeof statuses] || status;\r\n  }\r\n\r\n  calculateWorkHours(checkIn: string, checkOut: string): number {\r\n    if (!checkIn || !checkOut) return 0;\r\n    \r\n    const start = new Date(`2000-01-01T${checkIn}`);\r\n    const end = new Date(`2000-01-01T${checkOut}`);\r\n    \r\n    const diffMs = end.getTime() - start.getTime();\r\n    const diffHours = diffMs / (1000 * 60 * 60);\r\n    \r\n    return Math.round(diffHours * 100) / 100;\r\n  }\r\n\r\n  formatTime(time: string): string {\r\n    if (!time) return '';\r\n    return time.substring(0, 5); // Zobrazí len HH:MM\r\n  }\r\n\r\n  formatDate(date: string): string {\r\n    return new Date(date).toLocaleDateString('sk-SK');\r\n  }\r\n\r\n  formatDateTime(dateTime: string): string {\r\n    return new Date(dateTime).toLocaleString('sk-SK');\r\n  }\r\n\r\n  // API pre správu zmien personálnych údajov\r\n  async createEmployeeChange(changeData: {\r\n    employee_id: number;\r\n    field_name: string;\r\n    current_value: string;\r\n    new_value: string;\r\n    reason: string;\r\n    company_id: number;\r\n  }): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/employee-changes', changeData);\r\n  }\r\n\r\n  async getEmployeeChanges(employeeId: number): Promise<any[]> {\r\n    return apiService.get(`/hr/employee-changes/${employeeId}`);\r\n  }\r\n\r\n  async getCompanyChanges(companyId: number): Promise<any[]> {\r\n    return apiService.get(`/hr/company-changes/${companyId}`);\r\n  }\r\n\r\n  async approveEmployeeChange(changeId: number, approvedBy: number): Promise<{ message: string }> {\r\n    return apiService.patch(`/hr/employee-changes/${changeId}`, { status: 'approved', approved_by: approvedBy });\r\n  }\r\n\r\n  async rejectEmployeeChange(changeId: number, approvedBy: number): Promise<{ message: string }> {\r\n    return apiService.patch(`/hr/employee-changes/${changeId}`, { status: 'rejected', approved_by: approvedBy });\r\n  }\r\n\r\n  async updateEmployeeField(employeeId: number, fieldName: string, newValue: string): Promise<{ message: string }> {\r\n    return apiService.patch(`/hr/employees/${employeeId}/update-field`, { field_name: fieldName, new_value: newValue });\r\n  }\r\n\r\n  // Dochádzkové nastavenia\r\n  async getAttendanceSettings(employeeId: number): Promise<any> {\r\n    return apiService.get(`/hr/attendance-settings/${employeeId}`);\r\n  }\r\n\r\n  async createAutomaticAttendance(companyId: number, date: string): Promise<{ message: string; results: any[] }> {\r\n    return apiService.post('/hr/attendance/auto-create', { companyId, date });\r\n  }\r\n\r\n  // Aktualizácia dochádzky s typom\r\n  async addAttendanceWithType(attendanceData: Omit<Attendance, 'id' | 'created_at' | 'updated_at' | 'first_name' | 'last_name' | 'employee_id_code'> & { attendance_type: 'manual' | 'automatic' }): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/attendance', attendanceData);\r\n  }\r\n\r\n  // Pracovné pomery\r\n  async getEmploymentRelations(companyId: number): Promise<any[]> {\r\n    return apiService.get(`/hr/employment-relations/${companyId}`);\r\n  }\r\n\r\n  async addEmploymentRelation(relationData: {\r\n    employee_id: number;\r\n    company_id: number;\r\n    position: string;\r\n    employment_type?: 'full_time' | 'part_time' | 'contract' | 'intern';\r\n    employment_start_date: string;\r\n    employment_end_date?: string;\r\n    salary?: number;\r\n    weekly_hours?: number;\r\n    attendance_mode?: 'manual' | 'automatic';\r\n    work_start_time?: string;\r\n    work_end_time?: string;\r\n    break_start_time?: string;\r\n    break_end_time?: string;\r\n    is_active?: boolean;\r\n  }): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/employment-relations', relationData);\r\n  }\r\n\r\n  async updateEmploymentRelation(id: number, relationData: {\r\n    position?: string;\r\n    employment_type?: 'full_time' | 'part_time' | 'contract' | 'intern';\r\n    employment_start_date?: string;\r\n    employment_end_date?: string;\r\n    salary?: number;\r\n    weekly_hours?: number;\r\n    attendance_mode?: 'manual' | 'automatic';\r\n    work_start_time?: string;\r\n    work_end_time?: string;\r\n    break_start_time?: string;\r\n    break_end_time?: string;\r\n    is_active?: boolean;\r\n  }): Promise<{ message: string }> {\r\n    return apiService.put(`/hr/employment-relations/${id}`, relationData);\r\n  }\r\n\r\n  // Automatické prepočítanie dochádzky\r\n  async getEmployeesWithAutomaticAttendance(companyId: number): Promise<any[]> {\r\n    return apiService.get(`/hr/employees/automatic-attendance/${companyId}`);\r\n  }\r\n\r\n  async processAutomaticAttendance(\r\n    companyId: number, \r\n    employeeIds: number[], \r\n    startDate: string, \r\n    endDate: string\r\n  ): Promise<{ message: string; results: any[] }> {\r\n    return apiService.post('/hr/attendance/process-automatic', {\r\n      companyId,\r\n      employeeIds,\r\n      startDate,\r\n      endDate\r\n    });\r\n  }\r\n\r\n  // Získanie prítomných zamestnancov dnes\r\n  async getPresentEmployeesToday(companyId: number): Promise<Attendance[]> {\r\n    return apiService.get(`/hr/attendance/present-today/${companyId}`);\r\n  }\r\n\r\n  // Získanie neprítomných zamestnancov dnes\r\n  async getAbsentEmployeesToday(companyId: number): Promise<any[]> {\r\n    return apiService.get(`/hr/attendance/absent-today/${companyId}`);\r\n  }\r\n\r\n  // Získanie všetkých aktívnych zamestnancov s informáciou o dochádzke\r\n  async getEmployeesAttendanceStatus(companyId: number): Promise<EmployeeAttendanceStatus[]> {\r\n    return apiService.get(`/hr/employees/attendance-status/${companyId}`);\r\n  }\r\n\r\n  // Získanie zamestnancov s chýbajúcou dochádzkou\r\n  async getEmployeesWithMissingAttendance(companyId: number): Promise<any[]> {\r\n    return apiService.get(`/hr/employees/missing-attendance/${companyId}`);\r\n  }\r\n\r\n  // Zaznamenanie dochádzky\r\n  async recordAttendance(attendanceData: {\r\n    employee_id: number;\r\n    company_id: number;\r\n    date: string;\r\n    attendance_type: 'present' | 'absent' | 'leave' | 'sick_leave';\r\n    start_time?: string | null;\r\n    end_time?: string | null;\r\n    break_minutes?: number;\r\n    note?: string;\r\n    recorded_by: string;\r\n  }): Promise<{ id: number; message: string }> {\r\n    return apiService.post('/hr/attendance/record', attendanceData);\r\n  }\r\n}\r\n\r\nexport const hrService = new HRService();\r\n","import React, { useState, useEffect } from 'react';\r\nimport { \r\n  XMarkIcon, \r\n  PaperAirplaneIcon\r\n} from '@heroicons/react/24/outline';\r\nimport { apiService } from '../services/apiService';\r\nimport { hrService } from '../services/hrService';\r\n\r\ninterface MessageModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSend: () => void;\r\n  senderEmail: string;\r\n  userRole?: 'admin' | 'user' | 'accountant' | 'employee';\r\n  companyId?: number;\r\n  initialRecipient?: string;\r\n  initialSubject?: string;\r\n}\r\n\r\ninterface User {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  role: string;\r\n}\r\n\r\nconst MessageModal: React.FC<MessageModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  onSend,\r\n  senderEmail,\r\n  userRole,\r\n  companyId,\r\n  initialRecipient = '',\r\n  initialSubject = ''\r\n}) => {\r\n  const [recipientEmail, setRecipientEmail] = useState(initialRecipient);\r\n  const [subject, setSubject] = useState(initialSubject);\r\n  const [content, setContent] = useState('');\r\n  const [messageType, setMessageType] = useState('general');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [users, setUsers] = useState<User[]>([]);\r\n  const [loadingUsers, setLoadingUsers] = useState(false);\r\n  const [companies, setCompanies] = useState<any[]>([]);\r\n  const [selectedCompanyId, setSelectedCompanyId] = useState<number | undefined>(companyId);\r\n  const [loadingCompanies, setLoadingCompanies] = useState(false);\r\n\r\n  // Aktualizácia recipientEmail keď sa zmení initialRecipient\r\n  useEffect(() => {\r\n    setRecipientEmail(initialRecipient);\r\n  }, [initialRecipient]);\r\n\r\n  // Načítanie firiem pre Admin a Accountant\r\n  useEffect(() => {\r\n    const loadCompanies = async () => {\r\n      if (userRole === 'admin' || userRole === 'accountant') {\r\n        try {\r\n          setLoadingCompanies(true);\r\n          let companiesData;\r\n          \r\n          if (userRole === 'admin') {\r\n            companiesData = await apiService.getAllCompanies();\r\n          } else {\r\n            companiesData = await apiService.getAccountantCompanies(senderEmail);\r\n          }\r\n          \r\n          setCompanies(companiesData);\r\n        } catch (error) {\r\n          console.error('Chyba pri načítaní firiem:', error);\r\n        } finally {\r\n          setLoadingCompanies(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      loadCompanies();\r\n    }\r\n  }, [isOpen, userRole, senderEmail]);\r\n\r\n  // Načítanie používateľov pre výber príjemcu\r\n  useEffect(() => {\r\n    const loadUsers = async () => {\r\n      try {\r\n        setLoadingUsers(true);\r\n        const allUsers = await apiService.getAllUsers();\r\n        \r\n        // Filtrovanie používateľov podľa role\r\n        let filteredUsers = allUsers;\r\n        \r\n        if (userRole === 'user') {\r\n          // User (firma) môže poslať správu Admin, priradeným Accountant a svojim zamestnancom\r\n          const assignedAccountantEmails: string[] = [];\r\n          const employeeEmails: string[] = [];\r\n          \r\n          // Ak máme companyId, načítame len zamestnancov z aktuálnej firmy\r\n          if (companyId) {\r\n            try {\r\n              // Načítame zamestnancov len z aktuálnej firmy\r\n              const employees = await hrService.getEmployees(companyId);\r\n              employeeEmails.push(...employees.map(emp => emp.email));\r\n              \r\n              // Načítame priradených účtovníkov pre aktuálnu firmu\r\n              const company = await apiService.getCompanyById(companyId);\r\n              if (company && company.assignedToAccountants) {\r\n                assignedAccountantEmails.push(...company.assignedToAccountants);\r\n              }\r\n            } catch (error) {\r\n              console.error(`Chyba pri načítaní zamestnancov pre firmu ${companyId}:`, error);\r\n            }\r\n          } else {\r\n            // Fallback: načítame zamestnancov zo všetkých firiem používateľa\r\n            const userCompanies = await apiService.getUserCompanies(senderEmail);\r\n            \r\n            for (const company of userCompanies) {\r\n              if (company.assignedToAccountants) {\r\n                assignedAccountantEmails.push(...company.assignedToAccountants);\r\n              }\r\n              \r\n              try {\r\n                const employees = await hrService.getEmployees(company.id);\r\n                employeeEmails.push(...employees.map(emp => emp.email));\r\n              } catch (error) {\r\n                console.error(`Chyba pri načítaní zamestnancov pre firmu ${company.id}:`, error);\r\n              }\r\n            }\r\n          }\r\n          \r\n          filteredUsers = allUsers.filter(user => \r\n            user.role === 'admin' || \r\n            (user.role === 'accountant' && assignedAccountantEmails.includes(user.email)) ||\r\n            (user.role === 'employee' && employeeEmails.includes(user.email))\r\n          );\r\n        } else if (userRole === 'accountant') {\r\n          // Accountant môže poslať správu iba Admin a priradeným User (z jeho firiem)\r\n          // Najprv získame firmy, ktoré má accountant na starosti\r\n          const accountantCompanies = await apiService.getAccountantCompanies(senderEmail);\r\n          const assignedUserEmails: string[] = [];\r\n          \r\n          // Extraktujeme všetkých používateľov z firiem, ktoré má accountant na starosti\r\n          accountantCompanies.forEach(company => {\r\n            if (company.owner_email) {\r\n              assignedUserEmails.push(company.owner_email);\r\n            }\r\n          });\r\n          \r\n          filteredUsers = allUsers.filter(user => \r\n            user.role === 'admin' || \r\n            (user.role === 'user' && assignedUserEmails.includes(user.email))\r\n          );\r\n        } else if (userRole === 'employee') {\r\n          // Employee môže poslať správu iba svojej firme (company owner)\r\n          if (companyId) {\r\n            const company = await apiService.getCompanyById(companyId);\r\n            if (company && company.owner_email) {\r\n              // Namiesto zobrazenia \"User\" zobrazíme konkrétnu firmu\r\n              const companyOwner = allUsers.find(user => user.email === company.owner_email);\r\n              if (companyOwner) {\r\n                filteredUsers = [{\r\n                  ...companyOwner,\r\n                  name: `${company.name} (${companyOwner.name})` // Zobrazíme názov firmy + meno vlastníka\r\n                }];\r\n              }\r\n            }\r\n          }\r\n        }\r\n        // Admin môže poslať správu všetkým\r\n        \r\n        setUsers(filteredUsers);\r\n      } catch (error) {\r\n        console.error('Chyba pri načítaní používateľov:', error);\r\n      } finally {\r\n        setLoadingUsers(false);\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      loadUsers();\r\n    }\r\n  }, [isOpen, userRole, senderEmail, companyId]);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!recipientEmail || !subject || !content.trim()) {\r\n      setError('Všetky polia musia byť vyplnené');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      console.log('Odosielam správu:', {\r\n        sender_email: senderEmail,\r\n        recipient_email: recipientEmail,\r\n        subject: subject.trim(),\r\n        content: content.trim(),\r\n        company_id: selectedCompanyId,\r\n        message_type: messageType\r\n      });\r\n\r\n      const response = await apiService.sendMessage({\r\n        sender_email: senderEmail,\r\n        recipient_email: recipientEmail,\r\n        subject: subject.trim(),\r\n        content: content.trim(),\r\n        company_id: selectedCompanyId,\r\n        message_type: messageType\r\n      });\r\n\r\n      console.log('Správa odoslaná úspešne:', response);\r\n\r\n      // Reset formulára\r\n      setRecipientEmail('');\r\n      setSubject('');\r\n      setContent('');\r\n      setMessageType('general');\r\n      \r\n      // Zobrazíme úspešnú správu\r\n      alert('Správa bola úspešne odoslaná!');\r\n      \r\n      onSend();\r\n      onClose();\r\n    } catch (error) {\r\n      console.error('Chyba pri odosielaní správy:', error);\r\n      setError(error instanceof Error ? error.message : 'Chyba pri odosielaní správy');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setRecipientEmail(initialRecipient);\r\n    setSubject(initialSubject);\r\n    setContent('');\r\n    setMessageType('general');\r\n    setError('');\r\n    onClose();\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\r\n        <div className=\"flex items-center justify-between p-6 border-b\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <PaperAirplaneIcon className=\"h-6 w-6 text-blue-600\" />\r\n            <h2 className=\"text-xl font-semibold text-gray-900\">\r\n              Nová správa\r\n            </h2>\r\n          </div>\r\n          <button\r\n            onClick={handleClose}\r\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\r\n          >\r\n            <XMarkIcon className=\"h-6 w-6\" />\r\n          </button>\r\n        </div>\r\n\r\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\r\n          {/* Príjemca */}\r\n          <div>\r\n            <label htmlFor=\"recipient\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n              Príjemca *\r\n            </label>\r\n            <div className=\"relative\">\r\n              <input\r\n                type=\"email\"\r\n                id=\"recipient\"\r\n                value={recipientEmail}\r\n                onChange={(e) => setRecipientEmail(e.target.value)}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                placeholder=\"email@example.com\"\r\n                required\r\n              />\r\n              {loadingUsers ? (\r\n                <div className=\"absolute right-3 top-2.5\">\r\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600\"></div>\r\n                </div>\r\n              ) : (\r\n                <select\r\n                  onChange={(e) => setRecipientEmail(e.target.value)}\r\n                  className=\"absolute right-3 top-2.5 text-sm text-blue-600 hover:text-blue-700 cursor-pointer\"\r\n                >\r\n                  <option value=\"\">Vybrať používateľa</option>\r\n                  {users.map((user) => (\r\n                    <option key={user.id} value={user.email}>\r\n                      {user.name} ({user.email}) - {user.role}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Firma (iba pre Admin a Accountant) */}\r\n          {(userRole === 'admin' || userRole === 'accountant') && (\r\n            <div>\r\n              <label htmlFor=\"company\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                Firma (pre ktorú sa správa posiela)\r\n              </label>\r\n              <div className=\"relative\">\r\n                <select\r\n                  id=\"company\"\r\n                  value={selectedCompanyId || ''}\r\n                  onChange={(e) => setSelectedCompanyId(e.target.value ? Number(e.target.value) : undefined)}\r\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                >\r\n                  <option value=\"\">Vybrať firmu (voliteľné)</option>\r\n                  {loadingCompanies ? (\r\n                    <option value=\"\" disabled>Načítavam firmy...</option>\r\n                  ) : (\r\n                    companies.map((company) => (\r\n                      <option key={company.id} value={company.id}>\r\n                        {company.name} - {company.owner_email}\r\n                      </option>\r\n                    ))\r\n                  )}\r\n                </select>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Predmet */}\r\n          <div>\r\n            <label htmlFor=\"subject\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n              Predmet *\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"subject\"\r\n              value={subject}\r\n              onChange={(e) => setSubject(e.target.value)}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n              placeholder=\"Zadajte predmet správy\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {/* Typ správy */}\r\n          <div>\r\n            <label htmlFor=\"messageType\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n              Typ správy\r\n            </label>\r\n            <select\r\n              id=\"messageType\"\r\n              value={messageType}\r\n              onChange={(e) => setMessageType(e.target.value)}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n            >\r\n              <option value=\"general\">Všeobecná</option>\r\n              <option value=\"question\">Otázka</option>\r\n              <option value=\"report\">Report</option>\r\n              <option value=\"urgent\">Urgentná</option>\r\n              <option value=\"welcome\">Vitajúca</option>\r\n            </select>\r\n          </div>\r\n\r\n          {/* Obsah */}\r\n          <div>\r\n            <label htmlFor=\"content\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n              Obsah správy *\r\n            </label>\r\n            <textarea\r\n              id=\"content\"\r\n              value={content}\r\n              onChange={(e) => setContent(e.target.value)}\r\n              rows={6}\r\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none\"\r\n              placeholder=\"Napíšte obsah správy...\"\r\n              required\r\n            />\r\n          </div>\r\n\r\n          {/* Chyba */}\r\n          {error && (\r\n            <div className=\"p-4 bg-red-50 border border-red-200 rounded-md\">\r\n              <p className=\"text-sm text-red-800\">{error}</p>\r\n            </div>\r\n          )}\r\n\r\n          {/* Tlačidlá */}\r\n          <div className=\"flex space-x-3 pt-4\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleClose}\r\n              className=\"flex-1 px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 transition-colors\"\r\n            >\r\n              Zrušiť\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              disabled={isLoading}\r\n              className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center justify-center\"\r\n            >\r\n              {isLoading ? (\r\n                <>\r\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n                  Odosielam...\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <PaperAirplaneIcon className=\"h-4 w-4 mr-2\" />\r\n                  Odoslať správu\r\n                </>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageModal;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { \r\n  EnvelopeIcon,\r\n  PaperAirplaneIcon,\r\n  TrashIcon,\r\n  EyeIcon,\r\n  EyeSlashIcon\r\n} from '@heroicons/react/24/outline';\r\nimport { apiService } from '../services/apiService';\r\nimport { hrService } from '../services/hrService';\r\nimport MessageModal from './MessageModal';\r\n\r\ninterface MessagesListProps {\r\n  userEmail: string;\r\n  userRole?: 'admin' | 'user' | 'accountant' | 'employee';\r\n  companyId?: number;\r\n  isAdmin?: boolean;\r\n  onMessageAction?: () => void;\r\n}\r\n\r\ninterface Message {\r\n  id: number;\r\n  sender_email: string;\r\n  recipient_email: string;\r\n  subject: string;\r\n  content: string;\r\n  company_id?: number;\r\n  message_type: string;\r\n  read_at?: string;\r\n  created_at: string;\r\n  sender_name?: string;\r\n  recipient_name?: string;\r\n  company_name?: string;\r\n}\r\n\r\nconst MessagesList: React.FC<MessagesListProps> = ({ userEmail, userRole, companyId, isAdmin = false, onMessageAction }) => {\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showMessageModal, setShowMessageModal] = useState(false);\r\n  const [selectedMessage, setSelectedMessage] = useState<Message | null>(null);\r\n  const [filter, setFilter] = useState<'all' | 'unread' | 'received' | 'sent'>('all');\r\n\r\n  // Načítanie správ\r\n  const loadMessages = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      let messagesData: Message[];\r\n      \r\n      // Kontrola, či je používateľ prihlásený\r\n      const token = apiService.getToken();\r\n      if (!token) {\r\n        console.log('Používateľ nie je prihlásený, preskočenie načítania správ');\r\n        setMessages([]);\r\n        return;\r\n      }\r\n      \r\n      console.log('Načítavam správy pre:', { userEmail, userRole, companyId, isAdmin });\r\n      \r\n      if (isAdmin) {\r\n        messagesData = await apiService.getAllMessages();\r\n      } else if (userRole === 'employee' && companyId) {\r\n        // Pre zamestnancov používame user endpoint (rovnaký ako pre user)\r\n        console.log('Používam user endpoint pre employee:', userEmail);\r\n        messagesData = await apiService.getUserMessages(userEmail);\r\n      } else if (companyId) {\r\n        messagesData = await apiService.getCompanyMessages(companyId);\r\n      } else {\r\n        messagesData = await apiService.getUserMessages(userEmail);\r\n      }\r\n      \r\n      console.log('Načítané správy:', messagesData);\r\n      console.log('Počet správ:', messagesData.length);\r\n      setMessages(messagesData);\r\n    } catch (error) {\r\n      console.error('Chyba pri načítaní správ:', error);\r\n      setMessages([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [isAdmin, companyId, userEmail, userRole]);\r\n\r\n  useEffect(() => {\r\n    // Načítame správy iba ak je používateľ prihlásený\r\n    const token = apiService.getToken();\r\n    if (token && userEmail) {\r\n      loadMessages();\r\n    }\r\n  }, [userEmail, companyId, isAdmin, loadMessages]);\r\n\r\n  // Filtrovanie správ podľa oprávnení\r\n  const [filteredMessages, setFilteredMessages] = useState<Message[]>([]);\r\n\r\n  useEffect(() => {\r\n    const filterMessagesByPermissions = async () => {\r\n      let filtered = messages.filter(message => {\r\n        if (filter === 'unread') {\r\n          return !message.read_at && message.recipient_email === userEmail;\r\n        }\r\n        if (filter === 'received') {\r\n          return message.recipient_email === userEmail;\r\n        }\r\n        if (filter === 'sent') {\r\n          return message.sender_email === userEmail;\r\n        }\r\n        return true;\r\n      });\r\n\r\n      // Dodatočné filtrovanie podľa oprávnení pre prijímanie správ\r\n      if (userRole === 'user') {\r\n        // User môže prijímať správy od Admin, priradených Accountant a svojich zamestnancov\r\n        const userCompanies = await apiService.getUserCompanies(userEmail);\r\n        const assignedAccountantEmails: string[] = [];\r\n        const employeeEmails: string[] = [];\r\n        \r\n        // Načítame priradených účtovníkov a zamestnancov zo všetkých firiem\r\n        for (const company of userCompanies) {\r\n          if (company.assignedToAccountants) {\r\n            assignedAccountantEmails.push(...company.assignedToAccountants);\r\n          }\r\n          \r\n          // Načítame zamestnancov pre každú firmu\r\n          try {\r\n            const employees = await hrService.getEmployees(company.id);\r\n            employeeEmails.push(...employees.map(emp => emp.email));\r\n          } catch (error) {\r\n            console.error(`Chyba pri načítaní zamestnancov pre firmu ${company.id}:`, error);\r\n          }\r\n        }\r\n        \r\n        filtered = filtered.filter(message => \r\n          message.sender_email === 'admin@portal.sk' || \r\n          assignedAccountantEmails.includes(message.sender_email) ||\r\n          employeeEmails.includes(message.sender_email) || // správy od zamestnancov\r\n          message.sender_email === userEmail // vlastné správy\r\n        );\r\n      } else if (userRole === 'accountant') {\r\n        // Accountant môže prijímať správy iba od Admin a priradených User\r\n        const accountantCompanies = await apiService.getAccountantCompanies(userEmail);\r\n        const assignedUserEmails: string[] = [];\r\n        \r\n        accountantCompanies.forEach(company => {\r\n          if (company.owner_email) {\r\n            assignedUserEmails.push(company.owner_email);\r\n          }\r\n        });\r\n        \r\n        filtered = filtered.filter(message => \r\n          message.sender_email === 'admin@portal.sk' || \r\n          assignedUserEmails.includes(message.sender_email) ||\r\n          message.sender_email === userEmail // vlastné správy\r\n        );\r\n      } else if (userRole === 'employee') {\r\n        // Employee môže prijímať správy od svojej firmy (company owner) a posielať správy svojej firme\r\n        console.log('Filtrovanie pre employee:', { userEmail, companyId });\r\n        console.log('Všetky správy pred filtrovaním:', messages);\r\n        \r\n        if (companyId) {\r\n          const company = await apiService.getCompanyById(companyId);\r\n          console.log('Company data:', company);\r\n          if (company && company.owner_email) {\r\n            console.log('Company owner email:', company.owner_email);\r\n            console.log('User email:', userEmail);\r\n            \r\n            filtered = filtered.filter(message => {\r\n              const isFromCompany = message.sender_email === company.owner_email;\r\n              const isToCompany = message.recipient_email === company.owner_email;\r\n              const isFromUser = message.sender_email === userEmail;\r\n              const isToUser = message.recipient_email === userEmail;\r\n              \r\n              console.log('Message:', message.subject, {\r\n                isFromCompany,\r\n                isToCompany,\r\n                isFromUser,\r\n                isToUser,\r\n                sender: message.sender_email,\r\n                recipient: message.recipient_email\r\n              });\r\n              \r\n              return isFromCompany || isToCompany || isFromUser || isToUser;\r\n            });\r\n            console.log('Filtrované správy pre employee:', filtered);\r\n          }\r\n        } else {\r\n          console.log('companyId nie je nastavené pre employee');\r\n        }\r\n      }\r\n      // Admin môže prijímať správy od všetkých\r\n      \r\n      setFilteredMessages(filtered);\r\n    };\r\n\r\n    filterMessagesByPermissions();\r\n  }, [messages, filter, userEmail, userRole]);\r\n\r\n  // Označenie správy ako prečítaná\r\n  const handleMarkAsRead = async (messageId: number) => {\r\n    try {\r\n      await apiService.markMessageAsRead(messageId);\r\n      setMessages(prev => prev.map(msg => \r\n        msg.id === messageId ? { ...msg, read_at: new Date().toISOString() } : msg\r\n      ));\r\n      onMessageAction?.();\r\n    } catch (error) {\r\n      console.error('Chyba pri označení správy ako prečítaná:', error);\r\n    }\r\n  };\r\n\r\n  // Označenie správy ako neprečítaná\r\n  const handleMarkAsUnread = async (messageId: number) => {\r\n    try {\r\n      await apiService.markMessageAsUnread(messageId);\r\n      setMessages(prev => prev.map(msg => \r\n        msg.id === messageId ? { ...msg, read_at: undefined } : msg\r\n      ));\r\n      onMessageAction?.();\r\n    } catch (error) {\r\n      console.error('Chyba pri označení správy ako neprečítaná:', error);\r\n    }\r\n  };\r\n\r\n  // Vymazanie správy\r\n  const handleDeleteMessage = async (messageId: number) => {\r\n    if (!window.confirm('Naozaj chcete vymazať túto správu?')) return;\r\n    \r\n    try {\r\n      await apiService.deleteMessage(messageId);\r\n      setMessages(prev => prev.filter(msg => msg.id !== messageId));\r\n      onMessageAction?.();\r\n    } catch (error) {\r\n      console.error('Chyba pri vymazaní správy:', error);\r\n    }\r\n  };\r\n\r\n  // Odpoveď na správu\r\n  const handleReply = (message: Message) => {\r\n    setSelectedMessage(message);\r\n    setShowMessageModal(true);\r\n  };\r\n\r\n  const getMessageTypeIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'urgent':\r\n        return <span className=\"text-red-500\">🚨</span>;\r\n      case 'question':\r\n        return <span className=\"text-blue-500\">❓</span>;\r\n      case 'report':\r\n        return <span className=\"text-green-500\">📊</span>;\r\n      case 'welcome':\r\n        return <span className=\"text-purple-500\">👋</span>;\r\n      default:\r\n        return <EnvelopeIcon className=\"h-4 w-4 text-gray-500\" />;\r\n    }\r\n  };\r\n\r\n  const getMessageTypeLabel = (type: string) => {\r\n    switch (type) {\r\n      case 'urgent': return 'Urgentná';\r\n      case 'question': return 'Otázka';\r\n      case 'report': return 'Report';\r\n      case 'welcome': return 'Vitajúca';\r\n      default: return 'Všeobecná';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"text-center py-12\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\r\n        <p className=\"mt-4 text-gray-600\">Načítavam správy...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold text-gray-900\">Správy</h2>\r\n          <p className=\"text-gray-600 mt-1\">\r\n            {filteredMessages.length} správ\r\n            {filter === 'unread' && (\r\n              <span className=\"text-blue-600 font-medium\">\r\n                {' '}({filteredMessages.filter(m => !m.read_at && m.recipient_email === userEmail).length} neprečítaných)\r\n              </span>\r\n            )}\r\n          </p>\r\n        </div>\r\n        <button\r\n          onClick={() => setShowMessageModal(true)}\r\n          className=\"bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 flex items-center gap-2 transition-colors\"\r\n        >\r\n          <PaperAirplaneIcon className=\"h-4 w-4\" />\r\n          Nová správa\r\n        </button>\r\n      </div>\r\n\r\n      {/* Filter */}\r\n      <div className=\"flex space-x-2\">\r\n        <button\r\n          onClick={() => setFilter('all')}\r\n          className={`px-3 py-1 text-sm rounded-md ${\r\n            filter === 'all'\r\n              ? 'bg-blue-600 text-white'\r\n              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n          }`}\r\n        >\r\n          Všetky ({messages.length})\r\n        </button>\r\n        <button\r\n          onClick={() => setFilter('unread')}\r\n          className={`px-3 py-1 text-sm rounded-md ${\r\n            filter === 'unread'\r\n              ? 'bg-blue-600 text-white'\r\n              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n          }`}\r\n        >\r\n          Neprečítané ({messages.filter(m => !m.read_at && m.recipient_email === userEmail).length})\r\n        </button>\r\n        <button\r\n          onClick={() => setFilter('received')}\r\n          className={`px-3 py-1 text-sm rounded-md ${\r\n            filter === 'received'\r\n              ? 'bg-blue-600 text-white'\r\n              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n          }`}\r\n        >\r\n          Prijaté ({messages.filter(m => m.recipient_email === userEmail).length})\r\n        </button>\r\n        <button\r\n          onClick={() => setFilter('sent')}\r\n          className={`px-3 py-1 text-sm rounded-md ${\r\n            filter === 'sent'\r\n              ? 'bg-blue-600 text-white'\r\n              : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n          }`}\r\n        >\r\n          Odoslané ({messages.filter(m => m.sender_email === userEmail).length})\r\n        </button>\r\n      </div>\r\n\r\n      {/* Messages List */}\r\n      <div className=\"space-y-4\">\r\n        {filteredMessages.length === 0 ? (\r\n          <div className=\"text-center py-12\">\r\n            <EnvelopeIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\r\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">Žiadne správy</h3>\r\n            <p className=\"mt-1 text-sm text-gray-500\">\r\n              {filter === 'all' ? 'Zatiaľ nemáte žiadne správy.' : \r\n               filter === 'unread' ? 'Všetky správy sú prečítané.' : \r\n               filter === 'received' ? 'Zatiaľ ste neprijali žiadne správy.' :\r\n               'Zatiaľ ste neodoslali žiadne správy.'}\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          filteredMessages.map((message) => (\r\n            <div\r\n              key={message.id}\r\n              className={`bg-white rounded-lg shadow-md p-6 border-l-4 ${\r\n                message.read_at ? 'border-gray-200' : 'border-blue-500'\r\n              }`}\r\n            >\r\n              <div className=\"flex items-start justify-between\">\r\n                <div className=\"flex-1\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    {getMessageTypeIcon(message.message_type)}\r\n                    <h3 className=\"text-lg font-medium text-gray-900\">{message.subject}</h3>\r\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800\">\r\n                      {getMessageTypeLabel(message.message_type)}\r\n                    </span>\r\n                    {!message.read_at && message.recipient_email === userEmail && (\r\n                      <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">\r\n                        Nové\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"mt-2 space-y-1 text-sm text-gray-600\">\r\n                    <p>\r\n                      <span className=\"font-medium\">Od:</span> {message.sender_name || message.sender_email}\r\n                    </p>\r\n                    <p>\r\n                      <span className=\"font-medium\">Pre:</span> {message.recipient_name || message.recipient_email}\r\n                    </p>\r\n                    {message.company_name && (\r\n                      <p>\r\n                        <span className=\"font-medium\">Firma:</span> {message.company_name}\r\n                      </p>\r\n                    )}\r\n                    <p className=\"text-gray-500\">\r\n                      {new Date(message.created_at).toLocaleString('sk-SK')}\r\n                    </p>\r\n                  </div>\r\n                  \r\n                  <p className=\"text-gray-700 mt-3\">{message.content}</p>\r\n                </div>\r\n                \r\n                <div className=\"flex space-x-2 ml-4\">\r\n                  {(message.recipient_email === userEmail || isAdmin) && (\r\n                    <button\r\n                      onClick={() => message.read_at ? handleMarkAsUnread(message.id) : handleMarkAsRead(message.id)}\r\n                      className=\"text-gray-600 hover:text-gray-700 p-1\"\r\n                      title={message.read_at ? 'Označiť ako neprečítané' : 'Označiť ako prečítané'}\r\n                    >\r\n                      {message.read_at ? <EyeSlashIcon className=\"h-4 w-4\" /> : <EyeIcon className=\"h-4 w-4\" />}\r\n                    </button>\r\n                  )}\r\n                  <button\r\n                    onClick={() => handleReply(message)}\r\n                    className=\"text-blue-600 hover:text-blue-700 p-1\"\r\n                    title=\"Odpovedať\"\r\n                  >\r\n                    <PaperAirplaneIcon className=\"h-4 w-4\" />\r\n                  </button>\r\n                  <button\r\n                    onClick={() => handleDeleteMessage(message.id)}\r\n                    className=\"text-red-600 hover:text-red-700 p-1\"\r\n                    title=\"Vymazať\"\r\n                  >\r\n                    <TrashIcon className=\"h-4 w-4\" />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      {/* Message Modal */}\r\n      <MessageModal\r\n        isOpen={showMessageModal}\r\n        onClose={() => {\r\n          setShowMessageModal(false);\r\n          setSelectedMessage(null);\r\n        }}\r\n        onSend={() => {\r\n          loadMessages();\r\n          onMessageAction?.();\r\n        }}\r\n        senderEmail={userEmail}\r\n        userRole={userRole}\r\n        companyId={companyId}\r\n        initialRecipient={selectedMessage?.sender_email === userEmail ? selectedMessage.recipient_email : selectedMessage?.sender_email}\r\n        initialSubject={selectedMessage ? `Re: ${selectedMessage.subject}` : ''}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessagesList;\r\n"],"names":["hrService","getEmployees","companyId","apiService","get","concat","addEmployee","employeeData","post","updateEmployee","id","put","getAttendance","employeeId","startDate","endDate","url","params","URLSearchParams","append","toString","checkAttendanceDuplicates","addAttendance","attendanceData","getLeaveRequests","status","addLeaveRequest","leaveData","updateLeaveRequestStatus","approvedBy","approved_by","getWorkShifts","addWorkShift","shiftData","getHREvents","eventType","addHREvent","eventData","findEmployeeByEmail","email","encodeURIComponent","updateEmployeeCompany","company_id","getHRStats","getEmploymentTypeLabel","type","getStatusLabel","getLeaveTypeLabel","getEventTypeLabel","getAttendanceStatusLabel","calculateWorkHours","checkIn","checkOut","start","Date","diffHours","getTime","Math","round","formatTime","time","substring","formatDate","date","toLocaleDateString","formatDateTime","dateTime","toLocaleString","createEmployeeChange","changeData","getEmployeeChanges","getCompanyChanges","approveEmployeeChange","changeId","patch","rejectEmployeeChange","updateEmployeeField","fieldName","newValue","field_name","new_value","getAttendanceSettings","createAutomaticAttendance","addAttendanceWithType","getEmploymentRelations","addEmploymentRelation","relationData","updateEmploymentRelation","getEmployeesWithAutomaticAttendance","processAutomaticAttendance","employeeIds","getPresentEmployeesToday","getAbsentEmployeesToday","getEmployeesAttendanceStatus","getEmployeesWithMissingAttendance","recordAttendance","_ref","isOpen","onClose","onSend","senderEmail","userRole","initialRecipient","initialSubject","recipientEmail","setRecipientEmail","useState","subject","setSubject","content","setContent","messageType","setMessageType","isLoading","setIsLoading","error","setError","users","setUsers","loadingUsers","setLoadingUsers","companies","setCompanies","selectedCompanyId","setSelectedCompanyId","loadingCompanies","setLoadingCompanies","useEffect","async","companiesData","getAllCompanies","getAccountantCompanies","console","loadCompanies","allUsers","getAllUsers","filteredUsers","assignedAccountantEmails","employeeEmails","employees","push","map","emp","company","getCompanyById","assignedToAccountants","userCompanies","getUserCompanies","filter","user","role","includes","accountantCompanies","assignedUserEmails","forEach","owner_email","companyOwner","find","_objectSpread","name","loadUsers","handleClose","_jsx","className","children","_jsxs","PaperAirplaneIcon","onClick","XMarkIcon","onSubmit","e","preventDefault","trim","log","sender_email","recipient_email","message_type","response","sendMessage","alert","Error","message","htmlFor","value","onChange","target","placeholder","required","Number","undefined","disabled","rows","_Fragment","userEmail","isAdmin","onMessageAction","messages","setMessages","loading","setLoading","showMessageModal","setShowMessageModal","selectedMessage","setSelectedMessage","setFilter","loadMessages","useCallback","messagesData","getToken","getAllMessages","getUserMessages","getCompanyMessages","length","filteredMessages","setFilteredMessages","filtered","read_at","isFromCompany","isToCompany","isFromUser","isToUser","sender","recipient","filterMessagesByPermissions","getMessageTypeIcon","EnvelopeIcon","getMessageTypeLabel","m","sender_name","recipient_name","company_name","created_at","markMessageAsUnread","messageId","prev","msg","handleMarkAsUnread","markMessageAsRead","toISOString","handleMarkAsRead","title","EyeSlashIcon","EyeIcon","handleReply","window","confirm","deleteMessage","handleDeleteMessage","TrashIcon","MessageModal"],"sourceRoot":""}